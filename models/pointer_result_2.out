2019-02-16 14:46:48.059846: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2019-02-16 14:46:48.364677: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1105] Found device 0 with properties: 
name: Tesla P100-SXM2-16GB major: 6 minor: 0 memoryClockRate(GHz): 1.4805
pciBusID: 0000:07:00.0
totalMemory: 15.90GiB freeMemory: 15.61GiB
2019-02-16 14:46:48.606090: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1105] Found device 1 with properties: 
name: Tesla P100-SXM2-16GB major: 6 minor: 0 memoryClockRate(GHz): 1.4805
pciBusID: 0000:08:00.0
totalMemory: 15.90GiB freeMemory: 15.61GiB
2019-02-16 14:46:48.606145: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Device peer to peer matrix
2019-02-16 14:46:48.606158: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1126] DMA: 0 1 
2019-02-16 14:46:48.606163: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1136] 0:   Y Y 
2019-02-16 14:46:48.606166: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1136] 1:   Y Y 
2019-02-16 14:46:48.606190: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla P100-SXM2-16GB, pci bus id: 0000:07:00.0, compute capability: 6.0)
2019-02-16 14:46:48.606196: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:1) -> (device: 1, name: Tesla P100-SXM2-16GB, pci bus id: 0000:08:00.0, compute capability: 6.0)
********Training Model 2***************************
Iter :  0 Batch :  1   Loss :  1.7076807  Accuracy :  24.48  Class Accuracy :  63.55329949238578  Car class accuracy  63.55329949238578
Iter :  0 Batch :  2   Loss :  1.4905655  Accuracy :  45.69  Class Accuracy :  60.67415730337078  Car class accuracy  60.67415730337078
Iter :  0 Batch :  3   Loss :  1.2789625  Accuracy :  49.565  Class Accuracy :  66.66666666666667  Car class accuracy  66.66666666666667
Iter :  0 Batch :  4   Loss :  1.0250038  Accuracy :  60.0  Class Accuracy :  55.45454545454545  Car class accuracy  55.45454545454545
Iter :  0 Batch :  5   Loss :  2.3378503  Accuracy :  68.305  Class Accuracy :  23.542152615794738  Car class accuracy  23.542152615794738
Iter :  0 Batch :  6   Loss :  0.9041875  Accuracy :  65.89  Class Accuracy :  48.69109947643979  Car class accuracy  48.69109947643979
Iter :  0 Batch :  7   Loss :  1.6645792  Accuracy :  68.88  Class Accuracy :  23.18435754189944  Car class accuracy  23.18435754189944
Iter :  0 Batch :  8   Loss :  1.1939725  Accuracy :  65.155  Class Accuracy :  32.63636363636363  Car class accuracy  32.63636363636363
Iter :  0 Batch :  9   Loss :  1.2745969  Accuracy :  55.355  Class Accuracy :  41.59474671669794  Car class accuracy  41.59474671669794
Iter :  0 Batch :  10   Loss :  1.0885547  Accuracy :  50.660000000000004  Class Accuracy :  68.2258064516129  Car class accuracy  68.2258064516129
Iter :  0 Batch :  11   Loss :  1.1133317  Accuracy :  59.085  Class Accuracy :  47.55395683453237  Car class accuracy  47.55395683453237
Iter :  0 Batch :  12   Loss :  0.98337644  Accuracy :  64.58500000000001  Class Accuracy :  37.995735607675904  Car class accuracy  37.995735607675904
Iter :  0 Batch :  13   Loss :  1.0618284  Accuracy :  75.225  Class Accuracy :  22.873315363881403  Car class accuracy  22.873315363881403
Iter :  0 Batch :  14   Loss :  0.77938837  Accuracy :  74.37  Class Accuracy :  37.65182186234818  Car class accuracy  37.65182186234818
Iter :  0 Batch :  15   Loss :  1.2144164  Accuracy :  77.985  Class Accuracy :  19.647058823529413  Car class accuracy  19.647058823529413
Iter :  0 Batch :  16   Loss :  0.74294657  Accuracy :  80.625  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 1 loss : 1.2413275 Accuracy: 61.6159375 Class Accuracy : 40.621567740484025
Iter :  1 Batch :  0   Loss :  0.93548435  Accuracy :  88.13499999999999  Class Accuracy :  14.189473684210526  Car class accuracy  14.189473684210526
Iter :  1 Batch :  1   Loss :  1.4995228  Accuracy :  78.57  Class Accuracy :  19.48717948717949  Car class accuracy  19.48717948717949
Iter :  1 Batch :  2   Loss :  0.71473354  Accuracy :  81.49  Class Accuracy :  24.73684210526316  Car class accuracy  24.73684210526316
Iter :  1 Batch :  3   Loss :  0.73585033  Accuracy :  77.345  Class Accuracy :  34.14285714285714  Car class accuracy  34.14285714285714
Iter :  1 Batch :  4   Loss :  0.64796144  Accuracy :  78.95  Class Accuracy :  34.61538461538461  Car class accuracy  34.61538461538461
Iter :  1 Batch :  5   Loss :  1.355367  Accuracy :  90.01  Class Accuracy :  10.290637860082304  Car class accuracy  10.290637860082304
Iter :  1 Batch :  6   Loss :  0.5625636  Accuracy :  90.345  Class Accuracy :  20.161290322580644  Car class accuracy  20.161290322580644
Iter :  1 Batch :  7   Loss :  1.1542751  Accuracy :  87.445  Class Accuracy :  11.2957222566646  Car class accuracy  11.2957222566646
Iter :  1 Batch :  8   Loss :  0.9279084  Accuracy :  87.935  Class Accuracy :  15.07998270644185  Car class accuracy  15.07998270644185
Iter :  1 Batch :  9   Loss :  0.97994727  Accuracy :  73.63  Class Accuracy :  23.90010626992561  Car class accuracy  23.90010626992561
Iter :  1 Batch :  10   Loss :  0.72854334  Accuracy :  79.235  Class Accuracy :  32.827586206896555  Car class accuracy  32.827586206896555
Iter :  1 Batch :  11   Loss :  0.7020332  Accuracy :  78.16499999999999  Class Accuracy :  23.986486486486484  Car class accuracy  23.986486486486484
Iter :  1 Batch :  12   Loss :  0.69690585  Accuracy :  79.86999999999999  Class Accuracy :  25.098468271334788  Car class accuracy  25.098468271334788
Iter :  1 Batch :  13   Loss :  1.0652581  Accuracy :  79.69000000000001  Class Accuracy :  17.996697853604843  Car class accuracy  17.996697853604843
Iter :  1 Batch :  14   Loss :  0.6197406  Accuracy :  86.44  Class Accuracy :  24.194915254237287  Car class accuracy  24.194915254237287
Iter :  1 Batch :  15   Loss :  0.9983548  Accuracy :  82.545  Class Accuracy :  15.81580855692531  Car class accuracy  15.81580855692531
Iter :  1 Batch :  16   Loss :  0.65845037  Accuracy :  82.55  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 2 loss : 1.0558832 Accuracy: 72.36984848484849 Class Accuracy : 30.23528857357029
Iter :  2 Batch :  0   Loss :  0.5740239  Accuracy :  88.785  Class Accuracy :  18.97326203208556  Car class accuracy  18.97326203208556
Iter :  2 Batch :  1   Loss :  1.0240374  Accuracy :  81.11500000000001  Class Accuracy :  18.412816691505217  Car class accuracy  18.412816691505217
Iter :  2 Batch :  2   Loss :  0.5722938  Accuracy :  86.86500000000001  Class Accuracy :  21.06951871657754  Car class accuracy  21.06951871657754
Iter :  2 Batch :  3   Loss :  0.6088932  Accuracy :  80.46  Class Accuracy :  27.412587412587413  Car class accuracy  27.412587412587413
Iter :  2 Batch :  4   Loss :  0.5483667  Accuracy :  81.675  Class Accuracy :  25.0  Car class accuracy  25.0
Iter :  2 Batch :  5   Loss :  1.169816  Accuracy :  91.685  Class Accuracy :  9.695963208993357  Car class accuracy  9.695963208993357
Iter :  2 Batch :  6   Loss :  0.5753012  Accuracy :  88.89  Class Accuracy :  24.437869822485204  Car class accuracy  24.437869822485204
Iter :  2 Batch :  7   Loss :  1.0606287  Accuracy :  88.58500000000001  Class Accuracy :  10.879432624113475  Car class accuracy  10.879432624113475
Iter :  2 Batch :  8   Loss :  1.021087  Accuracy :  90.82000000000001  Class Accuracy :  11.73766343315057  Car class accuracy  11.73766343315057
Iter :  2 Batch :  9   Loss :  0.81225604  Accuracy :  80.74  Class Accuracy :  18.656307129798904  Car class accuracy  18.656307129798904
Iter :  2 Batch :  10   Loss :  0.6149578  Accuracy :  84.425  Class Accuracy :  25.555555555555554  Car class accuracy  25.555555555555554
Iter :  2 Batch :  11   Loss :  0.58104885  Accuracy :  81.555  Class Accuracy :  23.984962406015036  Car class accuracy  23.984962406015036
Iter :  2 Batch :  12   Loss :  0.64762884  Accuracy :  86.205  Class Accuracy :  16.99134199134199  Car class accuracy  16.99134199134199
Iter :  2 Batch :  13   Loss :  0.8899689  Accuracy :  85.94500000000001  Class Accuracy :  13.993524015110632  Car class accuracy  13.993524015110632
Iter :  2 Batch :  14   Loss :  0.49391708  Accuracy :  89.805  Class Accuracy :  18.893129770992367  Car class accuracy  18.893129770992367
Iter :  2 Batch :  15   Loss :  0.8423129  Accuracy :  86.765  Class Accuracy :  13.867791842475388  Car class accuracy  13.867791842475388
Iter :  2 Batch :  16   Loss :  0.6020558  Accuracy :  82.395  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 3 loss : 0.9496547 Accuracy: 76.8984 Class Accuracy : 25.946524991612154
Iter :  3 Batch :  0   Loss :  0.8269185  Accuracy :  85.94500000000001  Class Accuracy :  15.409504550050556  Car class accuracy  15.409504550050556
Iter :  3 Batch :  1   Loss :  0.7640061  Accuracy :  88.14999999999999  Class Accuracy :  19.081196581196583  Car class accuracy  19.081196581196583
Iter :  3 Batch :  2   Loss :  0.48923013  Accuracy :  90.485  Class Accuracy :  18.917525773195877  Car class accuracy  18.917525773195877
Iter :  3 Batch :  3   Loss :  0.56851876  Accuracy :  81.47999999999999  Class Accuracy :  27.938931297709924  Car class accuracy  27.938931297709924
Iter :  3 Batch :  4   Loss :  0.5626827  Accuracy :  83.095  Class Accuracy :  23.75  Car class accuracy  23.75
Iter :  3 Batch :  5   Loss :  0.95239747  Accuracy :  92.465  Class Accuracy :  10.73926073926074  Car class accuracy  10.73926073926074
Iter :  3 Batch :  6   Loss :  0.47222304  Accuracy :  93.515  Class Accuracy :  19.744897959183675  Car class accuracy  19.744897959183675
Iter :  3 Batch :  7   Loss :  1.4972801  Accuracy :  88.7  Class Accuracy :  11.119691119691119  Car class accuracy  11.119691119691119
Iter :  3 Batch :  8   Loss :  0.9781377  Accuracy :  89.595  Class Accuracy :  14.98287671232877  Car class accuracy  14.98287671232877
Iter :  3 Batch :  9   Loss :  0.93638694  Accuracy :  75.395  Class Accuracy :  23.026886383347787  Car class accuracy  23.026886383347787
Iter :  3 Batch :  10   Loss :  0.5724137  Accuracy :  86.695  Class Accuracy :  27.109375000000004  Car class accuracy  27.109375000000004
Iter :  3 Batch :  11   Loss :  0.60271853  Accuracy :  79.63  Class Accuracy :  29.06666666666667  Car class accuracy  29.06666666666667
Iter :  3 Batch :  12   Loss :  0.76872826  Accuracy :  78.245  Class Accuracy :  26.43010752688172  Car class accuracy  26.43010752688172
Iter :  3 Batch :  13   Loss :  0.8105651  Accuracy :  86.79  Class Accuracy :  14.148877941981391  Car class accuracy  14.148877941981391
Iter :  3 Batch :  14   Loss :  0.57718486  Accuracy :  83.67  Class Accuracy :  25.76354679802956  Car class accuracy  25.76354679802956
Iter :  3 Batch :  15   Loss :  0.943216  Accuracy :  84.28999999999999  Class Accuracy :  15.124077800134138  Car class accuracy  15.124077800134138
Iter :  3 Batch :  16   Loss :  0.605886  Accuracy :  81.99499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 4 loss : 0.90166014 Accuracy: 79.03074626865673 Class Accuracy : 24.17432346910845
Iter :  4 Batch :  0   Loss :  0.56746316  Accuracy :  91.295  Class Accuracy :  11.007092198581562  Car class accuracy  11.007092198581562
Iter :  4 Batch :  1   Loss :  0.9182019  Accuracy :  85.32499999999999  Class Accuracy :  17.288378766140603  Car class accuracy  17.288378766140603
Iter :  4 Batch :  2   Loss :  0.47073302  Accuracy :  89.88000000000001  Class Accuracy :  18.029556650246306  Car class accuracy  18.029556650246306
Iter :  4 Batch :  3   Loss :  0.5440334  Accuracy :  85.99  Class Accuracy :  23.096774193548384  Car class accuracy  23.096774193548384
Iter :  4 Batch :  4   Loss :  0.49413398  Accuracy :  86.82  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  4 Batch :  5   Loss :  1.4122847  Accuracy :  89.795  Class Accuracy :  8.563465923486193  Car class accuracy  8.563465923486193
Iter :  4 Batch :  6   Loss :  0.44776103  Accuracy :  91.43  Class Accuracy :  16.540284360189574  Car class accuracy  16.540284360189574
Iter :  4 Batch :  7   Loss :  0.9181872  Accuracy :  90.405  Class Accuracy :  9.563132658497603  Car class accuracy  9.563132658497603
Iter :  4 Batch :  8   Loss :  0.950048  Accuracy :  89.685  Class Accuracy :  12.012221737232649  Car class accuracy  12.012221737232649
Iter :  4 Batch :  9   Loss :  0.88544875  Accuracy :  80.66  Class Accuracy :  18.516242317822652  Car class accuracy  18.516242317822652
Iter :  4 Batch :  10   Loss :  0.47219092  Accuracy :  89.605  Class Accuracy :  20.780141843971627  Car class accuracy  20.780141843971627
Iter :  4 Batch :  11   Loss :  0.60748994  Accuracy :  82.34  Class Accuracy :  23.142857142857146  Car class accuracy  23.142857142857146
Iter :  4 Batch :  12   Loss :  0.6374112  Accuracy :  81.78999999999999  Class Accuracy :  23.432203389830512  Car class accuracy  23.432203389830512
Iter :  4 Batch :  13   Loss :  0.9490457  Accuracy :  82.675  Class Accuracy :  16.280487804878046  Car class accuracy  16.280487804878046
Iter :  4 Batch :  14   Loss :  0.49813262  Accuracy :  87.44  Class Accuracy :  22.212765957446805  Car class accuracy  22.212765957446805
Iter :  4 Batch :  15   Loss :  0.7684408  Accuracy :  87.3  Class Accuracy :  13.537023723939612  Car class accuracy  13.537023723939612
Iter :  4 Batch :  16   Loss :  0.49356508  Accuracy :  90.145  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 5 loss : 0.86245 Accuracy: 80.68619047619048 Class Accuracy : 22.54383691784447
Iter :  5 Batch :  0   Loss :  0.61416453  Accuracy :  90.05499999999999  Class Accuracy :  14.120707596253904  Car class accuracy  14.120707596253904
Iter :  5 Batch :  1   Loss :  0.6912252  Accuracy :  88.835  Class Accuracy :  15.18018018018018  Car class accuracy  15.18018018018018
Iter :  5 Batch :  2   Loss :  0.43443507  Accuracy :  93.425  Class Accuracy :  15.128205128205128  Car class accuracy  15.128205128205128
Iter :  5 Batch :  3   Loss :  0.53364885  Accuracy :  86.1  Class Accuracy :  22.885906040268456  Car class accuracy  22.885906040268456
Iter :  5 Batch :  4   Loss :  0.49454257  Accuracy :  84.74000000000001  Class Accuracy :  16.923076923076923  Car class accuracy  16.923076923076923
Iter :  5 Batch :  5   Loss :  0.837282  Accuracy :  94.43  Class Accuracy :  8.926196808510637  Car class accuracy  8.926196808510637
Iter :  5 Batch :  6   Loss :  0.3538282  Accuracy :  94.75  Class Accuracy :  13.224043715846994  Car class accuracy  13.224043715846994
Iter :  5 Batch :  7   Loss :  0.9069676  Accuracy :  90.85  Class Accuracy :  9.344569288389511  Car class accuracy  9.344569288389511
Iter :  5 Batch :  8   Loss :  1.050468  Accuracy :  91.53999999999999  Class Accuracy :  11.983753740914922  Car class accuracy  11.983753740914922
Iter :  5 Batch :  9   Loss :  0.85032207  Accuracy :  83.21499999999999  Class Accuracy :  15.479723046488624  Car class accuracy  15.479723046488624
Iter :  5 Batch :  10   Loss :  0.3898459  Accuracy :  91.545  Class Accuracy :  18.015267175572518  Car class accuracy  18.015267175572518
Iter :  5 Batch :  11   Loss :  0.5144691  Accuracy :  83.255  Class Accuracy :  24.92063492063492  Car class accuracy  24.92063492063492
Iter :  5 Batch :  12   Loss :  0.4919267  Accuracy :  90.4  Class Accuracy :  14.045454545454545  Car class accuracy  14.045454545454545
Iter :  5 Batch :  13   Loss :  0.76997656  Accuracy :  84.96000000000001  Class Accuracy :  15.585379782981153  Car class accuracy  15.585379782981153
Iter :  5 Batch :  14   Loss :  0.404264  Accuracy :  90.295  Class Accuracy :  17.100840336134453  Car class accuracy  17.100840336134453
Iter :  5 Batch :  15   Loss :  0.7608439  Accuracy :  87.03  Class Accuracy :  14.223048327137548  Car class accuracy  14.223048327137548
Iter :  5 Batch :  16   Loss :  0.41316885  Accuracy :  90.795  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 6 loss : 0.8213582 Accuracy: 82.11742574257427 Class Accuracy : 21.19573553123748
Iter :  6 Batch :  0   Loss :  1.1259358  Accuracy :  90.115  Class Accuracy :  10.53134962805526  Car class accuracy  10.53134962805526
Iter :  6 Batch :  1   Loss :  0.6499732  Accuracy :  89.255  Class Accuracy :  18.812316715542522  Car class accuracy  18.812316715542522
Iter :  6 Batch :  2   Loss :  0.45481983  Accuracy :  86.9  Class Accuracy :  23.42105263157895  Car class accuracy  23.42105263157895
Iter :  6 Batch :  3   Loss :  0.56883055  Accuracy :  83.265  Class Accuracy :  24.452554744525546  Car class accuracy  24.452554744525546
Iter :  6 Batch :  4   Loss :  0.5744545  Accuracy :  79.875  Class Accuracy :  27.500000000000004  Car class accuracy  27.500000000000004
Iter :  6 Batch :  5   Loss :  1.3628316  Accuracy :  91.155  Class Accuracy :  9.981713688610242  Car class accuracy  9.981713688610242
Iter :  6 Batch :  6   Loss :  0.45872813  Accuracy :  91.375  Class Accuracy :  15.154639175257731  Car class accuracy  15.154639175257731
Iter :  6 Batch :  7   Loss :  0.5796213  Accuracy :  90.16499999999999  Class Accuracy :  12.4791800128123  Car class accuracy  12.4791800128123
Iter :  6 Batch :  8   Loss :  0.81523424  Accuracy :  89.66499999999999  Class Accuracy :  14.627994955863807  Car class accuracy  14.627994955863807
Iter :  6 Batch :  9   Loss :  0.8326785  Accuracy :  78.79  Class Accuracy :  19.513406156901688  Car class accuracy  19.513406156901688
Iter :  6 Batch :  10   Loss :  0.5304759  Accuracy :  89.125  Class Accuracy :  24.125874125874127  Car class accuracy  24.125874125874127
Iter :  6 Batch :  11   Loss :  0.58454096  Accuracy :  81.285  Class Accuracy :  27.93103448275862  Car class accuracy  27.93103448275862
Iter :  6 Batch :  12   Loss :  0.512427  Accuracy :  87.655  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  6 Batch :  13   Loss :  1.011195  Accuracy :  80.66  Class Accuracy :  15.922909880564603  Car class accuracy  15.922909880564603
Iter :  6 Batch :  14   Loss :  0.5137645  Accuracy :  88.35499999999999  Class Accuracy :  20.517928286852587  Car class accuracy  20.517928286852587
Iter :  6 Batch :  15   Loss :  1.0625924  Accuracy :  84.67  Class Accuracy :  11.18060435699227  Car class accuracy  11.18060435699227
Iter :  6 Batch :  16   Loss :  0.47339898  Accuracy :  90.035  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 7 loss : 0.8056668 Accuracy: 82.76444915254237 Class Accuracy : 20.651880063535387
Iter :  7 Batch :  0   Loss :  0.49662885  Accuracy :  93.475  Class Accuracy :  12.619289340101522  Car class accuracy  12.619289340101522
Iter :  7 Batch :  1   Loss :  0.8486424  Accuracy :  87.805  Class Accuracy :  14.964788732394366  Car class accuracy  14.964788732394366
Iter :  7 Batch :  2   Loss :  0.3997135  Accuracy :  94.42  Class Accuracy :  12.923076923076923  Car class accuracy  12.923076923076923
Iter :  7 Batch :  3   Loss :  0.5256293  Accuracy :  86.96000000000001  Class Accuracy :  19.602649006622517  Car class accuracy  19.602649006622517
Iter :  7 Batch :  4   Loss :  0.49488223  Accuracy :  86.285  Class Accuracy :  17.777777777777775  Car class accuracy  17.777777777777775
Iter :  7 Batch :  5   Loss :  1.1348397  Accuracy :  92.525  Class Accuracy :  7.286821705426356  Car class accuracy  7.286821705426356
Iter :  7 Batch :  6   Loss :  0.4020385  Accuracy :  96.2  Class Accuracy :  9.551569506726457  Car class accuracy  9.551569506726457
Iter :  7 Batch :  7   Loss :  0.97948045  Accuracy :  88.735  Class Accuracy :  10.44527896995708  Car class accuracy  10.44527896995708
Iter :  7 Batch :  8   Loss :  1.0536395  Accuracy :  87.42999999999999  Class Accuracy :  11.322596388482186  Car class accuracy  11.322596388482186
Iter :  7 Batch :  9   Loss :  0.7917169  Accuracy :  86.53  Class Accuracy :  14.552763819095476  Car class accuracy  14.552763819095476
Iter :  7 Batch :  10   Loss :  0.3657792  Accuracy :  94.38  Class Accuracy :  15.766423357664234  Car class accuracy  15.766423357664234
Iter :  7 Batch :  11   Loss :  0.48989707  Accuracy :  87.81  Class Accuracy :  21.056338028169012  Car class accuracy  21.056338028169012
Iter :  7 Batch :  12   Loss :  0.51961476  Accuracy :  89.61  Class Accuracy :  17.473684210526315  Car class accuracy  17.473684210526315
Iter :  7 Batch :  13   Loss :  0.7040974  Accuracy :  89.025  Class Accuracy :  13.423631123919307  Car class accuracy  13.423631123919307
Iter :  7 Batch :  14   Loss :  0.45976758  Accuracy :  90.03999999999999  Class Accuracy :  19.253112033195023  Car class accuracy  19.253112033195023
Iter :  7 Batch :  15   Loss :  0.72225344  Accuracy :  88.115  Class Accuracy :  13.692307692307693  Car class accuracy  13.692307692307693
Iter :  7 Batch :  16   Loss :  0.41035548  Accuracy :  93.33500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 8 loss : 0.7842049 Accuracy: 83.69544444444445 Class Accuracy : 19.767658934167542
Iter :  8 Batch :  0   Loss :  0.52230686  Accuracy :  92.72500000000001  Class Accuracy :  14.12551440329218  Car class accuracy  14.12551440329218
Iter :  8 Batch :  1   Loss :  1.189596  Accuracy :  88.92999999999999  Class Accuracy :  10.32017870439315  Car class accuracy  10.32017870439315
Iter :  8 Batch :  2   Loss :  0.3538448  Accuracy :  94.28  Class Accuracy :  14.05128205128205  Car class accuracy  14.05128205128205
Iter :  8 Batch :  3   Loss :  0.4534669  Accuracy :  89.92  Class Accuracy :  16.842105263157894  Car class accuracy  16.842105263157894
Iter :  8 Batch :  4   Loss :  0.49708116  Accuracy :  87.03  Class Accuracy :  24.28571428571428  Car class accuracy  24.28571428571428
Iter :  8 Batch :  5   Loss :  1.1021937  Accuracy :  94.57  Class Accuracy :  8.54054054054054  Car class accuracy  8.54054054054054
Iter :  8 Batch :  6   Loss :  0.4597825  Accuracy :  88.375  Class Accuracy :  19.90566037735849  Car class accuracy  19.90566037735849
Iter :  8 Batch :  7   Loss :  0.90130585  Accuracy :  86.2  Class Accuracy :  12.236438075742067  Car class accuracy  12.236438075742067
Iter :  8 Batch :  8   Loss :  0.75009507  Accuracy :  89.885  Class Accuracy :  13.795654184003697  Car class accuracy  13.795654184003697
Iter :  8 Batch :  9   Loss :  0.9231782  Accuracy :  79.2  Class Accuracy :  19.806678383128297  Car class accuracy  19.806678383128297
Iter :  8 Batch :  10   Loss :  0.40521342  Accuracy :  91.60000000000001  Class Accuracy :  17.153846153846153  Car class accuracy  17.153846153846153
Iter :  8 Batch :  11   Loss :  0.61164004  Accuracy :  82.72500000000001  Class Accuracy :  23.096774193548384  Car class accuracy  23.096774193548384
Iter :  8 Batch :  12   Loss :  0.70067316  Accuracy :  76.63499999999999  Class Accuracy :  25.33333333333333  Car class accuracy  25.33333333333333
Iter :  8 Batch :  13   Loss :  0.8535343  Accuracy :  86.165  Class Accuracy :  14.391965255157437  Car class accuracy  14.391965255157437
Iter :  8 Batch :  14   Loss :  0.49572885  Accuracy :  86.745  Class Accuracy :  19.482071713147413  Car class accuracy  19.482071713147413
Iter :  8 Batch :  15   Loss :  0.8456335  Accuracy :  85.475  Class Accuracy :  15.446428571428573  Car class accuracy  15.446428571428573
Iter :  8 Batch :  16   Loss :  0.4233969  Accuracy :  90.85499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 9 loss : 0.77208114 Accuracy: 84.14605263157895 Class Accuracy : 19.325316721063768
Iter :  9 Batch :  0   Loss :  0.50955534  Accuracy :  90.735  Class Accuracy :  15.27659574468085  Car class accuracy  15.27659574468085
Iter :  9 Batch :  1   Loss :  0.6903921  Accuracy :  89.215  Class Accuracy :  16.438053097345133  Car class accuracy  16.438053097345133
Iter :  9 Batch :  2   Loss :  0.32546338  Accuracy :  96.16  Class Accuracy :  11.282051282051283  Car class accuracy  11.282051282051283
Iter :  9 Batch :  3   Loss :  0.43213654  Accuracy :  91.08500000000001  Class Accuracy :  17.191780821917806  Car class accuracy  17.191780821917806
Iter :  9 Batch :  4   Loss :  0.410173  Accuracy :  90.66499999999999  Class Accuracy :  16.0  Car class accuracy  16.0
Iter :  9 Batch :  5   Loss :  1.1319853  Accuracy :  91.45  Class Accuracy :  6.737242128121607  Car class accuracy  6.737242128121607
Iter :  9 Batch :  6   Loss :  0.33493376  Accuracy :  96.505  Class Accuracy :  14.385026737967916  Car class accuracy  14.385026737967916
Iter :  9 Batch :  7   Loss :  0.72627556  Accuracy :  91.38  Class Accuracy :  10.709396390790292  Car class accuracy  10.709396390790292
Iter :  9 Batch :  8   Loss :  0.8068379  Accuracy :  91.405  Class Accuracy :  12.890669719519178  Car class accuracy  12.890669719519178
Iter :  9 Batch :  9   Loss :  0.7993662  Accuracy :  83.655  Class Accuracy :  16.663385826771655  Car class accuracy  16.663385826771655
Iter :  9 Batch :  10   Loss :  0.36272568  Accuracy :  93.47  Class Accuracy :  17.086614173228348  Car class accuracy  17.086614173228348
Iter :  9 Batch :  11   Loss :  0.52955705  Accuracy :  85.065  Class Accuracy :  20.4635761589404  Car class accuracy  20.4635761589404
Iter :  9 Batch :  12   Loss :  0.512165  Accuracy :  88.915  Class Accuracy :  17.252747252747252  Car class accuracy  17.252747252747252
Iter :  9 Batch :  13   Loss :  0.7010844  Accuracy :  87.33999999999999  Class Accuracy :  13.856825749167593  Car class accuracy  13.856825749167593
Iter :  9 Batch :  14   Loss :  0.40521976  Accuracy :  90.85  Class Accuracy :  18.622222222222224  Car class accuracy  18.622222222222224
Iter :  9 Batch :  15   Loss :  1.1223863  Accuracy :  86.76  Class Accuracy :  12.112403100775193  Car class accuracy  12.112403100775193
Iter :  9 Batch :  16   Loss :  0.4473982  Accuracy :  88.34  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 10 loss : 0.75505316 Accuracy: 84.75263313609467 Class Accuracy : 18.783530958626855
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__10_0.ckpt/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/vispy/visuals/isocurve.py:22: UserWarning: VisPy is not yet compatible with matplotlib 2.2+
  warnings.warn("VisPy is not yet compatible with matplotlib 2.2+")
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  Accuracy :  99.675  Class Accuracy :  10.153846153846153  Car class accuracy  10.153846153846153
Iter :  182 Batch :  5   Loss :  0.10880769  Accuracy :  97.83  Class Accuracy :  11.667731629392971  Car class accuracy  11.667731629392971
Iter :  182 Batch :  6   Loss :  0.84822774  Accuracy :  96.41499999999999  Class Accuracy :  7.7412731006160165  Car class accuracy  7.7412731006160165
Iter :  182 Batch :  7   Loss :  0.97720295  Accuracy :  88.02499999999999  Class Accuracy :  16.12740141557128  Car class accuracy  16.12740141557128
Iter :  182 Batch :  8   Loss :  1.6934078  Accuracy :  86.52499999999999  Class Accuracy :  15.388927820602664  Car class accuracy  15.388927820602664
Iter :  182 Batch :  9   Loss :  0.38938653  Accuracy :  93.50500000000001  Class Accuracy :  13.268076220308014  Car class accuracy  13.268076220308014
Iter :  182 Batch :  10   Loss :  0.61101955  Accuracy :  85.72999999999999  Class Accuracy :  29.61439588688946  Car class accuracy  29.61439588688946
Iter :  182 Batch :  11   Loss :  0.5415296  Accuracy :  87.075  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  182 Batch :  12   Loss :  0.32836583  Accuracy :  90.93  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  182 Batch :  13   Loss :  0.62639904  Accuracy :  81.89999999999999  Class Accuracy :  28.965517241379313  Car class accuracy  28.965517241379313
Iter :  182 Batch :  14   Loss :  0.26663083  Accuracy :  92.94  Class Accuracy :  15.754310344827587  Car class accuracy  15.754310344827587
Iter :  182 Batch :  15   Loss :  0.70801836  Accuracy :  83.06  Class Accuracy :  20.146938775510208  Car class accuracy  20.146938775510208
Iter :  182 Batch :  16   Loss :  0.85471153  Accuracy :  90.46  Class Accuracy :  12.713697219361483  Car class accuracy  12.713697219361483
**** Iteration : 183 loss : 0.28253832 Accuracy: 94.9437041800643 Class Accuracy : 11.35826068518716
Iter :  183 Batch :  0   Loss :  0.32372382  Accuracy :  91.64  Class Accuracy :  12.272727272727273  Car class accuracy  12.272727272727273
Iter :  183 Batch :  1   Loss :  0.5439627  Accuracy :  93.205  Class Accuracy :  11.94508009153318  Car class accuracy  11.94508009153318
Iter :  183 Batch :  2   Loss :  0.24638323  Accuracy :  96.36  Class Accuracy :  12.31638418079096  Car class accuracy  12.31638418079096
Iter :  183 Batch :  3   Loss :  0.32514986  Accuracy :  93.93  Class Accuracy :  13.93822393822394  Car class accuracy  13.93822393822394
Iter :  183 Batch :  4   Loss :  0.25199082  Accuracy :  95.36  Class Accuracy :  14.12280701754386  Car class accuracy  14.12280701754386
Iter :  183 Batch :  5   Loss :  0.55465263  Accuracy :  95.03  Class Accuracy :  11.464158617183529  Car class accuracy  11.464158617183529
Iter :  183 Batch :  6   Loss :  0.54060984  Accuracy :  92.965  Class Accuracy :  11.173304628632938  Car class accuracy  11.173304628632938
Iter :  183 Batch :  7   Loss :  1.336415  Accuracy :  90.84  Class Accuracy :  9.956403269754768  Car class accuracy  9.956403269754768
Iter :  183 Batch :  8   Loss :  0.7036786  Accuracy :  89.47  Class Accuracy :  10.905377808032675  Car class accuracy  10.905377808032675
Iter :  183 Batch :  9   Loss :  0.55295557  Accuracy :  96.24000000000001  Class Accuracy :  9.066218313502327  Car class accuracy  9.066218313502327
Iter :  183 Batch :  10   Loss :  0.5244242  Accuracy :  88.165  Class Accuracy :  19.005376344086024  Car class accuracy  19.005376344086024
Iter :  183 Batch :  11   Loss :  0.5591359  Accuracy :  88.23  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  183 Batch :  12   Loss :  0.28950182  Accuracy :  96.48  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  183 Batch :  13   Loss :  0.6556187  Accuracy :  86.355  Class Accuracy :  20.25974025974026  Car class accuracy  20.25974025974026
Iter :  183 Batch :  14   Loss :  0.4585777  Accuracy :  92.16  Class Accuracy :  9.799107142857142  Car class accuracy  9.799107142857142
Iter :  183 Batch :  15   Loss :  0.78252625  Accuracy :  84.41  Class Accuracy :  15.830508474576272  Car class accuracy  15.830508474576272
Iter :  183 Batch :  16   Loss :  0.89481777  Accuracy :  86.265  Class Accuracy :  12.5  Car class accuracy  12.5
**** Iteration : 184 loss : 0.28405446 Accuracy: 94.92549568276304 Class Accuracy : 11.358729180777502
Iter :  184 Batch :  0   Loss :  0.46337897  Accuracy :  88.92  Class Accuracy :  18.125  Car class accuracy  18.125
Iter :  184 Batch :  1   Loss :  0.69883966  Accuracy :  90.265  Class Accuracy :  14.874826147426983  Car class accuracy  14.874826147426983
Iter :  184 Batch :  2   Loss :  0.26467714  Accuracy :  97.545  Class Accuracy :  9.534883720930234  Car class accuracy  9.534883720930234
Iter :  184 Batch :  3   Loss :  0.3368473  Accuracy :  94.285  Class Accuracy :  14.509803921568626  Car class accuracy  14.509803921568626
Iter :  184 Batch :  4   Loss :  0.20200852  Accuracy :  98.54  Class Accuracy :  7.22689075630252  Car class accuracy  7.22689075630252
Iter :  184 Batch :  5   Loss :  0.4403717  Accuracy :  96.395  Class Accuracy :  9.52755905511811  Car class accuracy  9.52755905511811
Iter :  184 Batch :  6   Loss :  0.39312866  Accuracy :  95.92500000000001  Class Accuracy :  9.055276381909547  Car class accuracy  9.055276381909547
Iter :  184 Batch :  7   Loss :  0.71151173  Accuracy :  92.515  Class Accuracy :  10.142045454545453  Car class accuracy  10.142045454545453
Iter :  184 Batch :  8   Loss :  0.749847  Accuracy :  93.08999999999999  Class Accuracy :  10.268780151619572  Car class accuracy  10.268780151619572
Iter :  184 Batch :  9   Loss :  1.2124935  Accuracy :  93.8  Class Accuracy :  7.820872671599897  Car class accuracy  7.820872671599897
Iter :  184 Batch :  10   Loss :  0.35052136  Accuracy :  91.36  Class Accuracy :  18.16976127320955  Car class accuracy  18.16976127320955
Iter :  184 Batch :  11   Loss :  0.2652955  Accuracy :  94.815  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  184 Batch :  12   Loss :  0.29256645  Accuracy :  92.29  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  184 Batch :  13   Loss :  0.54109895  Accuracy :  83.69  Class Accuracy :  25.4  Car class accuracy  25.4
Iter :  184 Batch :  14   Loss :  0.3327334  Accuracy :  93.86  Class Accuracy :  14.680851063829786  Car class accuracy  14.680851063829786
Iter :  184 Batch :  15   Loss :  0.6850158  Accuracy :  81.355  Class Accuracy :  21.418376449598572  Car class accuracy  21.418376449598572
Iter :  184 Batch :  16   Loss :  0.7241145  Accuracy :  87.81  Class Accuracy :  15.257335257335258  Car class accuracy  15.257335257335258
**** Iteration : 185 loss : 0.2852744 Accuracy: 94.91045960559796 Class Accuracy : 11.362836644591681
Iter :  185 Batch :  0   Loss :  0.50753963  Accuracy :  84.95  Class Accuracy :  21.25  Car class accuracy  21.25
Iter :  185 Batch :  1   Loss :  0.48200142  Accuracy :  89.62  Class Accuracy :  17.96818510484454  Car class accuracy  17.96818510484454
Iter :  185 Batch :  2   Loss :  0.26039588  Accuracy :  94.43  Class Accuracy :  13.541666666666668  Car class accuracy  13.541666666666668
Iter :  185 Batch :  3   Loss :  0.35923922  Accuracy :  88.265  Class Accuracy :  22.164502164502164  Car class accuracy  22.164502164502164
Iter :  185 Batch :  4   Loss :  0.2029114  Accuracy :  95.39999999999999  Class Accuracy :  16.956521739130434  Car class accuracy  16.956521739130434
Iter :  185 Batch :  5   Loss :  0.28829366  Accuracy :  95.47  Class Accuracy :  13.718274111675127  Car class accuracy  13.718274111675127
Iter :  185 Batch :  6   Loss :  0.3017258  Accuracy :  95.975  Class Accuracy :  12.350515463917526  Car class accuracy  12.350515463917526
Iter :  185 Batch :  7   Loss :  0.68179846  Accuracy :  93.21000000000001  Class Accuracy :  10.569151963574274  Car class accuracy  10.569151963574274
Iter :  185 Batch :  8   Loss :  0.7511651  Accuracy :  91.88499999999999  Class Accuracy :  10.200777202072539  Car class accuracy  10.200777202072539
Iter :  185 Batch :  9   Loss :  0.56264436  Accuracy :  95.08  Class Accuracy :  9.550845319202624  Car class accuracy  9.550845319202624
Iter :  185 Batch :  10   Loss :  0.21144861  Accuracy :  96.385  Class Accuracy :  13.23529411764706  Car class accuracy  13.23529411764706
Iter :  185 Batch :  11   Loss :  0.13633718  Accuracy :  98.11  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  185 Batch :  12   Loss :  0.108197816  Accuracy :  97.86  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  185 Batch :  13   Loss :  0.25546825  Accuracy :  94.415  Class Accuracy :  13.422818791946309  Car class accuracy  13.422818791946309
Iter :  185 Batch :  14   Loss :  0.20783737  Accuracy :  98.78  Class Accuracy :  8.924050632911392  Car class accuracy  8.924050632911392
Iter :  185 Batch :  15   Loss :  0.43655908  Accuracy :  93.905  Class Accuracy :  11.61939615736505  Car class accuracy  11.61939615736505
Iter :  185 Batch :  16   Loss :  0.78076214  Accuracy :  93.13  Class Accuracy :  9.971084337349398  Car class accuracy  9.971084337349398
**** Iteration : 186 loss : 0.28580737 Accuracy: 94.90520563112938 Class Accuracy : 11.366719865349273
Iter :  186 Batch :  0   Loss :  0.22153857  Accuracy :  95.175  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  186 Batch :  1   Loss :  0.40796405  Accuracy :  95.58  Class Accuracy :  12.880512091038407  Car class accuracy  12.880512091038407
Iter :  186 Batch :  2   Loss :  0.15991765  Accuracy :  96.67999999999999  Class Accuracy :  10.18867924528302  Car class accuracy  10.18867924528302
Iter :  186 Batch :  3   Loss :  0.2025678  Accuracy :  96.22  Class Accuracy :  11.009615384615385  Car class accuracy  11.009615384615385
Iter :  186 Batch :  4   Loss :  0.117249124  Accuracy :  98.395  Class Accuracy :  10.34965034965035  Car class accuracy  10.34965034965035
Iter :  186 Batch :  5   Loss :  0.20702352  Accuracy :  97.975  Class Accuracy :  11.19309262166405  Car class accuracy  11.19309262166405
Iter :  186 Batch :  6   Loss :  0.24795792  Accuracy :  96.485  Class Accuracy :  11.919917864476385  Car class accuracy  11.919917864476385
Iter :  186 Batch :  7   Loss :  0.4791605  Accuracy :  93.365  Class Accuracy :  12.20214568040655  Car class accuracy  12.20214568040655
Iter :  186 Batch :  8   Loss :  0.49827152  Accuracy :  93.44  Class Accuracy :  10.281888653981678  Car class accuracy  10.281888653981678
Iter :  186 Batch :  9   Loss :  0.31075057  Accuracy :  97.49  Class Accuracy :  9.929485505353878  Car class accuracy  9.929485505353878
Iter :  186 Batch :  10   Loss :  0.21358259  Accuracy :  95.865  Class Accuracy :  13.109919571045575  Car class accuracy  13.109919571045575
Iter :  186 Batch :  11   Loss :  0.08962588  Accuracy :  99.005  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  186 Batch :  12   Loss :  0.077199236  Accuracy :  98.725  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  186 Batch :  13   Loss :  0.30361015  Accuracy :  94.23  Class Accuracy :  11.158536585365855  Car class accuracy  11.158536585365855
Iter :  186 Batch :  14   Loss :  0.14953628  Accuracy :  98.25  Class Accuracy :  10.307377049180328  Car class accuracy  10.307377049180328
Iter :  186 Batch :  15   Loss :  0.3679994  Accuracy :  92.735  Class Accuracy :  12.705357142857142  Car class accuracy  12.705357142857142
Iter :  186 Batch :  16   Loss :  0.44676203  Accuracy :  93.015  Class Accuracy :  12.407221664994985  Car class accuracy  12.407221664994985
**** Iteration : 187 loss : 0.28569475 Accuracy: 94.91126022655757 Class Accuracy : 11.36244332718029
Iter :  187 Batch :  0   Loss :  0.20453377  Accuracy :  96.285  Class Accuracy :  9.285714285714286  Car class accuracy  9.285714285714286
Iter :  187 Batch :  1   Loss :  0.2669712  Accuracy :  95.67  Class Accuracy :  13.199436222692034  Car class accuracy  13.199436222692034
Iter :  187 Batch :  2   Loss :  0.12262661  Accuracy :  97.67  Class Accuracy :  9.644670050761421  Car class accuracy  9.644670050761421
Iter :  187 Batch :  3   Loss :  0.10036427  Accuracy :  98.91499999999999  Class Accuracy :  9.369747899159664  Car class accuracy  9.369747899159664
Iter :  187 Batch :  4   Loss :  0.09224633  Accuracy :  99.58  Class Accuracy :  7.054794520547945  Car class accuracy  7.054794520547945
Iter :  187 Batch :  5   Loss :  0.17482097  Accuracy :  98.935  Class Accuracy :  10.015075376884422  Car class accuracy  10.015075376884422
Iter :  187 Batch :  6   Loss :  0.20954306  Accuracy :  97.13000000000001  Class Accuracy :  11.330645161290324  Car class accuracy  11.330645161290324
Iter :  187 Batch :  7   Loss :  1.2004597  Accuracy :  95.155  Class Accuracy :  8.630573248407645  Car class accuracy  8.630573248407645
Iter :  187 Batch :  8   Loss :  0.29325148  Accuracy :  96.10499999999999  Class Accuracy :  10.286532951289399  Car class accuracy  10.286532951289399
Iter :  187 Batch :  9   Loss :  0.28200582  Accuracy :  96.72  Class Accuracy :  10.631578947368421  Car class accuracy  10.631578947368421
Iter :  187 Batch :  10   Loss :  0.32799146  Accuracy :  90.75999999999999  Class Accuracy :  21.01298701298701  Car class accuracy  21.01298701298701
Iter :  187 Batch :  11   Loss :  0.0925994  Accuracy :  98.94  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  187 Batch :  12   Loss :  0.105655216  Accuracy :  97.935  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  187 Batch :  13   Loss :  0.30724478  Accuracy :  92.765  Class Accuracy :  16.26666666666667  Car class accuracy  16.26666666666667
Iter :  187 Batch :  14   Loss :  0.18609345  Accuracy :  96.35000000000001  Class Accuracy :  13.083700440528634  Car class accuracy  13.083700440528634
Iter :  187 Batch :  15   Loss :  0.3724863  Accuracy :  91.44  Class Accuracy :  14.918181818181816  Car class accuracy  14.918181818181816
Iter :  187 Batch :  16   Loss :  0.39599916  Accuracy :  92.18499999999999  Class Accuracy :  14.150294695481335  Car class accuracy  14.150294695481335
**** Iteration : 188 loss : 0.28565657 Accuracy: 94.91722222222224 Class Accuracy : 11.35797355025882
Iter :  188 Batch :  0   Loss :  0.29061475  Accuracy :  94.76  Class Accuracy :  6.999999999999999  Car class accuracy  6.999999999999999
Iter :  188 Batch :  1   Loss :  0.28240925  Accuracy :  95.14  Class Accuracy :  14.138972809667674  Car class accuracy  14.138972809667674
Iter :  188 Batch :  2   Loss :  0.12985788  Accuracy :  98.55000000000001  Class Accuracy :  8.434343434343434  Car class accuracy  8.434343434343434
Iter :  188 Batch :  3   Loss :  0.22330283  Accuracy :  97.285  Class Accuracy :  10.308880308880308  Car class accuracy  10.308880308880308
Iter :  188 Batch :  4   Loss :  0.076740265  Accuracy :  99.625  Class Accuracy :  9.268292682926829  Car class accuracy  9.268292682926829
Iter :  188 Batch :  5   Loss :  0.14304213  Accuracy :  98.83999999999999  Class Accuracy :  10.33731553056922  Car class accuracy  10.33731553056922
Iter :  188 Batch :  6   Loss :  0.2904759  Accuracy :  95.98  Class Accuracy :  12.891692954784437  Car class accuracy  12.891692954784437
Iter :  188 Batch :  7   Loss :  0.42516422  Accuracy :  95.435  Class Accuracy :  10.805523590333717  Car class accuracy  10.805523590333717
Iter :  188 Batch :  8   Loss :  0.3207834  Accuracy :  96.16  Class Accuracy :  9.993045897079277  Car class accuracy  9.993045897079277
Iter :  188 Batch :  9   Loss :  0.3260362  Accuracy :  97.8  Class Accuracy :  9.679520583637311  Car class accuracy  9.679520583637311
Iter :  188 Batch :  10   Loss :  0.17659618  Accuracy :  96.88  Class Accuracy :  12.571428571428573  Car class accuracy  12.571428571428573
Iter :  188 Batch :  11   Loss :  0.032383025  Accuracy :  99.845  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  188 Batch :  12   Loss :  0.05251551  Accuracy :  99.41  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  188 Batch :  13   Loss :  0.18117811  Accuracy :  97.04  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  188 Batch :  14   Loss :  0.13262722  Accuracy :  98.41  Class Accuracy :  10.296610169491524  Car class accuracy  10.296610169491524
Iter :  188 Batch :  15   Loss :  0.23897754  Accuracy :  97.72999999999999  Class Accuracy :  10.05499541704858  Car class accuracy  10.05499541704858
Iter :  188 Batch :  16   Loss :  0.42828795  Accuracy :  94.92  Class Accuracy :  11.260891850333163  Car class accuracy  11.260891850333163
**** Iteration : 189 loss : 0.28531247 Accuracy: 94.92974315068494 Class Accuracy : 11.346751870136192
Iter :  189 Batch :  0   Loss :  0.16644277  Accuracy :  96.765  Class Accuracy :  11.666666666666666  Car class accuracy  11.666666666666666
Iter :  189 Batch :  1   Loss :  0.37363085  Accuracy :  95.52000000000001  Class Accuracy :  12.658959537572253  Car class accuracy  12.658959537572253
Iter :  189 Batch :  2   Loss :  0.14134611  Accuracy :  95.825  Class Accuracy :  14.099999999999998  Car class accuracy  14.099999999999998
Iter :  189 Batch :  3   Loss :  0.16736734  Accuracy :  96.455  Class Accuracy :  12.420091324200913  Car class accuracy  12.420091324200913
Iter :  189 Batch :  4   Loss :  0.045686472  Accuracy :  99.615  Class Accuracy :  9.925925925925926  Car class accuracy  9.925925925925926
Iter :  189 Batch :  5   Loss :  0.11196052  Accuracy :  98.72999999999999  Class Accuracy :  10.570809248554912  Car class accuracy  10.570809248554912
Iter :  189 Batch :  6   Loss :  0.24025974  Accuracy :  94.695  Class Accuracy :  14.067796610169491  Car class accuracy  14.067796610169491
Iter :  189 Batch :  7   Loss :  0.40325904  Accuracy :  94.505  Class Accuracy :  11.585295807007467  Car class accuracy  11.585295807007467
Iter :  189 Batch :  8   Loss :  0.34803927  Accuracy :  94.27499999999999  Class Accuracy :  10.96393897364771  Car class accuracy  10.96393897364771
Iter :  189 Batch :  9   Loss :  0.24734345  Accuracy :  98.245  Class Accuracy :  10.12707468879668  Car class accuracy  10.12707468879668
Iter :  189 Batch :  10   Loss :  0.22517823  Accuracy :  95.89999999999999  Class Accuracy :  14.16452442159383  Car class accuracy  14.16452442159383
Iter :  189 Batch :  11   Loss :  0.027220996  Accuracy :  99.75  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  189 Batch :  12   Loss :  0.044768274  Accuracy :  99.26  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  189 Batch :  13   Loss :  0.16101408  Accuracy :  97.77  Class Accuracy :  11.346153846153847  Car class accuracy  11.346153846153847
Iter :  189 Batch :  14   Loss :  0.14634715  Accuracy :  96.285  Class Accuracy :  13.744588744588743  Car class accuracy  13.744588744588743
Iter :  189 Batch :  15   Loss :  0.30932835  Accuracy :  93.965  Class Accuracy :  13.401240035429584  Car class accuracy  13.401240035429584
Iter :  189 Batch :  16   Loss :  0.42238346  Accuracy :  93.415  Class Accuracy :  12.075773745997868  Car class accuracy  12.075773745997868
**** Iteration : 190 loss : 0.28491956 Accuracy: 94.93815732424899 Class Accuracy : 11.34363141729754
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_15_17_56/checkpoints/pointer2__190_0.ckpt
saved prediction of 0 accuracy :  0.9352  class accuracy :  0.07864349775784754  car_class_accuracy :  0.07864349775784754
saved prediction of 1 accuracy :  0.8998  class accuracy :  0.0694773519163763  car_class_accuracy :  0.0694773519163763
saved prediction of 2 accuracy :  0.95775  class accuracy :  0.09958217270194986  car_class_accuracy :  0.09958217270194986
saved prediction of 3 accuracy :  0.928  class accuracy :  0.10923000987166831  car_class_accuracy :  0.10923000987166831
saved prediction of 4 accuracy :  0.9805  class accuracy :  0.1103448275862069  car_class_accuracy :  0.1103448275862069
saved prediction of 5 accuracy :  0.9715  class accuracy :  0.10232558139534884  car_class_accuracy :  0.10232558139534884
saved prediction of 6 accuracy :  0.96665  class accuracy :  0.10658436213991769  car_class_accuracy :  0.10658436213991769
saved prediction of 7 accuracy :  0.9076  class accuracy :  0.16357615894039734  car_class_accuracy :  0.16357615894039734
saved prediction of 8 accuracy :  0.9565  class accuracy :  0.1285714285714286  car_class_accuracy :  0.1285714285714286
saved prediction of 9 accuracy :  0.9605  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 10 accuracy :  0.9109  class accuracy :  0.10851282051282052  car_class_accuracy :  0.10851282051282052
saved prediction of 11 accuracy :  0.9565  class accuracy :  0.12295918367346939  car_class_accuracy :  0.12295918367346939
saved prediction of 12 accuracy :  0.9284  class accuracy :  0.09722518676627535  car_class_accuracy :  0.09722518676627535
saved prediction of 13 accuracy :  0.8235  class accuracy :  0.06790123456790123  car_class_accuracy :  0.06790123456790123
saved prediction of 14 accuracy :  0.95535  class accuracy :  0.10923379174852652  car_class_accuracy :  0.10923379174852652
saved prediction of 15 accuracy :  0.88015  class accuracy :  0.039566236811254395  car_class_accuracy :  0.039566236811254395
saved prediction of 16 accuracy :  0.9566  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 17 accuracy :  0.93265  class accuracy :  0.0740128068303095  car_class_accuracy :  0.0740128068303095
saved prediction of 18 accuracy :  0.9111  class accuracy :  0.0657185628742515  car_class_accuracy :  0.0657185628742515
saved prediction of 19 accuracy :  0.96255  class accuracy :  0.10642398286937901  car_class_accuracy :  0.10642398286937901
saved prediction of 20 accuracy :  0.9294  class accuracy :  0.10672888015717093  car_class_accuracy :  0.10672888015717093
saved prediction of 21 accuracy :  0.97815  class accuracy :  0.10042283298097252  car_class_accuracy :  0.10042283298097252
saved prediction of 22 accuracy :  0.9732  class accuracy :  0.096875  car_class_accuracy :  0.096875
saved prediction of 23 accuracy :  0.9689  class accuracy :  0.10567685589519651  car_class_accuracy :  0.10567685589519651
saved prediction of 24 accuracy :  0.91465  class accuracy :  0.17543859649122806  car_class_accuracy :  0.17543859649122806
saved prediction of 25 accuracy :  0.9579  class accuracy :  0.12222222222222223  car_class_accuracy :  0.12222222222222223
saved prediction of 26 accuracy :  0.96315  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 27 accuracy :  0.91455  class accuracy :  0.1088659793814433  car_class_accuracy :  0.1088659793814433
saved prediction of 28 accuracy :  0.95345  class accuracy :  0.12189054726368158  car_class_accuracy :  0.12189054726368158
saved prediction of 29 accuracy :  0.9356  class accuracy :  0.09971048060220035  car_class_accuracy :  0.09971048060220035
saved prediction of 30 accuracy :  0.8211  class accuracy :  0.0755328596802842  car_class_accuracy :  0.0755328596802842
saved prediction of 31 accuracy :  0.95275  class accuracy :  0.0953382084095064  car_class_accuracy :  0.0953382084095064
saved prediction of 32 accuracy :  0.86665  class accuracy :  0.03679959616355376  car_class_accuracy :  0.03679959616355376
saved prediction of 33 accuracy :  0.95865  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 34 accuracy :  0.9392  class accuracy :  0.07611518915866741  car_class_accuracy :  0.07611518915866741
saved prediction of 35 accuracy :  0.91485  class accuracy :  0.06517073170731708  car_class_accuracy :  0.06517073170731708
saved prediction of 36 accuracy :  0.95375  class accuracy :  0.10541586073500968  car_class_accuracy :  0.10541586073500968
saved prediction of 37 accuracy :  0.9323  class accuracy :  0.11343832020997376  car_class_accuracy :  0.11343832020997376
saved prediction of 38 accuracy :  0.97805  class accuracy :  0.10065359477124183  car_class_accuracy :  0.10065359477124183
saved prediction of 39 accuracy :  0.9736  class accuracy :  0.09659090909090909  car_class_accuracy :  0.09659090909090909
saved prediction of 40 accuracy :  0.9683  class accuracy :  0.10755555555555556  car_class_accuracy :  0.10755555555555556
saved prediction of 41 accuracy :  0.8854  class accuracy :  0.21907894736842107  car_class_accuracy :  0.21907894736842107
saved prediction of 42 accuracy :  0.95575  class accuracy :  0.15384615384615385  car_class_accuracy :  0.15384615384615385
saved prediction of 43 accuracy :  0.96135  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 44 accuracy :  0.9153  class accuracy :  0.11440768409818569  car_class_accuracy :  0.11440768409818569
saved prediction of 45 accuracy :  0.9559
saved prediction of 0 accuracy :  0.88365  class accuracy :  0.15306306306306305  car_class_accuracy :  0.15306306306306305
saved prediction of 1 accuracy :  0.93905  class accuracy :  0.06990084985835694  car_class_accuracy :  0.06990084985835694
saved prediction of 2 accuracy :  0.9398  class accuracy :  0.04184549356223176  car_class_accuracy :  0.04184549356223176
saved prediction of 3 accuracy :  0.9336  class accuracy :  0.09896831245394253  car_class_accuracy :  0.09896831245394253
saved prediction of 4 accuracy :  0.8998  class accuracy :  0.15213849287169043  car_class_accuracy :  0.15213849287169043
saved prediction of 5 accuracy :  0.93715  class accuracy :  0.11086484137331595  car_class_accuracy :  0.11086484137331595
saved prediction of 6 accuracy :  0.9887  class accuracy :  0.03727810650887574  car_class_accuracy :  0.03727810650887574
saved prediction of 7 accuracy :  0.9459  class accuracy :  0.08355812459858702  car_class_accuracy :  0.08355812459858702
saved prediction of 8 accuracy :  0.9154  class accuracy :  0.09510135135135135  car_class_accuracy :  0.09510135135135135
saved prediction of 9 accuracy :  0.94535  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 10 accuracy :  0.96395  class accuracy :  0.08584462982273201  car_class_accuracy :  0.08584462982273201
saved prediction of 11 accuracy :  0.96165  class accuracy :  0.1098550724637681  car_class_accuracy :  0.1098550724637681
saved prediction of 12 accuracy :  0.93415  class accuracy :  0.1221698113207547  car_class_accuracy :  0.1221698113207547
saved prediction of 13 accuracy :  0.9928  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 14 accuracy :  0.89955  class accuracy :  0.11096364685516444  car_class_accuracy :  0.11096364685516444
saved prediction of 15 accuracy :  0.985  class accuracy :  0.08467153284671533  car_class_accuracy :  0.08467153284671533
saved prediction of 16 accuracy :  0.8586  class accuracy :  0.1794326241134752  car_class_accuracy :  0.1794326241134752
saved prediction of 17 accuracy :  0.88855  class accuracy :  0.14433179723502304  car_class_accuracy :  0.14433179723502304
saved prediction of 18 accuracy :  0.9357  class accuracy :  0.06729096989966556  car_class_accuracy :  0.06729096989966556
saved prediction of 19 accuracy :  0.94375  class accuracy :  0.0474120082815735  car_class_accuracy :  0.0474120082815735
saved prediction of 20 accuracy :  0.9365  class accuracy :  0.10334996436208126  car_class_accuracy :  0.10334996436208126
saved prediction of 21 accuracy :  0.93275  class accuracy :  0.12190265486725664  car_class_accuracy :  0.12190265486725664
saved prediction of 22 accuracy :  0.93465  class accuracy :  0.10902192242833053  car_class_accuracy :  0.10902192242833053
saved prediction of 23 accuracy :  0.9885  class accuracy :  0.024175824175824177  car_class_accuracy :  0.024175824175824177
saved prediction of 24 accuracy :  0.93985  class accuracy :  0.08250636132315523  car_class_accuracy :  0.08250636132315523
saved prediction of 25 accuracy :  0.91515  class accuracy :  0.09790011350737798  car_class_accuracy :  0.09790011350737798
saved prediction of 26 accuracy :  0.94655  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 27 accuracy :  0.96295  class accuracy :  0.08575491209927612  car_class_accuracy :  0.08575491209927612
saved prediction of 28 accuracy :  0.95855  class accuracy :  0.12832861189801698  car_class_accuracy :  0.12832861189801698
saved prediction of 29 accuracy :  0.904  class accuracy :  0.14431089743589745  car_class_accuracy :  0.14431089743589745
saved prediction of 30 accuracy :  0.99205  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 31 accuracy :  0.8984  class accuracy :  0.11747737556561086  car_class_accuracy :  0.11747737556561086
saved prediction of 32 accuracy :  0.98345  class accuracy :  0.07973856209150328  car_class_accuracy :  0.07973856209150328
saved prediction of 33 accuracy :  0.86995  class accuracy :  0.2176056338028169  car_class_accuracy :  0.2176056338028169
saved prediction of 34 accuracy :  0.8834  class accuracy :  0.14968777876895628  car_class_accuracy :  0.14968777876895628
saved prediction of 35 accuracy :  0.9308  class accuracy :  0.08  car_class_accuracy :  0.08
saved prediction of 36 accuracy :  0.94345  class accuracy :  0.040776699029126215  car_class_accuracy :  0.040776699029126215
saved prediction of 37 accuracy :  0.9365  class accuracy :  0.10532069970845481  car_class_accuracy :  0.10532069970845481
saved prediction of 38 accuracy :  0.9001  class accuracy :  0.16385809312638583  car_class_accuracy :  0.16385809312638583
saved prediction of 39 accuracy :  0.9386  class accuracy :  0.11733624454148472  car_class_accuracy :  0.11733624454148472
saved prediction of 40 accuracy :  0.9881  class accuracy :  0.023195876288659795  car_class_accuracy :  0.023195876288659795
saved prediction of 41 accuracy :  0.92495  class accuracy :  0.09959473150962513  car_class_accuracy :  0.09959473150962513
saved prediction of 42 accuracy :  0.9156  class accuracy :  0.09599109131403119  car_class_accuracy :  0.09599109131403119
saved prediction of 43 accuracy :  0.939  class accuracy :  0.08333333333333334  car_class_accuracy :  0.08333333333333334
saved prediction of 44 accuracy :  0.96315  class accuracy :  0.08670281435579655  car_class_accuracy :  0.08670281435579655
saved prediction of 45 accuracy :  0.96095  class accuracy :  0.10164835164835165  car_class_accuracy :  0.10164835164835165
saved prediction of 46 accuracy :  0.94095  class accuracy :  0.11619293712316967  car_class_accuracy :  0.11619293712316967
saved prediction of 47 accuracy :  0.99155  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 48 accuracy :  0.9012  class accuracy :  0.1131195335276968  car_class_accuracy :  0.1131195335276968
saved prediction of 49 accuracy :  0.9838  class accuracy :  0.08273381294964029  car_class_accuracy :  0.08273381294964029
saved prediction of 50 accuracy :  0.88155  class accuracy :  0.1992857142857143  car_class_accuracy :  0.1992857142857143
saved prediction of 51 accuracy :  0.9079  class accuracy :  0.13323323323323324  car_class_accuracy :  0.13323323323323324
saved prediction of 52 accuracy :  0.9378  class accuracy :  0.07081117021276596  car_class_accuracy :  0.07081117021276596
saved prediction of 53 accuracy :  0.9327  class accuracy :  0.05095137420718816  car_class_accuracy :  0.05095137420718816
saved prediction of 54 accuracy :  0.93655  class accuracy :  0.10236100533130237  car_class_accuracy :  0.10236100533130237
saved prediction of 55 accuracy :  0.89955  class accuracy :  0.14331210191082802  car_class_accuracy :  0.14331210191082802
saved prediction of 56 accuracy :  0.9377  class accuracy :  0.11724900486510395  car_class_accuracy :  0.11724900486510395
saved prediction of 57 accuracy :  0.9888  class accuracy :  0.03608247422680412  car_class_accuracy :  0.03608247422680412
saved prediction of 58 accuracy :  0.93615  class accuracy :  0.08977754237288135  car_class_accuracy :  0.08977754237288135
saved prediction of 59 accuracy :  0.9097  class accuracy :  0.09674213141910547  car_class_accuracy :  0.09674213141910547
saved prediction of 60 accuracy :  0.94445  class accuracy :  0.05333333333333333  car_class_accuracy :  0.05333333333333333
saved prediction of 61 accuracy :  0.9674  class accuracy :  0.09038197306952458  car_class_accuracy :  0.09038197306952458
saved prediction of 62 accuracy :  0.96025  class accuracy :  0.10340314136125654  car_class_accuracy :  0.10340314136125654
saved prediction of 63 accuracy :  0.92665  class accuracy :  0.12928022361984626  car_class_accuracy :  0.12928022361984626
saved prediction of 64 accuracy :  0.9928  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 65 accuracy :  0.9032  class accuracy :  0.11632183908045976  car_class_accuracy :  0.11632183908045976
saved prediction of 66 accuracy :  0.98395  class accuracy :  0.08194444444444444  car_class_accuracy :  0.08194444444444444
saved prediction of 67 accuracy :  0.872  class accuracy :  0.23286713286713287  car_class_accuracy :  0.23286713286713287
saved prediction of 68 accuracy :  0.8862  class accuracy :  0.15381913959613697  car_class_accuracy :  0.15381913959613697
saved prediction of 69 accuracy :  0.9367  class accuracy :  0.07456724367509987  car_class_accuracy :  0.07456724367509987
saved prediction of 70 accuracy :  0.9402  class accuracy :  0.04780439121756487  car_class_accuracy :  0.04780439121756487
saved prediction of 71 accuracy :  0.94315  class accuracy :  0.08363509749303621  car_class_accuracy :  0.08363509749303621
saved prediction of 72 accuracy :  0.9006  class accuracy :  0.14891304347826087  car_class_accuracy :  0.14891304347826087
saved prediction of 73 accuracy :  0.9414  class accuracy :  0.1085814360770578  car_class_accuracy :  0.1085814360770578
saved prediction of 74 accuracy :  0.98885  class accuracy :  0.027830188679245284  car_class_accuracy :  0.027830188679245284
saved prediction of 75 accuracy :  0.9267  class accuracy :  0.09553483807654564  car_class_accuracy :  0.09553483807654564
saved prediction of 76 accuracy :  0.9154  class accuracy :  0.09695051783659378  car_class_accuracy :  0.09695051783659378
saved prediction of 77 accuracy :  0.93855  class accuracy :  0.07647058823529411  car_class_accuracy :  0.07647058823529411
saved prediction of 78 accuracy :  0.9611  class accuracy :  0.08521400778210117  car_class_accuracy :  0.08521400778210117
saved prediction of 79 accuracy :  0.96715  class accuracy :  0.09692737430167597  car_class_accuracy :  0.09692737430167597
saved prediction of 80 accuracy :  0.92275  class accuracy :  0.12464430894308942  car_class_accuracy :  0.12464430894308942
saved prediction of 81 accuracy :  0.9919  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 82 accuracy :  0.902  class accuracy :  0.11852293031566408  car_class_accuracy :  0.11852293031566408
saved prediction of 83 accuracy :  0.9848  class accuracy :  0.09366197183098592  car_class_accuracy :  0.09366197183098592
saved prediction of 84 accuracy :  0.87985  class accuracy :  0.16891891891891891  car_class_accuracy :  0.16891891891891891
saved prediction of 85 accuracy :  0.8904  class accuracy :  0.1418560606060606  car_class_accuracy :  0.1418560606060606
saved prediction of 86 accuracy :  0.9396  class accuracy :  0.07398884239888423  car_class_accuracy :  0.07398884239888423
saved prediction of 87 accuracy :  0.93955  class accuracy :  0.043301178992497316  car_class_accuracy :  0.043301178992497316
saved prediction of 88 accuracy :  0.94555  class accuracy :  0.08826086956521739  car_class_accuracy :  0.08826086956521739
saved prediction of 89 accuracy :  0.9001  class accuracy :  0.15219206680584552  car_class_accuracy :  0.15219206680584552
saved prediction of 90 accuracy :  0.93965  class accuracy :  0.10968222442899703  car_class_accuracy :  0.10968222442899703
saved prediction of 91 accuracy :  0.9891  class accuracy :  0.03553299492385787  car_class_accuracy :  0.03553299492385787
saved prediction of 92 accuracy :  0.9259  class accuracy :  0.09979909593169262  car_class_accuracy :  0.09979909593169262
saved prediction of 93 accuracy :  0.9148  class accuracy :  0.09341517857142857  car_class_accuracy :  0.09341517857142857
saved prediction of 94 accuracy :  0.9455  class accuracy :  0.08823529411764705  car_class_accuracy :  0.08823529411764705
saved prediction of 95 accuracy :  0.95895  class accuracy :  0.08642930856553147  car_class_accuracy :  0.08642930856553147
saved prediction of 96 accuracy :  0.95255  class accuracy :  0.12673521850899744  car_class_accuracy :  0.12673521850899744
saved prediction of 97 accuracy :  0.9217  class accuracy :  0.13433583959899748  car_class_accuracy :  0.13433583959899748
saved prediction of 98 accuracy :  0.9929  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 99 accuracy :  0.89815  class accuracy :  0.11288209606986899  car_class_accuracy :  0.11288209606986899
Iter :  10 Batch :  0   Loss :  0.63116956  Accuracy :  92.50500000000001  Class Accuracy :  11.608832807570979  Car class accuracy  11.608832807570979
Iter :  10 Batch :  1   Loss :  0.5848162  Accuracy :  91.72  Class Accuracy :  15.262368815592204  Car class accuracy  15.262368815592204
Iter :  10 Batch :  2   Loss :  0.30236104  Accuracy :  95.64  Class Accuracy :  12.68421052631579  Car class accuracy  12.68421052631579
Iter :  10 Batch :  3   Loss :  0.4274082  Accuracy :  88.3  Class Accuracy :  21.3768115942029  Car class accuracy  21.3768115942029
Iter :  10 Batch :  4   Loss :  0.42885765  Accuracy :  86.52499999999999  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  10 Batch :  5   Loss :  1.1026123  Accuracy :  93.32000000000001  Class Accuracy :  8.968563263185244  Car class accuracy  8.968563263185244
Iter :  10 Batch :  6   Loss :  0.3480702  Accuracy :  93.99  Class Accuracy :  14.24731182795699  Car class accuracy  14.24731182795699
Iter :  10 Batch :  7   Loss :  0.6557435  Accuracy :  89.685  Class Accuracy :  12.251491053677931  Car class accuracy  12.251491053677931
Iter :  10 Batch :  8   Loss :  1.083895  Accuracy :  89.34  Class Accuracy :  12.553359683794469  Car class accuracy  12.553359683794469
Iter :  10 Batch :  9   Loss :  0.6954234  Accuracy :  89.95  Class Accuracy :  12.173913043478262  Car class accuracy  12.173913043478262
Iter :  10 Batch :  10   Loss :  0.35682276  Accuracy :  96.28999999999999  Class Accuracy :  12.076923076923077  Car class accuracy  12.076923076923077
Iter :  10 Batch :  11   Loss :  0.5272475  Accuracy :  86.33  Class Accuracy :  20.671140939597315  Car class accuracy  20.671140939597315
Iter :  10 Batch :  12   Loss :  0.6408223  Accuracy :  80.86  Class Accuracy :  24.21383647798742  Car class accuracy  24.21383647798742
Iter :  10 Batch :  13   Loss :  0.7503277  Accuracy :  86.075  Class Accuracy :  15.053078556263271  Car class accuracy  15.053078556263271
Iter :  10 Batch :  14   Loss :  0.4692249  Accuracy :  91.795  Class Accuracy :  15.328185328185329  Car class accuracy  15.328185328185329
Iter :  10 Batch :  15   Loss :  0.6533315  Accuracy :  90.60000000000001  Class Accuracy :  12.14285714285714  Car class accuracy  12.14285714285714
Iter :  10 Batch :  16   Loss :  0.35880998  Accuracy :  93.94  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 11 loss : 0.73989743 Accuracy: 85.26913978494625 Class Accuracy : 18.360374280352296
Iter :  11 Batch :  0   Loss :  0.5582792  Accuracy :  91.995  Class Accuracy :  13.397027600849256  Car class accuracy  13.397027600849256
Iter :  11 Batch :  1   Loss :  0.54641086  Accuracy :  92.745  Class Accuracy :  15.879828326180256  Car class accuracy  15.879828326180256
Iter :  11 Batch :  2   Loss :  0.25397187  Accuracy :  96.465  Class Accuracy :  13.166666666666666  Car class accuracy  13.166666666666666
Iter :  11 Batch :  3   Loss :  0.374813  Accuracy :  93.125  Class Accuracy :  13.768115942028986  Car class accuracy  13.768115942028986
Iter :  11 Batch :  4   Loss :  0.41621485  Accuracy :  89.36  Class Accuracy :  19.047619047619047  Car class accuracy  19.047619047619047
Iter :  11 Batch :  5   Loss :  1.316473  Accuracy :  91.95  Class Accuracy :  7.080554130323242  Car class accuracy  7.080554130323242
Iter :  11 Batch :  6   Loss :  0.31687826  Accuracy :  95.0  Class Accuracy :  12.849162011173185  Car class accuracy  12.849162011173185
Iter :  11 Batch :  7   Loss :  0.5825256  Accuracy :  93.425  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  11 Batch :  8   Loss :  0.63146484  Accuracy :  90.96499999999999  Class Accuracy :  15.0459242250287  Car class accuracy  15.0459242250287
Iter :  11 Batch :  9   Loss :  0.76034826  Accuracy :  83.6  Class Accuracy :  16.944444444444446  Car class accuracy  16.944444444444446
Iter :  11 Batch :  10   Loss :  0.31376588  Accuracy :  94.83500000000001  Class Accuracy :  15.196850393700787  Car class accuracy  15.196850393700787
Iter :  11 Batch :  11   Loss :  0.58500916  Accuracy :  82.78  Class Accuracy :  24.43708609271523  Car class accuracy  24.43708609271523
Iter :  11 Batch :  12   Loss :  0.70131797  Accuracy :  79.225  Class Accuracy :  23.192904656319293  Car class accuracy  23.192904656319293
Iter :  11 Batch :  13   Loss :  0.62834257  Accuracy :  88.375  Class Accuracy :  13.958090803259605  Car class accuracy  13.958090803259605
Iter :  11 Batch :  14   Loss :  0.36485717  Accuracy :  91.375  Class Accuracy :  16.209677419354836  Car class accuracy  16.209677419354836
Iter :  11 Batch :  15   Loss :  0.6872104  Accuracy :  90.16499999999999  Class Accuracy :  11.667849538679915  Car class accuracy  11.667849538679915
Iter :  11 Batch :  16   Loss :  0.3449543  Accuracy :  92.865  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 12 loss : 0.7241565 Accuracy: 85.705960591133 Class Accuracy : 18.014144913516606
Iter :  12 Batch :  0   Loss :  0.52126837  Accuracy :  93.605  Class Accuracy :  10.116525423728813  Car class accuracy  10.116525423728813
Iter :  12 Batch :  1   Loss :  0.6295075  Accuracy :  93.12  Class Accuracy :  13.359264497878359  Car class accuracy  13.359264497878359
Iter :  12 Batch :  2   Loss :  0.29694825  Accuracy :  96.1  Class Accuracy :  11.225490196078432  Car class accuracy  11.225490196078432
Iter :  12 Batch :  3   Loss :  0.41232362  Accuracy :  89.905  Class Accuracy :  16.762589928057555  Car class accuracy  16.762589928057555
Iter :  12 Batch :  4   Loss :  0.4087001  Accuracy :  87.905  Class Accuracy :  15.416666666666668  Car class accuracy  15.416666666666668
Iter :  12 Batch :  5   Loss :  1.0384521  Accuracy :  95.165  Class Accuracy :  7.972937809003383  Car class accuracy  7.972937809003383
Iter :  12 Batch :  6   Loss :  0.35094258  Accuracy :  97.205  Class Accuracy :  13.564814814814813  Car class accuracy  13.564814814814813
Iter :  12 Batch :  7   Loss :  0.7374963  Accuracy :  91.0  Class Accuracy :  11.522167487684728  Car class accuracy  11.522167487684728
Iter :  12 Batch :  8   Loss :  0.7436848  Accuracy :  92.15  Class Accuracy :  14.557913351016799  Car class accuracy  14.557913351016799
Iter :  12 Batch :  9   Loss :  0.7161353  Accuracy :  83.39999999999999  Class Accuracy :  17.70434782608696  Car class accuracy  17.70434782608696
Iter :  12 Batch :  10   Loss :  0.29535472  Accuracy :  95.72  Class Accuracy :  13.520000000000001  Car class accuracy  13.520000000000001
Iter :  12 Batch :  11   Loss :  0.467746  Accuracy :  86.055  Class Accuracy :  25.03225806451613  Car class accuracy  25.03225806451613
Iter :  12 Batch :  12   Loss :  0.4872182  Accuracy :  85.965  Class Accuracy :  21.527777777777775  Car class accuracy  21.527777777777775
Iter :  12 Batch :  13   Loss :  0.5559579  Accuracy :  89.865  Class Accuracy :  13.675516224188792  Car class accuracy  13.675516224188792
Iter :  12 Batch :  14   Loss :  0.33280423  Accuracy :  92.255  Class Accuracy :  15.976095617529879  Car class accuracy  15.976095617529879
Iter :  12 Batch :  15   Loss :  0.7177164  Accuracy :  91.015  Class Accuracy :  10.735294117647058  Car class accuracy  10.735294117647058
Iter :  12 Batch :  16   Loss :  0.3208702  Accuracy :  94.315  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 13 loss : 0.7092586 Accuracy: 86.15025 Class Accuracy : 17.679732169302486
Iter :  13 Batch :  0   Loss :  0.5778372  Accuracy :  94.16499999999999  Class Accuracy :  8.542713567839197  Car class accuracy  8.542713567839197
Iter :  13 Batch :  1   Loss :  0.59634835  Accuracy :  91.97  Class Accuracy :  15.37313432835821  Car class accuracy  15.37313432835821
Iter :  13 Batch :  2   Loss :  0.26911464  Accuracy :  95.71499999999999  Class Accuracy :  13.208556149732619  Car class accuracy  13.208556149732619
Iter :  13 Batch :  3   Loss :  0.382085  Accuracy :  90.77  Class Accuracy :  15.985915492957748  Car class accuracy  15.985915492957748
Iter :  13 Batch :  4   Loss :  0.4280146  Accuracy :  88.455  Class Accuracy :  22.857142857142858  Car class accuracy  22.857142857142858
Iter :  13 Batch :  5   Loss :  0.7480122  Accuracy :  95.13000000000001  Class Accuracy :  8.628177966101694  Car class accuracy  8.628177966101694
Iter :  13 Batch :  6   Loss :  0.35409513  Accuracy :  96.21499999999999  Class Accuracy :  11.443850267379679  Car class accuracy  11.443850267379679
Iter :  13 Batch :  7   Loss :  0.52484936  Accuracy :  92.25  Class Accuracy :  11.401515151515152  Car class accuracy  11.401515151515152
Iter :  13 Batch :  8   Loss :  0.8297344  Accuracy :  92.065  Class Accuracy :  11.820809248554912  Car class accuracy  11.820809248554912
Iter :  13 Batch :  9   Loss :  0.68963665  Accuracy :  86.86  Class Accuracy :  13.612132352941178  Car class accuracy  13.612132352941178
Iter :  13 Batch :  10   Loss :  0.2765655  Accuracy :  97.075  Class Accuracy :  11.060606060606059  Car class accuracy  11.060606060606059
Iter :  13 Batch :  11   Loss :  0.4620775  Accuracy :  90.075  Class Accuracy :  13.776223776223778  Car class accuracy  13.776223776223778
Iter :  13 Batch :  12   Loss :  0.39151505  Accuracy :  95.34  Class Accuracy :  12.138613861386139  Car class accuracy  12.138613861386139
Iter :  13 Batch :  13   Loss :  0.64121467  Accuracy :  86.64500000000001  Class Accuracy :  15.324959038776626  Car class accuracy  15.324959038776626
Iter :  13 Batch :  14   Loss :  0.4122723  Accuracy :  89.12  Class Accuracy :  20.51282051282051  Car class accuracy  20.51282051282051
Iter :  13 Batch :  15   Loss :  0.87703264  Accuracy :  86.72  Class Accuracy :  13.08260577568838  Car class accuracy  13.08260577568838
Iter :  13 Batch :  16   Loss :  0.29968292  Accuracy :  94.645  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 14 loss : 0.6953459 Accuracy: 86.56654008438821 Class Accuracy : 17.334644952128993
Iter :  14 Batch :  0   Loss :  0.8383586  Accuracy :  94.13  Class Accuracy :  6.0919540229885065  Car class accuracy  6.0919540229885065
Iter :  14 Batch :  1   Loss :  0.5342318  Accuracy :  90.75999999999999  Class Accuracy :  15.926193921852388  Car class accuracy  15.926193921852388
Iter :  14 Batch :  2   Loss :  0.23272036  Accuracy :  96.38  Class Accuracy :  12.215909090909092  Car class accuracy  12.215909090909092
Iter :  14 Batch :  3   Loss :  0.38376138  Accuracy :  92.925  Class Accuracy :  12.761194029850747  Car class accuracy  12.761194029850747
Iter :  14 Batch :  4   Loss :  0.4406798  Accuracy :  85.76  Class Accuracy :  18.0  Car class accuracy  18.0
Iter :  14 Batch :  5   Loss :  1.0686027  Accuracy :  94.825  Class Accuracy :  9.863121874177414  Car class accuracy  9.863121874177414
Iter :  14 Batch :  6   Loss :  0.35577187  Accuracy :  93.34  Class Accuracy :  17.5  Car class accuracy  17.5
Iter :  14 Batch :  7   Loss :  0.48588657  Accuracy :  91.86999999999999  Class Accuracy :  12.37200259235256  Car class accuracy  12.37200259235256
Iter :  14 Batch :  8   Loss :  0.67776966  Accuracy :  91.02  Class Accuracy :  15.065458207452165  Car class accuracy  15.065458207452165
Iter :  14 Batch :  9   Loss :  0.63307744  Accuracy :  87.94999999999999  Class Accuracy :  15.163868904876098  Car class accuracy  15.163868904876098
Iter :  14 Batch :  10   Loss :  0.32078034  Accuracy :  93.745  Class Accuracy :  16.014492753623188  Car class accuracy  16.014492753623188
Iter :  14 Batch :  11   Loss :  0.46972555  Accuracy :  87.455  Class Accuracy :  19.057971014492754  Car class accuracy  19.057971014492754
Iter :  14 Batch :  12   Loss :  0.52260005  Accuracy :  89.25999999999999  Class Accuracy :  15.336134453781513  Car class accuracy  15.336134453781513
Iter :  14 Batch :  13   Loss :  0.59925985  Accuracy :  90.825  Class Accuracy :  13.729939125622579  Car class accuracy  13.729939125622579
Iter :  14 Batch :  14   Loss :  0.39394265  Accuracy :  91.64999999999999  Class Accuracy :  14.979253112033195  Car class accuracy  14.979253112033195
Iter :  14 Batch :  15   Loss :  0.6585718  Accuracy :  91.83  Class Accuracy :  11.22238586156112  Car class accuracy  11.22238586156112
Iter :  14 Batch :  16   Loss :  0.27963483  Accuracy :  96.14  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 15 loss : 0.6838282 Accuracy: 86.91391732283465 Class Accuracy : 17.061459577244666
Iter :  15 Batch :  0   Loss :  0.4019899  Accuracy :  95.24000000000001  Class Accuracy :  10.932377049180328  Car class accuracy  10.932377049180328/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  class accuracy :  0.17471264367816092  car_class_accuracy :  0.17471264367816092
saved prediction of 46 accuracy :  0.93355  class accuracy :  0.09928374655647383  car_class_accuracy :  0.09928374655647383
saved prediction of 47 accuracy :  0.84435  class accuracy :  0.07210205213533001  car_class_accuracy :  0.07210205213533001
saved prediction of 48 accuracy :  0.9528  class accuracy :  0.1005703422053232  car_class_accuracy :  0.1005703422053232
saved prediction of 49 accuracy :  0.8923  class accuracy :  0.039586114819759675  car_class_accuracy :  0.039586114819759675
saved prediction of 50 accuracy :  0.9582  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 51 accuracy :  0.93455  class accuracy :  0.07744726879394268  car_class_accuracy :  0.07744726879394268
saved prediction of 52 accuracy :  0.8995  class accuracy :  0.07051546391752578  car_class_accuracy :  0.07051546391752578
saved prediction of 53 accuracy :  0.96235  class accuracy :  0.10679056468906363  car_class_accuracy :  0.10679056468906363
saved prediction of 54 accuracy :  0.93235  class accuracy :  0.11182738412360149  car_class_accuracy :  0.11182738412360149
saved prediction of 55 accuracy :  0.98065  class accuracy :  0.10654008438818566  car_class_accuracy :  0.10654008438818566
saved prediction of 56 accuracy :  0.9767  class accuracy :  0.09402173913043478  car_class_accuracy :  0.09402173913043478
saved prediction of 57 accuracy :  0.96445  class accuracy :  0.11365461847389557  car_class_accuracy :  0.11365461847389557
saved prediction of 58 accuracy :  0.89125  class accuracy :  0.19924242424242425  car_class_accuracy :  0.19924242424242425
saved prediction of 59 accuracy :  0.95815  class accuracy :  0.095  car_class_accuracy :  0.095
saved prediction of 60 accuracy :  0.96335  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 61 accuracy :  0.9141  class accuracy :  0.10347003154574133  car_class_accuracy :  0.10347003154574133
saved prediction of 62 accuracy :  0.9562  class accuracy :  0.13253588516746412  car_class_accuracy :  0.13253588516746412
saved prediction of 63 accuracy :  0.93505  class accuracy :  0.1024  car_class_accuracy :  0.1024
saved prediction of 64 accuracy :  0.78995  class accuracy :  0.054689075630252104  car_class_accuracy :  0.054689075630252104
saved prediction of 65 accuracy :  0.9488  class accuracy :  0.08864218616567036  car_class_accuracy :  0.08864218616567036
saved prediction of 66 accuracy :  0.86115  class accuracy :  0.04248704663212435  car_class_accuracy :  0.04248704663212435
saved prediction of 67 accuracy :  0.9603  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 68 accuracy :  0.9364  class accuracy :  0.0782183908045977  car_class_accuracy :  0.0782183908045977
saved prediction of 69 accuracy :  0.90835  class accuracy :  0.0674802584350323  car_class_accuracy :  0.0674802584350323
saved prediction of 70 accuracy :  0.9511  class accuracy :  0.10730743910467413  car_class_accuracy :  0.10730743910467413
saved prediction of 71 accuracy :  0.928  class accuracy :  0.104150390625  car_class_accuracy :  0.104150390625
saved prediction of 72 accuracy :  0.97845  class accuracy :  0.11936936936936937  car_class_accuracy :  0.11936936936936937
saved prediction of 73 accuracy :  0.9771  class accuracy :  0.08838383838383838  car_class_accuracy :  0.08838383838383838
saved prediction of 74 accuracy :  0.9663  class accuracy :  0.1053030303030303  car_class_accuracy :  0.1053030303030303
saved prediction of 75 accuracy :  0.89345  class accuracy :  0.17446808510638298  car_class_accuracy :  0.17446808510638298
saved prediction of 76 accuracy :  0.95805  class accuracy :  0.09  car_class_accuracy :  0.09
saved prediction of 77 accuracy :  0.9653  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 78 accuracy :  0.9133  class accuracy :  0.10593132154006243  car_class_accuracy :  0.10593132154006243
saved prediction of 79 accuracy :  0.9546  class accuracy :  0.1438423645320197  car_class_accuracy :  0.1438423645320197
saved prediction of 80 accuracy :  0.93215  class accuracy :  0.09947916666666666  car_class_accuracy :  0.09947916666666666
saved prediction of 81 accuracy :  0.8425  class accuracy :  0.06935391652372784  car_class_accuracy :  0.06935391652372784
saved prediction of 82 accuracy :  0.9478  class accuracy :  0.09306930693069307  car_class_accuracy :  0.09306930693069307
saved prediction of 83 accuracy :  0.87065  class accuracy :  0.03854007146503318  car_class_accuracy :  0.03854007146503318
saved prediction of 84 accuracy :  0.956  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 85 accuracy :  0.93595  class accuracy :  0.07525661804430038  car_class_accuracy :  0.07525661804430038
saved prediction of 86 accuracy :  0.90205  class accuracy :  0.07902511078286559  car_class_accuracy :  0.07902511078286559
saved prediction of 87 accuracy :  0.9565  class accuracy :  0.10172071475843811  car_class_accuracy :  0.10172071475843811
saved prediction of 88 accuracy :  0.9334  class accuracy :  0.10659978880675818  car_class_accuracy :  0.10659978880675818
saved prediction of 89 accuracy :  0.9775  class accuracy :  0.10720338983050848  car_class_accuracy :  0.10720338983050848
saved prediction of 90 accuracy :  0.97525  class accuracy :  0.13348837209302328  car_class_accuracy :  0.13348837209302328
saved prediction of 91 accuracy :  0.9658  class accuracy :  0.10352422907488987  car_class_accuracy :  0.10352422907488987
saved prediction of 92 accuracy :  0.89385  class accuracy :  0.22045454545454546  car_class_accuracy :  0.22045454545454546
saved prediction of 93 accuracy :  0.95535  class accuracy :  0.1285714285714286  car_class_accuracy :  0.1285714285714286
saved prediction of 94 accuracy :  0.96315  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 95 accuracy :  0.90885  class accuracy :  0.10553907022749753  car_class_accuracy :  0.10553907022749753
saved prediction of 96 accuracy :  0.95335  class accuracy :  0.14347826086956522  car_class_accuracy :  0.14347826086956522
saved prediction of 97 accuracy :  0.9376  class accuracy :  0.10061659192825112  car_class_accuracy :  0.10061659192825112
saved prediction of 98 accuracy :  0.8213  class accuracy :  0.07410134257254222  car_class_accuracy :  0.07410134257254222
saved prediction of 99 accuracy :  0.9542  class accuracy :  0.09371428571428572  car_class_accuracy :  0.09371428571428572
Iter :  190 Batch :  0   Loss :  0.2000697  Accuracy :  95.275  Class Accuracy :  8.125  Car class accuracy  8.125
Iter :  190 Batch :  1   Loss :  0.34861127  Accuracy :  95.585  Class Accuracy :  13.352476669059582  Car class accuracy  13.352476669059582
Iter :  190 Batch :  2   Loss :  0.10534951  Accuracy :  97.685  Class Accuracy :  11.34020618556701  Car class accuracy  11.34020618556701
Iter :  190 Batch :  3   Loss :  0.130225  Accuracy :  98.48  Class Accuracy :  9.787234042553191  Car class accuracy  9.787234042553191
Iter :  190 Batch :  4   Loss :  0.036817424  Accuracy :  99.86  Class Accuracy :  9.25170068027211  Car class accuracy  9.25170068027211
Iter :  190 Batch :  5   Loss :  0.11333718  Accuracy :  98.205  Class Accuracy :  11.128550074738415  Car class accuracy  11.128550074738415
Iter :  190 Batch :  6   Loss :  0.16568597  Accuracy :  96.6  Class Accuracy :  12.218905472636816  Car class accuracy  12.218905472636816
Iter :  190 Batch :  7   Loss :  0.35832217  Accuracy :  95.65  Class Accuracy :  11.033127456485122  Car class accuracy  11.033127456485122
Iter :  190 Batch :  8   Loss :  0.24076794  Accuracy :  96.66  Class Accuracy :  10.311394196744514  Car class accuracy  10.311394196744514
Iter :  190 Batch :  9   Loss :  0.22034438  Accuracy :  98.085  Class Accuracy :  10.133744855967079  Car class accuracy  10.133744855967079
Iter :  190 Batch :  10   Loss :  0.13921905  Accuracy :  97.99  Class Accuracy :  9.646017699115044  Car class accuracy  9.646017699115044
Iter :  190 Batch :  11   Loss :  0.018206848  Accuracy :  99.99  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  190 Batch :  12   Loss :  0.023249445  Accuracy :  99.85000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  190 Batch :  13   Loss :  0.11476617  Accuracy :  98.995  Class Accuracy :  9.221556886227546  Car class accuracy  9.221556886227546
Iter :  190 Batch :  14   Loss :  0.21631686  Accuracy :  98.6  Class Accuracy :  7.241379310344828  Car class accuracy  7.241379310344828
Iter :  190 Batch :  15   Loss :  0.22062461  Accuracy :  96.185  Class Accuracy :  11.889447236180906  Car class accuracy  11.889447236180906
Iter :  190 Batch :  16   Loss :  0.34237137  Accuracy :  94.245  Class Accuracy :  12.342251388187783  Car class accuracy  12.342251388187783
**** Iteration : 191 loss : 0.28434983 Accuracy: 94.95170979667283 Class Accuracy : 11.332596684722068
Iter :  191 Batch :  0   Loss :  0.15690967  Accuracy :  96.14  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  191 Batch :  1   Loss :  0.25059488  Accuracy :  94.03  Class Accuracy :  14.97816593886463  Car class accuracy  14.97816593886463
Iter :  191 Batch :  2   Loss :  0.0634837  Accuracy :  98.88  Class Accuracy :  10.242718446601943  Car class accuracy  10.242718446601943
Iter :  191 Batch :  3   Loss :  0.12815057  Accuracy :  97.46000000000001  Class Accuracy :  11.190476190476192  Car class accuracy  11.190476190476192
Iter :  191 Batch :  4   Loss :  0.041495416  Accuracy :  99.47  Class Accuracy :  10.466666666666665  Car class accuracy  10.466666666666665
Iter :  191 Batch :  5   Loss :  0.1378426  Accuracy :  97.935  Class Accuracy :  11.330603889457521  Car class accuracy  11.330603889457521
Iter :  191 Batch :  6   Loss :  0.2197875  Accuracy :  94.54  Class Accuracy :  13.581151832460733  Car class accuracy  13.581151832460733
Iter :  191 Batch :  7   Loss :  0.4010344  Accuracy :  93.175  Class Accuracy :  12.891174878180834  Car class accuracy  12.891174878180834
Iter :  191 Batch :  8   Loss :  0.270023  Accuracy :  96.63000000000001  Class Accuracy :  9.707142857142857  Car class accuracy  9.707142857142857
Iter :  191 Batch :  9   Loss :  0.15512587  Accuracy :  97.87  Class Accuracy :  10.724935732647815  Car class accuracy  10.724935732647815
Iter :  191 Batch :  10   Loss :  0.16321196  Accuracy :  97.275  Class Accuracy :  11.04109589041096  Car class accuracy  11.04109589041096
Iter :  191 Batch :  11   Loss :  0.034736354  Accuracy :  99.265  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  191 Batch :  12   Loss :  0.02025409  Accuracy :  99.88  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  191 Batch :  13   Loss :  0.14881414  Accuracy :  98.80499999999999  Class Accuracy :  6.88622754491018  Car class accuracy  6.88622754491018
Iter :  191 Batch :  14   Loss :  0.08351214  Accuracy :  97.795  Class Accuracy :  12.16335540838852  Car class accuracy  12.16335540838852
Iter :  191 Batch :  15   Loss :  0.20412633  Accuracy :  96.525  Class Accuracy :  11.884469696969697  Car class accuracy  11.884469696969697
Iter :  191 Batch :  16   Loss :  0.37357014  Accuracy :  95.045  Class Accuracy :  11.115017579105976  Car class accuracy  11.115017579105976
**** Iteration : 192 loss : 0.28374264 Accuracy: 94.96290836653385 Class Accuracy : 11.32612484661154
Iter :  192 Batch :  0   Loss :  0.11247701  Accuracy :  97.77  Class Accuracy :  7.647058823529411  Car class accuracy  7.647058823529411
Iter :  192 Batch :  1   Loss :  0.17092705  Accuracy :  97.13000000000001  Class Accuracy :  12.282842785355347  Car class accuracy  12.282842785355347
Iter :  192 Batch :  2   Loss :  0.07839421  Accuracy :  98.18  Class Accuracy :  11.23762376237624  Car class accuracy  11.23762376237624
Iter :  192 Batch :  3   Loss :  0.07564933  Accuracy :  99.02  Class Accuracy :  9.715447154471544  Car class accuracy  9.715447154471544
Iter :  192 Batch :  4   Loss :  0.024458224  Accuracy :  99.775  Class Accuracy :  9.857142857142858  Car class accuracy  9.857142857142858
Iter :  192 Batch :  5   Loss :  0.08003191  Accuracy :  98.91499999999999  Class Accuracy :  10.570739549839228  Car class accuracy  10.570739549839228
Iter :  192 Batch :  6   Loss :  0.17248519  Accuracy :  95.97  Class Accuracy :  13.27713382507903  Car class accuracy  13.27713382507903
Iter :  192 Batch :  7   Loss :  0.3484725  Accuracy :  93.5  Class Accuracy :  13.112620260328239  Car class accuracy  13.112620260328239
Iter :  192 Batch :  8   Loss :  0.24392766  Accuracy :  96.985  Class Accuracy :  10.292887029288703  Car class accuracy  10.292887029288703
Iter :  192 Batch :  9   Loss :  0.13977239  Accuracy :  98.32  Class Accuracy :  10.58649448479957  Car class accuracy  10.58649448479957
Iter :  192 Batch :  10   Loss :  0.107320726  Accuracy :  98.165  Class Accuracy :  10.91644204851752  Car class accuracy  10.91644204851752
Iter :  192 Batch :  11   Loss :  0.014924735  Accuracy :  99.87  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  192 Batch :  12   Loss :  0.023785587  Accuracy :  99.485  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  192 Batch :  13   Loss :  0.11034074  Accuracy :  97.56  Class Accuracy :  10.625  Car class accuracy  10.625
Iter :  192 Batch :  14   Loss :  0.09048025  Accuracy :  97.83  Class Accuracy :  11.792828685258964  Car class accuracy  11.792828685258964
Iter :  192 Batch :  15   Loss :  0.18350129  Accuracy :  96.08  Class Accuracy :  12.586206896551724  Car class accuracy  12.586206896551724
Iter :  192 Batch :  16   Loss :  0.2703164  Accuracy :  93.125  Class Accuracy :  13.810703666997027  Car class accuracy  13.810703666997027
**** Iteration : 193 loss : 0.28295717 Accuracy: 94.97611280487806 Class Accuracy : 11.31873675192774
Iter :  193 Batch :  0   Loss :  0.12010156  Accuracy :  95.89  Class Accuracy :  12.0  Car class accuracy  12.0
Iter :  193 Batch :  1   Loss :  0.19006574  Accuracy :  95.345  Class Accuracy :  13.63013698630137  Car class accuracy  13.63013698630137
Iter :  193 Batch :  2   Loss :  0.064869985  Accuracy :  98.8  Class Accuracy :  11.179245283018869  Car class accuracy  11.179245283018869
Iter :  193 Batch :  3   Loss :  0.054310076  Accuracy :  98.95  Class Accuracy :  10.869565217391305  Car class accuracy  10.869565217391305
Iter :  193 Batch :  4   Loss :  0.027209116  Accuracy :  99.825  Class Accuracy :  8.721804511278194  Car class accuracy  8.721804511278194
Iter :  193 Batch :  5   Loss :  0.08291149  Accuracy :  99.045  Class Accuracy :  10.280941533788916  Car class accuracy  10.280941533788916
Iter :  193 Batch :  6   Loss :  0.12079177  Accuracy :  97.28  Class Accuracy :  12.428419936373276  Car class accuracy  12.428419936373276
Iter :  193 Batch :  7   Loss :  0.5971395  Accuracy :  95.055  Class Accuracy :  9.254843517138598  Car class accuracy  9.254843517138598
Iter :  193 Batch :  8   Loss :  0.22236963  Accuracy :  97.045  Class Accuracy :  10.430854760250174  Car class accuracy  10.430854760250174
Iter :  193 Batch :  9   Loss :  0.13711172  Accuracy :  98.465  Class Accuracy :  10.459770114942527  Car class accuracy  10.459770114942527
Iter :  193 Batch :  10   Loss :  0.14349578  Accuracy :  95.975  Class Accuracy :  14.117647058823529  Car class accuracy  14.117647058823529
Iter :  193 Batch :  11   Loss :  0.013820825  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  193 Batch :  12   Loss :  0.037024718  Accuracy :  99.065  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  193 Batch :  13   Loss :  0.3017884  Accuracy :  93.57  Class Accuracy :  17.628205128205128  Car class accuracy  17.628205128205128
Iter :  193 Batch :  14   Loss :  0.11784493  Accuracy :  96.315  Class Accuracy :  16.25  Car class accuracy  16.25
Iter :  193 Batch :  15   Loss :  0.6856861  Accuracy :  87.675  Class Accuracy :  17.495412844036696  Car class accuracy  17.495412844036696
Iter :  193 Batch :  16   Loss :  0.4766962  Accuracy :  86.19  Class Accuracy :  18.280701754385966  Car class accuracy  18.280701754385966
**** Iteration : 194 loss : 0.28252736 Accuracy: 94.98212162572035 Class Accuracy : 11.318921472541378
Iter :  194 Batch :  0   Loss :  0.44386387  Accuracy :  88.53999999999999  Class Accuracy :  20.76923076923077  Car class accuracy  20.76923076923077
Iter :  194 Batch :  1   Loss :  0.2151188  Accuracy :  95.12  Class Accuracy :  13.765567765567766  Car class accuracy  13.765567765567766
Iter :  194 Batch :  2   Loss :  0.10479008  Accuracy :  99.08  Class Accuracy :  8.402061855670103  Car class accuracy  8.402061855670103
Iter :  194 Batch :  3   Loss :  0.099589296  Accuracy :  98.075  Class Accuracy :  10.85308056872038  Car class accuracy  10.85308056872038
Iter :  194 Batch :  4   Loss :  0.049293965  Accuracy :  99.39  Class Accuracy :  9.701492537313433  Car class accuracy  9.701492537313433
Iter :  194 Batch :  5   Loss :  0.105306774  Accuracy :  99.08  Class Accuracy :  10.13347022587269  Car class accuracy  10.13347022587269
Iter :  194 Batch :  6   Loss :  0.15659954  Accuracy :  96.50999999999999  Class Accuracy :  12.685370741482965  Car class accuracy  12.685370741482965
Iter :  194 Batch :  7   Loss :  0.34264854  Accuracy :  92.14  Class Accuracy :  13.803370786516853  Car class accuracy  13.803370786516853
Iter :  194 Batch :  8   Loss :  0.19469908  Accuracy :  96.095  Class Accuracy :  12.143364088005677  Car class accuracy  12.143364088005677
Iter :  194 Batch :  9   Loss :  0.41095966  Accuracy :  97.435  Class Accuracy :  9.58818958818959  Car class accuracy  9.58818958818959
Iter :  194 Batch :  10   Loss :  0.14606299  Accuracy :  95.555  Class Accuracy :  14.710743801652892  Car class accuracy  14.710743801652892
Iter :  194 Batch :  11   Loss :  0.011506846  Accuracy :  99.97  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  194 Batch :  12   Loss :  0.046266884  Accuracy :  98.9  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  194 Batch :  13   Loss :  0.19204797  Accuracy :  95.91  Class Accuracy :  11.835443037974684  Car class accuracy  11.835443037974684
Iter :  194 Batch :  14   Loss :  0.1117827  Accuracy :  96.57  Class Accuracy :  13.624454148471616  Car class accuracy  13.624454148471616
Iter :  194 Batch :  15   Loss :  0.32341236  Accuracy :  89.9  Class Accuracy :  17.236971484759096  Car class accuracy  17.236971484759096
Iter :  194 Batch :  16   Loss :  0.37467098  Accuracy :  92.01  Class Accuracy :  14.136743728480077  Car class accuracy  14.136743728480077
**** Iteration : 195 loss : 0.2820825 Accuracy: 94.98682407966203 Class Accuracy : 11.319213533523484
Iter :  195 Batch :  0   Loss :  0.194376  Accuracy :  93.755  Class Accuracy :  13.999999999999998  Car class accuracy  13.999999999999998
Iter :  195 Batch :  1   Loss :  0.25537774  Accuracy :  96.83500000000001  Class Accuracy :  12.146050670640836  Car class accuracy  12.146050670640836
Iter :  195 Batch :  2   Loss :  0.07948757  Accuracy :  98.505  Class Accuracy :  9.242424242424242  Car class accuracy  9.242424242424242
Iter :  195 Batch :  3   Loss :  0.08847711  Accuracy :  98.4  Class Accuracy :  10.708661417322835  Car class accuracy  10.708661417322835
Iter :  195 Batch :  4   Loss :  0.042347487  Accuracy :  99.32  Class Accuracy :  10.633802816901408  Car class accuracy  10.633802816901408
Iter :  195 Batch :  5   Loss :  0.5086178  Accuracy :  92.625  Class Accuracy :  13.938923395445135  Car class accuracy  13.938923395445135
Iter :  195 Batch :  6   Loss :  0.1424228  Accuracy :  96.58  Class Accuracy :  11.481481481481481  Car class accuracy  11.481481481481481
Iter :  195 Batch :  7   Loss :  0.4015717  Accuracy :  90.77  Class Accuracy :  15.23598001110494  Car class accuracy  15.23598001110494
Iter :  195 Batch :  8   Loss :  0.3197823  Accuracy :  97.09  Class Accuracy :  10.320427236315085  Car class accuracy  10.320427236315085
Iter :  195 Batch :  9   Loss :  1.441227  Accuracy :  94.89999999999999  Class Accuracy :  9.688649178720274  Car class accuracy  9.688649178720274
Iter :  195 Batch :  10   Loss :  0.15174255  Accuracy :  95.87  Class Accuracy :  13.869209809264305  Car class accuracy  13.869209809264305
Iter :  195 Batch :  11   Loss :  0.14028536  Accuracy :  96.38  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  195 Batch :  12   Loss :  0.24428238  Accuracy :  91.985  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  195 Batch :  13   Loss :  0.36392906  Accuracy :  85.86500000000001  Class Accuracy :  23.576642335766422  Car class accuracy  23.576642335766422
Iter :  195 Batch :  14   Loss :  0.2459241  Accuracy :  88.815  Class Accuracy :  20.254777070063696  Car class accuracy  20.254777070063696
Iter :  195 Batch :  15   Loss :  0.4521782  Accuracy :  82.88499999999999  Class Accuracy :  22.555555555555557  Car class accuracy  22.555555555555557
Iter :  195 Batch :  16   Loss :  0.68273294  Accuracy :  84.075  Class Accuracy :  17.54207037225905  Car class accuracy  17.54207037225905
**** Iteration : 196 loss : 0.28237048 Accuracy: 94.9777814470129 Class Accuracy : 11.326048725815099
Iter :  196 Batch :  0   Loss :  0.33684102  Accuracy :  85.30499999999999  Class Accuracy :  22.10526315789474  Car class accuracy  22.10526315789474
Iter :  196 Batch :  1   Loss :  0.33415976  Accuracy :  87.98  Class Accuracy :  19.4553706505295  Car class accuracy  19.4553706505295
Iter :  196 Batch :  2   Loss :  0.22232771  Accuracy :  88.755  Class Accuracy :  21.428571428571427  Car class accuracy  21.428571428571427
Iter :  196 Batch :  3   Loss :  0.24643967  Accuracy :  88.71  Class Accuracy :  19.817351598173516  Car class accuracy  19.817351598173516
Iter :  196 Batch :  4   Loss :  0.264895  Accuracy :  89.84  Class Accuracy :  17.94326241134752  Car class accuracy  17.94326241134752
Iter :  196 Batch :  5   Loss :  0.42185596  Accuracy :  90.595  Class Accuracy :  17.066974595842957  Car class accuracy  17.066974595842957
Iter :  196 Batch :  6   Loss :  0.33626038  Accuracy :  91.58  Class Accuracy :  16.445115810674725  Car class accuracy  16.445115810674725
Iter :  196 Batch :  7   Loss :  0.8803059  Accuracy :  85.14  Class Accuracy :  17.384960718294053  Car class accuracy  17.384960718294053
Iter :  196 Batch :  8   Loss :  0.9323224  Accuracy :  90.2  Class Accuracy :  12.285902503293809  Car class accuracy  12.285902503293809
Iter :  196 Batch :  9   Loss :  0.56281  Accuracy :  91.50500000000001  Class Accuracy :  11.976833976833975  Car class accuracy  11.976833976833975
Iter :  196 Batch :  10   Loss :  0.30668956  Accuracy :  93.83500000000001  Class Accuracy :  16.59630606860158  Car class accuracy  16.59630606860158
Iter :  196 Batch :  11   Loss :  0.11698938  Accuracy :  97.46000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  196 Batch :  12   Loss :  0.201341  Accuracy :  95.62  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  196 Batch :  13   Loss :  0.3154813  Accuracy :  91.455  Class Accuracy :  17.2  Car class accuracy  17.2
Iter :  196 Batch :  14   Loss :  0.25849545  Accuracy :  97.33500000000001  Class Accuracy :  10.391705069124423  Car class accuracy  10.391705069124423
Iter :  196 Batch :  15   Loss :  0.50029683  Accuracy :  88.13499999999999  Class Accuracy :  16.669542709232097  Car class accuracy  16.669542709232097
Iter :  196 Batch :  16   Loss :  0.57024443  Accuracy :  90.105  Class Accuracy :  14.016798418972332  Car class accuracy  14.016798418972332
**** Iteration : 197 loss : 0.2829701 Accuracy: 94.95655465949822 Class Accuracy : 11.343444523538674
Iter :  197 Batch :  0   Loss :  0.3774219  Accuracy :  92.80000000000001  Class Accuracy :  15.238095238095237  Car class accuracy  15.238095238095237
Iter :  197 Batch :  1   Loss :  0.6068784  Accuracy :  92.455  Class Accuracy :  15.025380710659899  Car class accuracy  15.025380710659899
Iter :  197 Batch :  2   Loss :  0.25828356  Accuracy :  97.11999999999999  Class Accuracy :  10.909090909090908  Car class accuracy  10.909090909090908
Iter :  197 Batch :  3   Loss :  0.28799942  Accuracy :  95.125  Class Accuracy :  13.18181818181818  Car class accuracy  13.18181818181818
Iter :  197 Batch :  4   Loss :  0.197324  Accuracy :  97.50999999999999  Class Accuracy :  15.714285714285714  Car class accuracy  15.714285714285714
Iter :  197 Batch :  5   Loss :  0.3319189  Accuracy :  95.47  Class Accuracy :  12.982998454404946  Car class accuracy  12.982998454404946
Iter :  197 Batch :  6   Loss :  0.24405825  Accuracy : 
Iter :  15 Batch :  1   Loss :  0.8203826  Accuracy :  91.8  Class Accuracy :  9.555236728837876  Car class accuracy  9.555236728837876
Iter :  15 Batch :  2   Loss :  0.19705375  Accuracy :  97.765  Class Accuracy :  11.45945945945946  Car class accuracy  11.45945945945946
Iter :  15 Batch :  3   Loss :  0.29533896  Accuracy :  94.295  Class Accuracy :  14.518518518518519  Car class accuracy  14.518518518518519
Iter :  15 Batch :  4   Loss :  0.3901343  Accuracy :  91.0  Class Accuracy :  11.666666666666666  Car class accuracy  11.666666666666666
Iter :  15 Batch :  5   Loss :  0.7698236  Accuracy :  95.38499999999999  Class Accuracy :  8.64648033126294  Car class accuracy  8.64648033126294
Iter :  15 Batch :  6   Loss :  0.31001896  Accuracy :  97.18  Class Accuracy :  8.606965174129352  Car class accuracy  8.606965174129352
Iter :  15 Batch :  7   Loss :  1.2718551  Accuracy :  91.34  Class Accuracy :  9.365446966188049  Car class accuracy  9.365446966188049
Iter :  15 Batch :  8   Loss :  0.6449604  Accuracy :  93.075  Class Accuracy :  12.037953795379538  Car class accuracy  12.037953795379538
Iter :  15 Batch :  9   Loss :  0.7176604  Accuracy :  86.09  Class Accuracy :  16.929260450160772  Car class accuracy  16.929260450160772
Iter :  15 Batch :  10   Loss :  0.31615457  Accuracy :  96.515  Class Accuracy :  10.305343511450381  Car class accuracy  10.305343511450381
Iter :  15 Batch :  11   Loss :  0.52820253  Accuracy :  84.685  Class Accuracy :  20.151515151515152  Car class accuracy  20.151515151515152
Iter :  15 Batch :  12   Loss :  0.7033783  Accuracy :  82.60499999999999  Class Accuracy :  22.552204176334108  Car class accuracy  22.552204176334108
Iter :  15 Batch :  13   Loss :  0.72977227  Accuracy :  86.14  Class Accuracy :  15.680507497116494  Car class accuracy  15.680507497116494
Iter :  15 Batch :  14   Loss :  0.5000672  Accuracy :  91.05  Class Accuracy :  15.633187772925766  Car class accuracy  15.633187772925766
Iter :  15 Batch :  15   Loss :  0.6980083  Accuracy :  89.13499999999999  Class Accuracy :  13.157534246575342  Car class accuracy  13.157534246575342
Iter :  15 Batch :  16   Loss :  0.33177465  Accuracy :  94.555  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 16 loss : 0.67645365 Accuracy: 87.21029520295204 Class Accuracy : 16.77051435467102
Iter :  16 Batch :  0   Loss :  0.5759433  Accuracy :  89.24  Class Accuracy :  16.336116910229645  Car class accuracy  16.336116910229645
Iter :  16 Batch :  1   Loss :  0.5752417  Accuracy :  92.815  Class Accuracy :  12.989536621823616  Car class accuracy  12.989536621823616
Iter :  16 Batch :  2   Loss :  0.26392543  Accuracy :  94.565  Class Accuracy :  12.247191011235955  Car class accuracy  12.247191011235955
Iter :  16 Batch :  3   Loss :  0.3693225  Accuracy :  92.22  Class Accuracy :  16.097560975609756  Car class accuracy  16.097560975609756
Iter :  16 Batch :  4   Loss :  0.40190113  Accuracy :  91.21000000000001  Class Accuracy :  18.125  Car class accuracy  18.125
Iter :  16 Batch :  5   Loss :  1.6336094  Accuracy :  90.46  Class Accuracy :  4.914248021108179  Car class accuracy  4.914248021108179
Iter :  16 Batch :  6   Loss :  0.37632847  Accuracy :  92.22  Class Accuracy :  18.134715025906736  Car class accuracy  18.134715025906736
Iter :  16 Batch :  7   Loss :  0.69684726  Accuracy :  90.495  Class Accuracy :  11.159904534606206  Car class accuracy  11.159904534606206
Iter :  16 Batch :  8   Loss :  0.70908254  Accuracy :  93.06  Class Accuracy :  12.003968253968253  Car class accuracy  12.003968253968253
Iter :  16 Batch :  9   Loss :  0.7252896  Accuracy :  84.83500000000001  Class Accuracy :  15.609756097560975  Car class accuracy  15.609756097560975
Iter :  16 Batch :  10   Loss :  0.35542133  Accuracy :  92.45  Class Accuracy :  15.952380952380954  Car class accuracy  15.952380952380954
Iter :  16 Batch :  11   Loss :  0.53388155  Accuracy :  84.59  Class Accuracy :  24.013605442176868  Car class accuracy  24.013605442176868
Iter :  16 Batch :  12   Loss :  0.54686916  Accuracy :  84.37  Class Accuracy :  18.225469728601254  Car class accuracy  18.225469728601254
Iter :  16 Batch :  13   Loss :  0.9250051  Accuracy :  85.905  Class Accuracy :  13.525535420098848  Car class accuracy  13.525535420098848
Iter :  16 Batch :  14   Loss :  0.403519  Accuracy :  91.25999999999999  Class Accuracy :  16.694214876033058  Car class accuracy  16.694214876033058
Iter :  16 Batch :  15   Loss :  0.75874394  Accuracy :  89.36  Class Accuracy :  11.65418652144316  Car class accuracy  11.65418652144316
Iter :  16 Batch :  16   Loss :  0.3071448  Accuracy :  93.245  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 17 loss : 0.6717952 Accuracy: 87.3829513888889 Class Accuracy : 16.605877710099406
Iter :  17 Batch :  0   Loss :  0.444784  Accuracy :  93.07  Class Accuracy :  12.89308176100629  Car class accuracy  12.89308176100629
Iter :  17 Batch :  1   Loss :  0.92383796  Accuracy :  89.95  Class Accuracy :  14.69180565627266  Car class accuracy  14.69180565627266
Iter :  17 Batch :  2   Loss :  0.37660298  Accuracy :  90.0  Class Accuracy :  20.51282051282051  Car class accuracy  20.51282051282051
Iter :  17 Batch :  3   Loss :  0.4332336  Accuracy :  88.02499999999999  Class Accuracy :  21.021897810218977  Car class accuracy  21.021897810218977
Iter :  17 Batch :  4   Loss :  0.41362587  Accuracy :  90.3  Class Accuracy :  20.52631578947369  Car class accuracy  20.52631578947369
Iter :  17 Batch :  5   Loss :  0.85778576  Accuracy :  94.84  Class Accuracy :  8.634696016771489  Car class accuracy  8.634696016771489
Iter :  17 Batch :  6   Loss :  0.3453818  Accuracy :  94.74000000000001  Class Accuracy :  15.687203791469194  Car class accuracy  15.687203791469194
Iter :  17 Batch :  7   Loss :  0.9633832  Accuracy :  91.345  Class Accuracy :  9.804772234273319  Car class accuracy  9.804772234273319
Iter :  17 Batch :  8   Loss :  0.7440872  Accuracy :  90.46  Class Accuracy :  15.065217391304348  Car class accuracy  15.065217391304348
Iter :  17 Batch :  9   Loss :  0.6231442  Accuracy :  87.175  Class Accuracy :  14.83189241114313  Car class accuracy  14.83189241114313
Iter :  17 Batch :  10   Loss :  0.3160922  Accuracy :  94.67999999999999  Class Accuracy :  17.857142857142858  Car class accuracy  17.857142857142858
Iter :  17 Batch :  11   Loss :  0.4754836  Accuracy :  85.57000000000001  Class Accuracy :  23.72670807453416  Car class accuracy  23.72670807453416
Iter :  17 Batch :  12   Loss :  0.43950626  Accuracy :  92.88  Class Accuracy :  14.904862579281183  Car class accuracy  14.904862579281183
Iter :  17 Batch :  13   Loss :  0.77783746  Accuracy :  86.765  Class Accuracy :  14.276663146779303  Car class accuracy  14.276663146779303
Iter :  17 Batch :  14   Loss :  0.35610673  Accuracy :  93.465  Class Accuracy :  11.348837209302324  Car class accuracy  11.348837209302324
Iter :  17 Batch :  15   Loss :  0.5791684  Accuracy :  92.67  Class Accuracy :  10.674401740391588  Car class accuracy  10.674401740391588
Iter :  17 Batch :  16   Loss :  0.28148657  Accuracy :  95.47  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 18 loss : 0.66501164 Accuracy: 87.599 Class Accuracy : 16.48836426062562
Iter :  18 Batch :  0   Loss :  0.68239784  Accuracy :  93.605  Class Accuracy :  8.151848151848153  Car class accuracy  8.151848151848153
Iter :  18 Batch :  1   Loss :  0.4946962  Accuracy :  92.62  Class Accuracy :  15.238095238095237  Car class accuracy  15.238095238095237
Iter :  18 Batch :  2   Loss :  0.25351864  Accuracy :  95.465  Class Accuracy :  14.622641509433961  Car class accuracy  14.622641509433961
Iter :  18 Batch :  3   Loss :  0.3661503  Accuracy :  89.2  Class Accuracy :  21.726618705035968  Car class accuracy  21.726618705035968
Iter :  18 Batch :  4   Loss :  0.43120357  Accuracy :  85.855  Class Accuracy :  23.076923076923077  Car class accuracy  23.076923076923077
Iter :  18 Batch :  5   Loss :  0.6558443  Accuracy :  95.005  Class Accuracy :  10.280470914127424  Car class accuracy  10.280470914127424
Iter :  18 Batch :  6   Loss :  0.29698887  Accuracy :  95.50999999999999  Class Accuracy :  14.329896907216494  Car class accuracy  14.329896907216494
Iter :  18 Batch :  7   Loss :  0.65672547  Accuracy :  90.32  Class Accuracy :  11.960784313725489  Car class accuracy  11.960784313725489
Iter :  18 Batch :  8   Loss :  0.72958624  Accuracy :  92.89  Class Accuracy :  12.47116392869626  Car class accuracy  12.47116392869626
Iter :  18 Batch :  9   Loss :  0.9679856  Accuracy :  83.06  Class Accuracy :  15.02262443438914  Car class accuracy  15.02262443438914
Iter :  18 Batch :  10   Loss :  0.3186407  Accuracy :  93.435  Class Accuracy :  15.694444444444445  Car class accuracy  15.694444444444445
Iter :  18 Batch :  11   Loss :  0.4033419  Accuracy :  87.51  Class Accuracy :  19.45945945945946  Car class accuracy  19.45945945945946
Iter :  18 Batch :  12   Loss :  0.54925907  Accuracy :  86.005  Class Accuracy :  20.884353741496597  Car class accuracy  20.884353741496597
Iter :  18 Batch :  13   Loss :  0.8300324  Accuracy :  84.52  Class Accuracy :  15.68928950159067  Car class accuracy  15.68928950159067
Iter :  18 Batch :  14   Loss :  0.3667695  Accuracy :  92.425  Class Accuracy :  17.67716535433071  Car class accuracy  17.67716535433071
Iter :  18 Batch :  15   Loss :  0.72853655  Accuracy :  90.53999999999999  Class Accuracy :  10.780452224653539  Car class accuracy  10.780452224653539
Iter :  18 Batch :  16   Loss :  0.3339852  Accuracy :  93.405  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 19 loss : 0.65805656 Accuracy: 87.76107142857144 Class Accuracy : 16.385146991913913
Iter :  19 Batch :  0   Loss :  0.45903125  Accuracy :  93.39  Class Accuracy :  12.393442622950818  Car class accuracy  12.393442622950818
Iter :  19 Batch :  1   Loss :  0.64424354  Accuracy :  89.0  Class Accuracy :  16.659528907922912  Car class accuracy  16.659528907922912
Iter :  19 Batch :  2   Loss :  0.26201123  Accuracy :  97.095  Class Accuracy :  8.011049723756905  Car class accuracy  8.011049723756905
Iter :  19 Batch :  3   Loss :  0.3291233  Accuracy :  93.94500000000001  Class Accuracy :  13.80952380952381  Car class accuracy  13.80952380952381
Iter :  19 Batch :  4   Loss :  0.38901561  Accuracy :  90.905  Class Accuracy :  14.666666666666666  Car class accuracy  14.666666666666666
Iter :  19 Batch :  5   Loss :  0.95776486  Accuracy :  92.965  Class Accuracy :  7.492943289710033  Car class accuracy  7.492943289710033
Iter :  19 Batch :  6   Loss :  0.32085657  Accuracy :  94.98  Class Accuracy :  12.731958762886597  Car class accuracy  12.731958762886597
Iter :  19 Batch :  7   Loss :  0.5417878  Accuracy :  91.24  Class Accuracy :  12.011138613861386  Car class accuracy  12.011138613861386
Iter :  19 Batch :  8   Loss :  1.0164229  Accuracy :  90.19  Class Accuracy :  11.188524590163935  Car class accuracy  11.188524590163935
Iter :  19 Batch :  9   Loss :  0.6772178  Accuracy :  84.815  Class Accuracy :  18.382352941176467  Car class accuracy  18.382352941176467
Iter :  19 Batch :  10   Loss :  0.30166602  Accuracy :  93.805  Class Accuracy :  15.87837837837838  Car class accuracy  15.87837837837838
Iter :  19 Batch :  11   Loss :  0.46248868  Accuracy :  86.575  Class Accuracy :  21.481481481481485  Car class accuracy  21.481481481481485
Iter :  19 Batch :  12   Loss :  0.41320023  Accuracy :  91.465  Class Accuracy :  15.991379310344827  Car class accuracy  15.991379310344827
Iter :  19 Batch :  13   Loss :  0.6921839  Accuracy :  89.445  Class Accuracy :  12.868894601542417  Car class accuracy  12.868894601542417
Iter :  19 Batch :  14   Loss :  0.4487836  Accuracy :  88.64  Class Accuracy :  19.327731092436977  Car class accuracy  19.327731092436977
Iter :  19 Batch :  15   Loss :  0.6510249  Accuracy :  89.575  Class Accuracy :  13.314606741573035  Car class accuracy  13.314606741573035
Iter :  19 Batch :  16   Loss :  0.36949596  Accuracy :  90.05  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 20 loss : 0.6514175 Accuracy: 87.92668141592921 Class Accuracy : 16.230757914249725
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__20_0.ckpt
saved prediction of 0 accuracy :  0.79405  class accuracy :  0.3219178082191781  car_class_accuracy :  0.3219178082191781
saved prediction of 1 accuracy :  0.84575  class accuracy :  0.1944206008583691  car_class_accuracy :  0.1944206008583691
saved prediction of 2 accuracy :  0.9282  class accuracy :  0.10268551236749117  car_class_accuracy :  0.10268551236749117
saved prediction of 3 accuracy :  0.92595  class accuracy :  0.10506721820062048  car_class_accuracy :  0.10506721820062048
saved prediction of 4 accuracy :  0.90535  class accuracy :  0.15695931477516062  car_class_accuracy :  0.15695931477516062
saved prediction of 5 accuracy :  0.86705  class accuracy :  0.19337899543378995  car_class_accuracy :  0.19337899543378995
saved prediction of 6 accuracy :  0.93335  class accuracy :  0.12438040345821326  car_class_accuracy :  0.12438040345821326
saved prediction of 7 accuracy :  0.9758  class accuracy :  0.05628415300546448  car_class_accuracy :  0.05628415300546448
saved prediction of 8 accuracy :  0.89415  class accuracy :  0.12063178677196447  car_class_accuracy :  0.12063178677196447
saved prediction of 9 accuracy :  0.8982  class accuracy :  0.11002178649237473  car_class_accuracy :  0.11002178649237473
saved prediction of 10 accuracy :  0.8924  class accuracy :  0.18333333333333332  car_class_accuracy :  0.18333333333333332
saved prediction of 11 accuracy :  0.9611  class accuracy :  0.09663448995564831  car_class_accuracy :  0.09663448995564831
saved prediction of 12 accuracy :  0.9425  class accuracy :  0.13964646464646463  car_class_accuracy :  0.13964646464646463
saved prediction of 13 accuracy :  0.8756  class accuracy :  0.15461460446247463  car_class_accuracy :  0.15461460446247463
saved prediction of 14 accuracy :  0.9834  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 15 accuracy :  0.879  class accuracy :  0.13289972899728997  car_class_accuracy :  0.13289972899728997
saved prediction of 16 accuracy :  0.9785  class accuracy :  0.11923076923076922  car_class_accuracy :  0.11923076923076922
saved prediction of 17 accuracy :  0.83375  class accuracy :  0.2980891719745223  car_class_accuracy :  0.2980891719745223
saved prediction of 18 accuracy :  0.86265  class accuracy :  0.17633242999096657  car_class_accuracy :  0.17633242999096657
saved prediction of 19 accuracy :  0.9199  class accuracy :  0.10262273032952254  car_class_accuracy :  0.10262273032952254
saved prediction of 20 accuracy :  0.938  class accuracy :  0.09346473029045643  car_class_accuracy :  0.09346473029045643
saved prediction of 21 accuracy :  0.9066  class accuracy :  0.17468069120961682  car_class_accuracy :  0.17468069120961682
saved prediction of 22 accuracy :  0.8864  class accuracy :  0.17186858316221768  car_class_accuracy :  0.17186858316221768
saved prediction of 23 accuracy :  0.92835  class accuracy :  0.1344178082191781  car_class_accuracy :  0.1344178082191781
saved prediction of 24 accuracy :  0.9747  class accuracy :  0.04431137724550898  car_class_accuracy :  0.04431137724550898
saved prediction of 25 accuracy :  0.88985  class accuracy :  0.12305789213260762  car_class_accuracy :  0.12305789213260762
saved prediction of 26 accuracy :  0.9034  class accuracy :  0.11352601156069364  car_class_accuracy :  0.11352601156069364
saved prediction of 27 accuracy :  0.8778  class accuracy :  0.2  car_class_accuracy :  0.2
saved prediction of 28 accuracy :  0.96435  class accuracy :  0.10165311653116531  car_class_accuracy :  0.10165311653116531
saved prediction of 29 accuracy :  0.94185  class accuracy :  0.13707865168539327  car_class_accuracy :  0.13707865168539327
saved prediction of 30 accuracy :  0.85505  class accuracy :  0.1738327904451683  car_class_accuracy :  0.1738327904451683
saved prediction of 31 accuracy :  0.984  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 32 accuracy :  0.87875  class accuracy :  0.15856052344601962  car_class_accuracy :  0.15856052344601962
saved prediction of 33 accuracy :  0.97755  class accuracy :  0.0911504424778761  car_class_accuracy :  0.0911504424778761
saved prediction of 34 accuracy :  0.8217  class accuracy :  0.2727848101265823  car_class_accuracy :  0.2727848101265823
saved prediction of 35 accuracy :  0.84375  class accuracy :  0.18718190386427896  car_class_accuracy :  0.18718190386427896
saved prediction of 36 accuracy :  0.9317  class accuracy :  0.10033444816053512  car_class_accuracy :  0.10033444816053512
saved prediction of 37 accuracy :  0.9356  class accuracy :  0.08927038626609443  car_class_accuracy :  0.08927038626609443
saved prediction of 38 accuracy :  0.9082  class accuracy :  0.17662337662337663  car_class_accuracy :  0.17662337662337663
saved prediction of 39 accuracy :  0.92605  class accuracy :  0.14773218142548597  car_class_accuracy :  0.14773218142548597
saved prediction of 40 accuracy :  0.93175  class accuracy :  0.13027309703660664  car_class_accuracy :  0.13027309703660664
saved prediction of 41 accuracy :  0.9792  class accuracy :  0.06524064171122995  car_class_accuracy :  0.06524064171122995
saved prediction of 42 accuracy :  0.8915  class accuracy :  0.12411067193675888  car_class_accuracy :  0.12411067193675888
saved prediction of 43 accuracy :  0.89665  class accuracy :  0.1096340150699677  car_class_accuracy :  0.1096340150699677
saved prediction of 44 accuracy :  0.8804  class accuracy :  0.15294117647058822  car_class_accuracy :  0.15294117647058822
saved prediction of 45 accuracy :  0.9537  class accuracy :  0.09552125506072875  car_class_accuracy :  0.09552125506072875
saved prediction of 46 accuracy :  0.9478  class accuracy :  0.14426229508196722  car_class_accuracy :  0.14426229508196722
saved prediction of 47 accuracy :  0.8725  class accuracy :  0.15263936852491367  car_class_accuracy :  0.15263936852491367
saved prediction of 48 accuracy :  0.98385  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 49 accuracy :  0.87855  class accuracy :  0.150403442711135  car_class_accuracy :  0.150403442711135
saved prediction of 50 accuracy :  0.97495  class accuracy :  0.09323308270676692  car_class_accuracy :  0.09323308270676692
saved prediction of 51 accuracy :  0.8172  class accuracy :  0.27379310344827584  car_class_accuracy :  0.27379310344827584
saved prediction of 52 accuracy :  0.836  class accuracy :  0.20138099106417545  car_class_accuracy :  0.20138099106417545
saved prediction of 53 accuracy :  0.93245  class accuracy :  0.09472202674173118  car_class_accuracy :  0.09472202674173118
saved prediction of 54 accuracy :  0.94045  class accuracy :  0.09286452947259566  car_class_accuracy :  0.09286452947259566
saved prediction of 55 accuracy :  0.90135  class accuracy :  0.17913882702301412  car_class_accuracy :  0.17913882702301412
saved prediction of 56 accuracy :  0.89035  class accuracy :  0.176545842217484  car_class_accuracy :  0.176545842217484
saved prediction of 57 accuracy :  0.93045  class accuracy :  0.13314655172413795  car_class_accuracy :  0.13314655172413795
saved prediction of 58 accuracy :  0.97555  class accuracy :  0.05721153846153846  car_class_accuracy :  0.05721153846153846
saved prediction of 59 accuracy :  0.8913  class accuracy :  0.11961538461538461  car_class_accuracy :  0.11961538461538461
saved prediction of 60 accuracy :  0.89665  class accuracy :  0.11765685730149918  car_class_accuracy :  0.11765685730149918
saved prediction of 61 accuracy :  0.8906  class accuracy :  0.22000000000000003  car_class_accuracy :  0.22000000000000003
saved prediction of 62 accuracy :  0.9622  class accuracy :  0.10104923325262309  car_class_accuracy :  0.10104923325262309
saved prediction of 63 accuracy :  0.9394  class accuracy :  0.1482849604221636  car_class_accuracy :  0.1482849604221636
saved prediction of 64 accuracy :  0.88115  class accuracy :  0.16577350859453993  car_class_accuracy :  0.16577350859453993
saved prediction of 65 accuracy :  0.9836  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 66 accuracy :  0.8802  class accuracy :  0.12672556598564327  car_class_accuracy :  0.12672556598564327
saved prediction of 67 accuracy :  0.97665  class accuracy :  0.09516129032258065  car_class_accuracy :  0.09516129032258065
saved prediction of 68 accuracy :  0.8595  class accuracy :  0.27086092715231785  car_class_accuracy :  0.27086092715231785
saved prediction of 69 accuracy :  0.84865  class accuracy :  0.18115419296663662  car_class_accuracy :  0.18115419296663662
saved prediction of 70 accuracy :  0.92865  class accuracy :  0.1103099730458221  car_class_accuracy :  0.1103099730458221
saved prediction of 71 accuracy :  0.9395  class accuracy :  0.09251844046364595  car_class_accuracy :  0.09251844046364595
saved prediction of 72 accuracy :  0.903  class accuracy :  0.17297904191616767  car_class_accuracy :  0.17297904191616767
saved prediction of 73 accuracy :  0.88425  class accuracy :  0.18580786026200874  car_class_accuracy :  0.18580786026200874
saved prediction of 74 accuracy :  0.92985  class accuracy :  0.12319158263919334  car_class_accuracy :  0.12319158263919334
saved prediction of 75 accuracy :  0.97565  class accuracy :  0.054385964912280704  car_class_accuracy :  0.054385964912280704
saved prediction of 76 accuracy :  0.8884  class accuracy :  0.12306540189715427  car_class_accuracy :  0.12306540189715427
saved prediction of 77 accuracy :  0.90175  class accuracy :  0.11688609044075557  car_class_accuracy :  0.11688609044075557
saved prediction of 78 accuracy :  0.88925  class accuracy :  0.10909090909090909  car_class_accuracy :  0.10909090909090909
saved prediction of 79 accuracy :  0.96115  class accuracy :  0.09579002079002079  car_class_accuracy :  0.09579002079002079
saved prediction of 80 accuracy :  0.9445  class accuracy :  0.15042016806722688  car_class_accuracy :  0.15042016806722688
saved prediction of 81 accuracy :  0.8956  class accuracy :  0.1557294295810197  car_class_accuracy :  0.1557294295810197
saved prediction of 82 accuracy :  0.98365  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 83 accuracy :  0.88665  class accuracy :  0.13375074537865234  car_class_accuracy :  0.13375074537865234
saved prediction of 84 accuracy :  0.97715  class accuracy :  0.095  car_class_accuracy :  0.095
saved prediction of 85 accuracy :  0.83305  class accuracy :  0.23958333333333334  car_class_accuracy :  0.23958333333333334
saved prediction of 86 accuracy :  0.8164  class accuracy :  0.21094650205761317  car_class_accuracy :  0.21094650205761317
saved prediction of 87 accuracy :  0.92345  class accuracy :  0.10861209964412813  car_class_accuracy :  0.10861209964412813
saved prediction of 88 accuracy :  0.93445  class accuracy :  0.09626352015732546  car_class_accuracy :  0.09626352015732546
saved prediction of 89 accuracy :  0.90635  class accuracy :  0.1710467706013363  car_class_accuracy :  0.1710467706013363
saved prediction of 90 accuracy :  0.92805  class accuracy :  0.13617021276595745  car_class_accuracy :  0.13617021276595745
saved prediction of 91 accuracy :  0.92955  class accuracy :  0.12768802228412257  car_class_accuracy :  0.12768802228412257
saved prediction of 92 accuracy :  0.97485  class accuracy :  0.056424581005586595  car_class_accuracy :  0.056424581005586595
saved prediction of 93 accuracy :  0.88635  class accuracy :  0.12049835448989185  car_class_accuracy :  0.12049835448989185
saved prediction of 94 accuracy :  0.8984  class accuracy :  0.11583098591549297  car_class_accuracy :  0.11583098591549297
saved prediction of 95 accuracy :  0.8869  class accuracy :  0.18666666666666668  car_class_accuracy :  0.18666666666666668
saved prediction of 96 accuracy :  0.95955  class accuracy :  0.09787066246056783  car_class_accuracy :  0.09787066246056783
saved prediction of 97 accuracy :  0.9485  class accuracy :  0.12341597796143251  car_class_accuracy :  0.12341597796143251
saved prediction of 98 accuracy :  0.8829  class accuracy :  0.1665174574753805  car_class_accuracy :  0.1665174574753805
saved prediction of 99 accuracy :  0.98405  class accuracy :  0.0  car_class_accuracy :  0.0
Iter :  20 Batch :  0   Loss :  0.42786884  Accuracy :  91.74  Class Accuracy :  16.34385201305767  Car class accuracy  16.34385201305767/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  20 Batch :  1   Loss :  0.58540666  Accuracy :  89.075  Class Accuracy :  16.16883116883117  Car class accuracy  16.16883116883117
Iter :  20 Batch :  2   Loss :  0.23587959  Accuracy :  97.11  Class Accuracy :  10.423280423280424  Car class accuracy  10.423280423280424
Iter :  20 Batch :  3   Loss :  0.33595324  Accuracy :  91.27499999999999  Class Accuracy :  16.911764705882355  Car class accuracy  16.911764705882355
Iter :  20 Batch :  4   Loss :  0.43251747  Accuracy :  87.6  Class Accuracy :  17.142857142857142  Car class accuracy  17.142857142857142
Iter :  20 Batch :  5   Loss :  0.860501  Accuracy :  95.82000000000001  Class Accuracy :  8.487046632124352  Car class accuracy  8.487046632124352
Iter :  20 Batch :  6   Loss :  0.27863452  Accuracy :  96.53500000000001  Class Accuracy :  11.329787234042554  Car class accuracy  11.329787234042554
Iter :  20 Batch :  7   Loss :  0.5960072  Accuracy :  92.315  Class Accuracy :  10.444444444444445  Car class accuracy  10.444444444444445
Iter :  20 Batch :  8   Loss :  0.6966054  Accuracy :  93.965  Class Accuracy :  11.297774044519109  Car class accuracy  11.297774044519109
Iter :  20 Batch :  9   Loss :  0.7553526  Accuracy :  87.515  Class Accuracy :  14.484304932735427  Car class accuracy  14.484304932735427
Iter :  20 Batch :  10   Loss :  0.20290244  Accuracy :  98.14500000000001  Class Accuracy :  13.398692810457517  Car class accuracy  13.398692810457517
Iter :  20 Batch :  11   Loss :  0.38496554  Accuracy :  89.17  Class Accuracy :  21.4375  Car class accuracy  21.4375
Iter :  20 Batch :  12   Loss :  0.336096  Accuracy :  95.545  Class Accuracy :  10.772442588726513  Car class accuracy  10.772442588726513
Iter :  20 Batch :  13   Loss :  0.4698139  Accuracy :  91.795  Class Accuracy :  12.754929577464788  Car class accuracy  12.754929577464788
Iter :  20 Batch :  14   Loss :  0.33386835  Accuracy :  92.47  Class Accuracy :  12.549019607843137  Car class accuracy  12.549019607843137
Iter :  20 Batch :  15   Loss :  0.56011033  Accuracy :  90.575  Class Accuracy :  13.429172510518933  Car class accuracy  13.429172510518933
Iter :  20 Batch :  16   Loss :  0.22604874  Accuracy :  95.555  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 21 loss : 0.6419918 Accuracy: 88.15547752808989 Class Accuracy : 16.066299530245626
Iter :  21 Batch :  0   Loss :  0.40944752  Accuracy :  94.045  Class Accuracy :  13.16508937960042  Car class accuracy  13.16508937960042
Iter :  21 Batch :  1   Loss :  0.4802065  Accuracy :  91.915  Class Accuracy :  17.346041055718477  Car class accuracy  17.346041055718477
Iter :  21 Batch :  2   Loss :  0.24248016  Accuracy :  94.735  Class Accuracy :  14.416243654822336  Car class accuracy  14.416243654822336
Iter :  21 Batch :  3   Loss :  0.3429831  Accuracy :  91.815  Class Accuracy :  17.916666666666668  Car class accuracy  17.916666666666668
Iter :  21 Batch :  4   Loss :  0.3045841  Accuracy :  92.34  Class Accuracy :  14.736842105263156  Car class accuracy  14.736842105263156
Iter :  21 Batch :  5   Loss :  0.7050916  Accuracy :  96.14  Class Accuracy :  8.892380204241949  Car class accuracy  8.892380204241949
Iter :  21 Batch :  6   Loss :  0.2466957  Accuracy :  95.93  Class Accuracy :  15.7  Car class accuracy  15.7
Iter :  21 Batch :  7   Loss :  0.4637657  Accuracy :  93.05  Class Accuracy :  11.289370078740157  Car class accuracy  11.289370078740157
Iter :  21 Batch :  8   Loss :  0.93201154  Accuracy :  91.64999999999999  Class Accuracy :  11.691876750700281  Car class accuracy  11.691876750700281
Iter :  21 Batch :  9   Loss :  0.51476485  Accuracy :  89.34  Class Accuracy :  14.012797074954294  Car class accuracy  14.012797074954294
Iter :  21 Batch :  10   Loss :  0.16546857  Accuracy :  98.385  Class Accuracy :  10.508474576271187  Car class accuracy  10.508474576271187
Iter :  21 Batch :  11   Loss :  0.3391065  Accuracy :  91.145  Class Accuracy :  19.861111111111114  Car class accuracy  19.861111111111114
Iter :  21 Batch :  12   Loss :  0.59980154  Accuracy :  84.54  Class Accuracy :  23.2421875  Car class accuracy  23.2421875
Iter :  21 Batch :  13   Loss :  0.681741  Accuracy :  90.81  Class Accuracy :  12.259641499185225  Car class accuracy  12.259641499185225
Iter :  21 Batch :  14   Loss :  0.38137168  Accuracy :  90.365  Class Accuracy :  16.82819383259912  Car class accuracy  16.82819383259912
Iter :  21 Batch :  15   Loss :  0.75555134  Accuracy :  92.13  Class Accuracy :  9.397944199706314  Car class accuracy  9.397944199706314
Iter :  21 Batch :  16   Loss :  0.22041221  Accuracy :  95.96000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 22 loss : 0.63360465 Accuracy: 88.35829758713137 Class Accuracy : 15.954068344388801
Iter :  22 Batch :  0   Loss :  0.48742196  Accuracy :  90.725  Class Accuracy :  13.505933117583604  Car class accuracy  13.505933117583604
Iter :  22 Batch :  1   Loss :  0.46431553  Accuracy :  92.415  Class Accuracy :  15.396363636363636  Car class accuracy  15.396363636363636
Iter :  22 Batch :  2   Loss :  0.17045921  Accuracy :  97.625  Class Accuracy :  12.052631578947368  Car class accuracy  12.052631578947368
Iter :  22 Batch :  3   Loss :  0.30823922  Accuracy :  93.88499999999999  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  22 Batch :  4   Loss :  0.38447022  Accuracy :  90.53  Class Accuracy :  16.875  Car class accuracy  16.875
Iter :  22 Batch :  5   Loss :  0.65357566  Accuracy :  96.52  Class Accuracy :  9.381124290871583  Car class accuracy  9.381124290871583
Iter :  22 Batch :  6   Loss :  0.25431004  Accuracy :  97.725  Class Accuracy :  10.11049723756906  Car class accuracy  10.11049723756906
Iter :  22 Batch :  7   Loss :  0.560613  Accuracy :  94.94  Class Accuracy :  9.196374622356496  Car class accuracy  9.196374622356496
Iter :  22 Batch :  8   Loss :  0.636168  Accuracy :  93.19  Class Accuracy :  12.70152505446623  Car class accuracy  12.70152505446623
Iter :  22 Batch :  9   Loss :  0.5553092  Accuracy :  91.31  Class Accuracy :  12.561983471074381  Car class accuracy  12.561983471074381
Iter :  22 Batch :  10   Loss :  0.21540542  Accuracy :  96.17999999999999  Class Accuracy :  14.48979591836735  Car class accuracy  14.48979591836735
Iter :  22 Batch :  11   Loss :  0.2965602  Accuracy :  93.89  Class Accuracy :  15.571428571428573  Car class accuracy  15.571428571428573
Iter :  22 Batch :  12   Loss :  0.3873186  Accuracy :  91.115  Class Accuracy :  16.623376623376622  Car class accuracy  16.623376623376622
Iter :  22 Batch :  13   Loss :  0.4621052  Accuracy :  92.745  Class Accuracy :  12.903402854006588  Car class accuracy  12.903402854006588
Iter :  22 Batch :  14   Loss :  0.29434386  Accuracy :  93.49  Class Accuracy :  14.257028112449799  Car class accuracy  14.257028112449799
Iter :  22 Batch :  15   Loss :  0.60341555  Accuracy :  92.435  Class Accuracy :  11.638907395069953  Car class accuracy  11.638907395069953
Iter :  22 Batch :  16   Loss :  0.1591178  Accuracy :  97.59  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 23 loss : 0.62366074 Accuracy: 88.59988461538462 Class Accuracy : 15.802904781899885
Iter :  23 Batch :  0   Loss :  0.47238374  Accuracy :  93.94  Class Accuracy :  12.033023735810113  Car class accuracy  12.033023735810113
Iter :  23 Batch :  1   Loss :  0.40700415  Accuracy :  94.585  Class Accuracy :  14.107274063188832  Car class accuracy  14.107274063188832
Iter :  23 Batch :  2   Loss :  0.17742068  Accuracy :  97.7  Class Accuracy :  10.208333333333334  Car class accuracy  10.208333333333334
Iter :  23 Batch :  3   Loss :  0.24279942  Accuracy :  96.045  Class Accuracy :  13.904109589041097  Car class accuracy  13.904109589041097
Iter :  23 Batch :  4   Loss :  0.33518866  Accuracy :  91.51  Class Accuracy :  11.428571428571429  Car class accuracy  11.428571428571429
Iter :  23 Batch :  5   Loss :  0.5288011  Accuracy :  96.475  Class Accuracy :  8.7532981530343  Car class accuracy  8.7532981530343
Iter :  23 Batch :  6   Loss :  0.2779768  Accuracy :  97.435  Class Accuracy :  7.431693989071039  Car class accuracy  7.431693989071039
Iter :  23 Batch :  7   Loss :  0.40646166  Accuracy :  92.475  Class Accuracy :  13.45747982619491  Car class accuracy  13.45747982619491
Iter :  23 Batch :  8   Loss :  0.8727457  Accuracy :  89.905  Class Accuracy :  13.775910364145657  Car class accuracy  13.775910364145657
Iter :  23 Batch :  9   Loss :  0.55550677  Accuracy :  90.735  Class Accuracy :  13.175614194722476  Car class accuracy  13.175614194722476
Iter :  23 Batch :  10   Loss :  0.1830201  Accuracy :  98.215  Class Accuracy :  11.515151515151516  Car class accuracy  11.515151515151516
Iter :  23 Batch :  11   Loss :  0.33451363  Accuracy :  92.765  Class Accuracy :  12.621951219512194  Car class accuracy  12.621951219512194
Iter :  23 Batch :  12   Loss :  0.2912172  Accuracy :  94.685  Class Accuracy :  15.165289256198347  Car class accuracy  15.165289256198347
Iter :  23 Batch :  13   Loss :  0.554775  Accuracy :  92.0  Class Accuracy :  12.630985915492959  Car class accuracy  12.630985915492959
Iter :  23 Batch :  14   Loss :  0.26522285  Accuracy :  95.265  Class Accuracy :  14.177777777777777  Car class accuracy  14.177777777777777
Iter :  23 Batch :  15   Loss :  0.73871964  Accuracy :  92.81  Class Accuracy :  9.845288326300986  Car class accuracy  9.845288326300986
Iter :  23 Batch :  16   Loss :  0.15483043  Accuracy :  97.485  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 24 loss : 0.6143153 Accuracy: 88.84025798525796 Class Accuracy : 15.620060485573715
Iter :  24 Batch :  0   Loss :  0.4679661  Accuracy :  90.985  Class Accuracy :  15.251572327044025  Car class accuracy  15.251572327044025
Iter :  24 Batch :  1   Loss :  0.49295586  Accuracy :  95.005  Class Accuracy :  12.737146994931209  Car class accuracy  12.737146994931209
Iter :  24 Batch :  2   Loss :  0.15420638  Accuracy :  98.44000000000001  Class Accuracy :  8.176470588235293  Car class accuracy  8.176470588235293
Iter :  24 Batch :  3   Loss :  0.2665311  Accuracy :  95.26  Class Accuracy :  12.763157894736842  Car class accuracy  12.763157894736842
Iter :  24 Batch :  4   Loss :  0.2936774  Accuracy :  93.88499999999999  Class Accuracy :  5.384615384615384  Car class accuracy  5.384615384615384
Iter :  24 Batch :  5   Loss :  0.49518964  Accuracy :  96.295  Class Accuracy :  9.272060748887142  Car class accuracy  9.272060748887142
Iter :  24 Batch :  6   Loss :  0.3038576  Accuracy :  98.345  Class Accuracy :  4.427083333333333  Car class accuracy  4.427083333333333
Iter :  24 Batch :  7   Loss :  0.44783026  Accuracy :  94.045  Class Accuracy :  10.743016759776536  Car class accuracy  10.743016759776536
Iter :  24 Batch :  8   Loss :  1.1948861  Accuracy :  92.475  Class Accuracy :  5.713032031592804  Car class accuracy  5.713032031592804
Iter :  24 Batch :  9   Loss :  0.5685583  Accuracy :  87.68  Class Accuracy :  15.468607825295724  Car class accuracy  15.468607825295724
Iter :  24 Batch :  10   Loss :  0.25187624  Accuracy :  96.585  Class Accuracy :  12.426470588235293  Car class accuracy  12.426470588235293
Iter :  24 Batch :  11   Loss :  0.6679158  Accuracy :  80.125  Class Accuracy :  33.333333333333336  Car class accuracy  33.333333333333336
Iter :  24 Batch :  12   Loss :  0.7073895  Accuracy :  81.825  Class Accuracy :  24.21875  Car class accuracy  24.21875
Iter :  24 Batch :  13   Loss :  0.68870866  Accuracy :  86.19  Class Accuracy :  16.639163916391638  Car class accuracy  16.639163916391638
Iter :  24 Batch :  14   Loss :  0.5003339  Accuracy :  87.41  Class Accuracy :  22.93617021276596  Car class accuracy  22.93617021276596
Iter :  24 Batch :  15   Loss :  0.7687074  Accuracy :  85.155  Class Accuracy :  15.81379772270596  Car class accuracy  15.81379772270596
Iter :  24 Batch :  16   Loss :  0.52180153  Accuracy :  85.475  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 25 loss : 0.61042136 Accuracy: 88.92255896226415 Class Accuracy : 15.525162894552789
Iter :  25 Batch :  0   Loss :  0.51078856  Accuracy :  88.94  Class Accuracy :  17.09437963944857  Car class accuracy  17.09437963944857
Iter :  25 Batch :  1   Loss :  0.66038936  Accuracy :  84.515  Class Accuracy :  22.46696035242291  Car class accuracy  22.46696035242291
Iter :  25 Batch :  2   Loss :  0.334856  Accuracy :  89.345  Class Accuracy :  19.444444444444446  Car class accuracy  19.444444444444446
Iter :  25 Batch :  3   Loss :  0.47337964  Accuracy :  85.44500000000001  Class Accuracy :  22.587412587412587  Car class accuracy  22.587412587412587
Iter :  25 Batch :  4   Loss :  0.42746454  Accuracy :  85.235  Class Accuracy :  16.25  Car class accuracy  16.25
Iter :  25 Batch :  5   Loss :  0.64367175  Accuracy :  95.72500000000001  Class Accuracy :  9.339449541284402  Car class accuracy  9.339449541284402
Iter :  25 Batch :  6   Loss :  0.23813964  Accuracy :  96.285  Class Accuracy :  9.84924623115578  Car class accuracy  9.84924623115578
Iter :  25 Batch :  7   Loss :  0.7427234  Accuracy :  90.14  Class Accuracy :  12.175168431183831  Car class accuracy  12.175168431183831
Iter :  25 Batch :  8   Loss :  0.7289265  Accuracy :  93.41000000000001  Class Accuracy :  11.391076115485562  Car class accuracy  11.391076115485562
Iter :  25 Batch :  9   Loss :  0.6666162  Accuracy :  87.83  Class Accuracy :  14.512670565302145  Car class accuracy  14.512670565302145
Iter :  25 Batch :  10   Loss :  0.18934302  Accuracy :  97.275  Class Accuracy :  11.007194244604317  Car class accuracy  11.007194244604317
Iter :  25 Batch :  11   Loss :  0.34580392  Accuracy :  90.505  Class Accuracy :  18.54014598540146  Car class accuracy  18.54014598540146
Iter :  25 Batch :  12   Loss :  0.49053174  Accuracy :  85.18  Class Accuracy :  17.473684210526315  Car class accuracy  17.473684210526315
Iter :  25 Batch :  13   Loss :  0.53603184  Accuracy :  91.205  Class Accuracy :  14.611708482676224  Car class accuracy  14.611708482676224
Iter :  25 Batch :  14   Loss :  0.25927895  Accuracy :  94.8  Class Accuracy :  13.864541832669325  Car class accuracy  13.864541832669325
Iter :  25 Batch :  15   Loss :  0.65237206  Accuracy :  90.71000000000001  Class Accuracy :  11.664335664335663  Car class accuracy  11.664335664335663
Iter :  25 Batch :  16   Loss :  0.28780138  Accuracy :  91.875  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 26 loss : 0.6054576 Accuracy: 88.9831859410431 Class Accuracy : 15.476057790518675
Iter :  26 Batch :  0   Loss :  0.41121015  Accuracy :  91.78500000000001  Class Accuracy :  13.718487394957984  Car class accuracy  13.718487394957984
Iter :  26 Batch :  1   Loss :  0.50407565  Accuracy :  89.575  Class Accuracy :  19.03676470588235  Car class accuracy  19.03676470588235
Iter :  26 Batch :  2   Loss :  0.22680156  Accuracy :  95.48  Class Accuracy :  13.489583333333332  Car class accuracy  13.489583333333332
Iter :  26 Batch :  3   Loss :  0.34213057  Accuracy :  91.405  Class Accuracy :  16.573426573426573  Car class accuracy  16.573426573426573
Iter :  26 Batch :  4   Loss :  0.42204657  Accuracy :  85.68  Class Accuracy :  22.666666666666664  Car class accuracy  22.666666666666664
Iter :  26 Batch :  5   Loss :  0.6511083  Accuracy :  96.60499999999999  Class Accuracy :  10.166358595194085  Car class accuracy  10.166358595194085
Iter :  26 Batch :  6   Loss :  0.27444565  Accuracy :  94.49499999999999  Class Accuracy :  12.694300518134716  Car class accuracy  12.694300518134716
Iter :  26 Batch :  7   Loss :  0.47414264  Accuracy :  93.0  Class Accuracy :  12.216699801192842  Car class accuracy  12.216699801192842
Iter :  26 Batch :  8   Loss :  0.53814024  Accuracy :  93.025  Class Accuracy :  12.400455062571103  Car class accuracy  12.400455062571103
Iter :  26 Batch :  9   Loss :  0.6137784  Accuracy :  86.47500000000001  Class Accuracy :  17.247141600703607  Car class accuracy  17.247141600703607
Iter :  26 Batch :  10   Loss :  0.19239783  Accuracy :  96.435  Class Accuracy :  12.846715328467154  Car class accuracy  12.846715328467154
Iter :  26 Batch :  11   Loss :  0.27140385  Accuracy :  92.58  Class Accuracy :  15.840000000000002  Car class accuracy  15.840000000000002
Iter :  26 Batch :  12   Loss :  0.33622625  Accuracy :  89.235  Class Accuracy :  17.435344827586206  Car class accuracy  17.435344827586206
Iter :  26 Batch :  13   Loss :  0.53825974  Accuracy :  94.175  Class Accuracy :  10.895774647887324  Car class accuracy  10.895774647887324
Iter :  26 Batch :  14   Loss :  0.181276  Accuracy :  97.03  Class Accuracy :  12.152466367713004  Car class accuracy  12.152466367713004
Iter :  26 Batch :  15   Loss :  0.4883633  Accuracy :  93.28999999999999  Class Accuracy :  10.907726931732933  Car class accuracy  10.907726931732933
Iter :  26 Batch :  16   Loss :  0.19848765  Accuracy :  96.52  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 27 loss : 0.59753513 Accuracy: 89.12308951965065 Class Accuracy : 15.404430999943637
Iter :  27 Batch :  0   Loss :  0.48020726  Accuracy :  94.1  Class Accuracy :  9.033018867924527  Car class accuracy  9.033018867924527
Iter :  27 Batch :  1   Loss :  0.54366064  Accuracy :  94.125  Class Accuracy :  11.200000000000001  Car class accuracy  11.200000000000001
Iter :  27 Batch :  2   Loss :  0.13425842  Accuracy :  98.475  Class Accuracy :  10.147783251231528  Car class accuracy  10.147783251231528
Iter :  27 Batch :  3   Loss :  0.3208138  Accuracy :  92.285  Class Accuracy :  14.113475177304963  Car class accuracy  14.113475177304963
Iter :  27 Batch :  4   Loss :  0.40115586  Accuracy :  86.935  Class Accuracy :  25.555555555555554  Car class accuracy  25.555555555555554
Iter :  27 Batch :  5   Loss :  0.44061464  Accuracy :  96.58  Class Accuracy :  9.376077214753535  Car class accuracy  9.376077214753535
Iter :  27 Batch :  6   Loss :  0.28490123  Accuracy :  94.375  Class Accuracy :  15.481927710843374  Car class accuracy  15.481927710843374
Iter :  27 Batch :  7   Loss :  0.4865943  Accuracy :  89.765  Class Accuracy :  14.759592034968433  Car class accuracy  14.759592034968433
Iter :  27 Batch :  8   Loss :  0.47159442  Accuracy :  94.145  Class Accuracy :  13.467261904761903  Car class accuracy  13.467261904761903
Iter :  27 Batch :  9   Loss :  0.71234363  Accuracy :  87.715  Class Accuracy :  14.78809738503156  Car class accuracy  14.78809738503156
Iter :  27 Batch :  10   Loss :  0.14711939  Accuracy :  97.725  Class Accuracy :  10.857142857142858  Car class accuracy  10.857142857142858
Iter :  27 Batch :  11   Loss :  0.35502055  Accuracy :  90.72  Class Accuracy :  15.156249999999998  Car class accuracy  15.156249999999998
Iter :  27 Batch :  12   Loss :  0.5613785  Accuracy :  81.16  Class Accuracy :  24.84536082474227  Car class accuracy  24.84536082474227
Iter :  27 Batch :  13   Loss :  0.4775223  Accuracy :  90.995  Class Accuracy :  14.01900503074343  Car class accuracy  14.01900503074343
Iter :  27 Batch :  14   Loss :  0.22551814  Accuracy :  94.72  Class Accuracy :  15.708812260536398  Car class accuracy  15.708812260536398
Iter :  27 Batch :  15   Loss :  0.5807999  Accuracy :  93.63  Class Accuracy :  10.245566166439291  Car class accuracy  10.245566166439291
Iter :  27 Batch :  16   Loss :  0.18680672  Accuracy :  96.475  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 28 loss : 0.5904871 Accuracy: 89.24694736842106 Class Accuracy : 15.334703840455084
Iter :  28 Batch :  0   Loss :  0.3299602  Accuracy :  92.67  Class Accuracy :  16.0167714884696  Car class accuracy  16.0167714884696
Iter :  28 Batch :  1   Loss :  0.39461502  Accuracy :  92.82000000000001  Class Accuracy :  16.816450875856816  Car class accuracy  16.816450875856816
Iter :  28 Batch :  2   Loss :  0.17922878  Accuracy :  97.82  Class Accuracy :  10.732984293193718  Car class accuracy  10.732984293193718
Iter :  28 Batch :  3   Loss :  0.22471833  Accuracy :  95.825  Class Accuracy :  10.939597315436242  Car class accuracy  10.939597315436242
Iter :  28 Batch :  4   Loss :  0.3961162  Accuracy :  84.99  Class Accuracy :  23.57142857142857  Car class accuracy  23.57142857142857
Iter :  28 Batch :  5   Loss :  0.7474833  Accuracy :  93.44  Class Accuracy :  10.848660010509722  Car class accuracy  10.848660010509722
Iter :  28 Batch :  6   Loss :  0.20720251  Accuracy :  95.515  Class Accuracy :  12.631578947368421  Car class accuracy  12.631578947368421
Iter :  28 Batch :  7   Loss :  0.36008054  Accuracy :  93.805  Class Accuracy :  12.420711974110032  Car class accuracy  12.420711974110032
Iter :  28 Batch :  8   Loss :  0.67366767  Accuracy :  93.825  Class Accuracy :  11.759205143191116  Car class accuracy  11.759205143191116
Iter :  28 Batch :  9   Loss :  0.47829235  Accuracy :  89.52  Class Accuracy :  15.886454183266933  Car class accuracy  15.886454183266933
Iter :  28 Batch :  10   Loss :  0.1344029  Accuracy :  98.215  Class Accuracy :  9.850746268656716  Car class accuracy  9.850746268656716
Iter :  28 Batch :  11   Loss :  0.2568  Accuracy :  94.47  Class Accuracy :  13.453237410071944  Car class accuracy  13.453237410071944
Iter :  28 Batch :  12   Loss :  0.3923944  Accuracy :  86.45  Class Accuracy :  20.622317596566525  Car class accuracy  20.622317596566525
Iter :  28 Batch :  13   Loss :  0.4150461  Accuracy :  94.705  Class Accuracy :  11.00229095074456  Car class accuracy  11.00229095074456
Iter :  28 Batch :  14   Loss :  0.19713679  Accuracy :  95.045  Class Accuracy :  13.745318352059927  Car class accuracy  13.745318352059927
Iter :  28 Batch :  15   Loss :  0.56962425  Accuracy :  91.67999999999999  Class Accuracy :  10.754847645429361  Car class accuracy  10.754847645429361
Iter :  28 Batch :  16   Loss :  0.15087114  Accuracy :  96.65  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 29 loss : 0.5824981 Accuracy: 89.3897256097561 Class Accuracy : 15.254140091956353
Iter :  29 Batch :  0   Loss :  0.5734795  Accuracy :  93.24  Class Accuracy :  10.343392299687826  Car class accuracy  10.343392299687826
Iter :  29 Batch :  1   Loss :  0.5173895  Accuracy :  94.22  Class Accuracy :  14.208658623136976  Car class accuracy  14.208658623136976
Iter :  29 Batch :  2   Loss :  0.13890924  Accuracy :  97.015  Class Accuracy :  13.769633507853401  Car class accuracy  13.769633507853401
Iter :  29 Batch :  3   Loss :  0.28159332  Accuracy :  94.28999999999999  Class Accuracy :  13.561643835616438  Car class accuracy  13.561643835616438
Iter :  29 Batch :  4   Loss :  0.40578634  Accuracy :  87.435  Class Accuracy :  18.571428571428573  Car class accuracy  18.571428571428573
Iter :  29 Batch :  5   Loss :  0.51541317  Accuracy :  94.97  Class Accuracy :  10.325806451612902  Car class accuracy  10.325806451612902
Iter :  29 Batch :  6   Loss :  0.2841418  Accuracy :  93.915  Class Accuracy :  14.897959183673471  Car class accuracy  14.897959183673471
Iter :  29 Batch :  7   Loss :  0.4582293  Accuracy :  89.835  Class Accuracy :  14.664246823956445  Car class accuracy  14.664246823956445
Iter :  29 Batch :  8   Loss :  0.58926094  Accuracy :  90.89500000000001  Class Accuracy :  14.27159432746025  Car class accuracy  14.27159432746025
Iter :  29 Batch :  9   Loss :  0.6166996  Accuracy :  85.705  Class Accuracy :  17.58347978910369  Car class accuracy  17.58347978910369
Iter :  29 Batch :  10   Loss :  0.15233064  Accuracy :  97.94500000000001  Class Accuracy :  10.479452054794521  Car class accuracy  10.479452054794521
Iter :  29 Batch :  11   Loss :  0.25215688  Accuracy :  96.2  Class Accuracy :  9.844961240310077  Car class accuracy  9.844961240310077
Iter :  29 Batch :  12   Loss :  0.34903574  Accuracy :  90.46  Class Accuracy :  16.87772925764192  Car class accuracy  16.87772925764192
Iter :  29 Batch :  13   Loss :  0.48394638  Accuracy :  91.655  Class Accuracy :  13.204244031830239  Car class accuracy  13.204244031830239
Iter :  29 Batch :  14   Loss :  0.2063227  Accuracy :  97.63  Class Accuracy :  10.374531835205994  Car class accuracy  10.374531835205994
Iter :  29 Batch :  15   Loss :  0.8030262  Accuracy :  93.28999999999999  Class Accuracy :  7.365145228215768  Car class accuracy  7.365145228215768
Iter :  29 Batch :  16   Loss :  0.10686673  Accuracy :  99.31  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 30 loss : 0.5762743 Accuracy: 89.52407662082516 Class Accuracy : 15.157919120440186
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__30_0.ckpt/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

saved prediction of 0 accuracy :  0.98815  class accuracy :  0.09548872180451128  car_class_accuracy :  0.09548872180451128
saved prediction of 1 accuracy :  0.9636  class accuracy :  0.11241830065359477  car_class_accuracy :  0.11241830065359477
saved prediction of 2 accuracy :  0.9473  class accuracy :  0.10586642599277978  car_class_accuracy :  0.10586642599277978
saved prediction of 3 accuracy :  0.9527  class accuracy :  0.0726027397260274  car_class_accuracy :  0.0726027397260274
saved prediction of 4 accuracy :  0.95105  class accuracy :  0.043222222222222224  car_class_accuracy :  0.043222222222222224
saved prediction of 5 accuracy :  0.93365  class accuracy :  0.07443820224719101  car_class_accuracy :  0.07443820224719101
saved prediction of 6 accuracy :  0.9587  class accuracy :  0.121875  car_class_accuracy :  0.121875
saved prediction of 7 accuracy :  0.92695  class accuracy :  0.07847533632286996  car_class_accuracy :  0.07847533632286996
saved prediction of 8 accuracy :  0.98935  class accuracy :  0.03529411764705882  car_class_accuracy :  0.03529411764705882
saved prediction of 9 accuracy :  0.93735  class accuracy :  0.09714566929133858  car_class_accuracy :  0.09714566929133858
saved prediction of 10 accuracy :  0.9302  class accuracy :  0.08557213930348259  car_class_accuracy :  0.08557213930348259
saved prediction of 11 accuracy :  0.9814  class accuracy :  0.06999999999999999  car_class_accuracy :  0.06999999999999999
saved prediction of 12 accuracy :  0.9543  class accuracy :  0.08270423991726991  car_class_accuracy :  0.08270423991726991
saved prediction of 13 accuracy :  0.95815  class accuracy :  0.11861702127659575  car_class_accuracy :  0.11861702127659575
saved prediction of 14 accuracy :  0.9034  class accuracy :  0.04868943606036537  car_class_accuracy :  0.04868943606036537
saved prediction of 15 accuracy :  0.9902  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 16 accuracy :  0.95665  class accuracy :  0.08556975505857295  car_class_accuracy :  0.08556975505857295
saved prediction of 17 accuracy :  0.98685  class accuracy :  0.07092198581560284  car_class_accuracy :  0.07092198581560284
saved prediction of 18 accuracy :  0.9641  class accuracy :  0.11775147928994083  car_class_accuracy :  0.11775147928994083
saved prediction of 19 accuracy :  0.9493  class accuracy :  0.10479204339963835  car_class_accuracy :  0.10479204339963835
saved prediction of 20 accuracy :  0.95115  class accuracy :  0.07163120567375887  car_class_accuracy :  0.07163120567375887
saved prediction of 21 accuracy :  0.94765  class accuracy :  0.04701789264413519  car_class_accuracy :  0.04701789264413519
saved prediction of 22 accuracy :  0.92705  class accuracy :  0.08994787788533135  car_class_accuracy :  0.08994787788533135
saved prediction of 23 accuracy :  0.9745  class accuracy :  0.11017316017316017  car_class_accuracy :  0.11017316017316017
saved prediction of 24 accuracy :  0.92535  class accuracy :  0.0841168996188056  car_class_accuracy :  0.0841168996188056
saved prediction of 25 accuracy :  0.9891  class accuracy :  0.036702127659574466  car_class_accuracy :  0.036702127659574466
saved prediction of 26 accuracy :  0.93495  class accuracy :  0.09325626204238921  car_class_accuracy :  0.09325626204238921
saved prediction of 27 accuracy :  0.9351  class accuracy :  0.08302207130730051  car_class_accuracy :  0.08302207130730051
saved prediction of 28 accuracy :  0.982  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 29 accuracy :  0.9438  class accuracy :  0.0819797580844236  car_class_accuracy :  0.0819797580844236
saved prediction of 30 accuracy :  0.96185  class accuracy :  0.12289473684210525  car_class_accuracy :  0.12289473684210525
saved prediction of 31 accuracy :  0.88175  class accuracy :  0.04219387755102041  car_class_accuracy :  0.04219387755102041
saved prediction of 32 accuracy :  0.9892  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 33 accuracy :  0.9616  class accuracy :  0.09147694103911266  car_class_accuracy :  0.09147694103911266
saved prediction of 34 accuracy :  0.985  class accuracy :  0.0777027027027027  car_class_accuracy :  0.0777027027027027
saved prediction of 35 accuracy :  0.95935  class accuracy :  0.12307692307692308  car_class_accuracy :  0.12307692307692308
saved prediction of 36 accuracy :  0.94745  class accuracy :  0.10116279069767442  car_class_accuracy :  0.10116279069767442
saved prediction of 37 accuracy :  0.95775  class accuracy :  0.07501730103806228  car_class_accuracy :  0.07501730103806228
saved prediction of 38 accuracy :  0.9509  class accuracy :  0.04556025369978858  car_class_accuracy :  0.04556025369978858
saved prediction of 39 accuracy :  0.9344  class accuracy :  0.07336244541484717  car_class_accuracy :  0.07336244541484717
saved prediction of 40 accuracy :  0.96095  class accuracy :  0.11489795918367347  car_class_accuracy :  0.11489795918367347
saved prediction of 41 accuracy :  0.9205  class accuracy :  0.08765645230902028  car_class_accuracy :  0.08765645230902028
saved prediction of 42 accuracy :  0.98915  class accuracy :  0.0365  car_class_accuracy :  0.0365
saved prediction of 43 accuracy :  0.9357  class accuracy :  0.09539892315222712  car_class_accuracy :  0.09539892315222712
saved prediction of 44 accuracy :  0.9344  class accuracy :  0.08295520651541594  car_class_accuracy :  0.08295520651541594
saved prediction of 45 accuracy :  0.9808  class accuracy :  0.0625  car_class_accuracy :  0.0625
saved prediction of 46 accuracy :  0.9539  class accuracy :  0.08378378378378379  car_class_accuracy :  0.08378378378378379
saved prediction of 47 accuracy :  0.9653  class accuracy :  0.12219251336898396  car_class_accuracy :  0.12219251336898396
saved prediction of 48 accuracy :  0.88185  class accuracy :  0.03800607287449393  car_class_accuracy :  0.03800607287449393
saved prediction of 49 accuracy :  0.99045  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 50 accuracy :  0.96305  class accuracy :  0.09188405797101448  car_class_accuracy :  0.09188405797101448
saved prediction of 51 accuracy :  0.98565  class accuracy :  0.07903225806451612  car_class_accuracy :  0.07903225806451612
saved prediction of 52 accuracy :  0.95555  class accuracy :  0.1286624203821656  car_class_accuracy :  0.1286624203821656
saved prediction of 53 accuracy :  0.9483  class accuracy :  0.11019108280254777  car_class_accuracy :  0.11019108280254777
saved prediction of 54 accuracy :  0.95745  class accuracy :  0.07658270932607217  car_class_accuracy :  0.07658270932607217
saved prediction of 55 accuracy :  0.94975  class accuracy :  0.04334763948497854  car_class_accuracy :  0.04334763948497854
saved prediction of 56 accuracy :  0.9334  class accuracy :  0.07443661971830987  car_class_accuracy :  0.07443661971830987
saved prediction of 57 accuracy :  0.9533  class accuracy :  0.11236673773987207  car_class_accuracy :  0.11236673773987207
saved prediction of 58 accuracy :  0.9281  class accuracy :  0.07900396151669496  car_class_accuracy :  0.07900396151669496
saved prediction of 59 accuracy :  0.9883  class accuracy :  0.041237113402061855  car_class_accuracy :  0.041237113402061855
saved prediction of 60 accuracy :  0.93435  class accuracy :  0.09127740705433747  car_class_accuracy :  0.09127740705433747
saved prediction of 61 accuracy :  0.93165  class accuracy :  0.08251516822945394  car_class_accuracy :  0.08251516822945394
saved prediction of 62 accuracy :  0.9782  class accuracy :  0.0875  car_class_accuracy :  0.0875
saved prediction of 63 accuracy :  0.9514  class accuracy :  0.08468961919666144  car_class_accuracy :  0.08468961919666144
saved prediction of 64 accuracy :  0.96265  class accuracy :  0.1309782608695652  car_class_accuracy :  0.1309782608695652
saved prediction of 65 accuracy :  0.89925  class accuracy :  0.04033222591362126  car_class_accuracy :  0.04033222591362126
saved prediction of 66 accuracy :  0.98865  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 67 accuracy :  0.9638  class accuracy :  0.08720996038483306  car_class_accuracy :  0.08720996038483306
saved prediction of 68 accuracy :  0.9873  class accuracy :  0.07931034482758621  car_class_accuracy :  0.07931034482758621
saved prediction of 69 accuracy :  0.9599  class accuracy :  0.15  car_class_accuracy :  0.15
saved prediction of 70 accuracy :  0.93465  class accuracy :  0.1196078431372549  car_class_accuracy :  0.1196078431372549
saved prediction of 71 accuracy :  0.96065  class accuracy :  0.07642505277973258  car_class_accuracy :  0.07642505277973258
saved prediction of 72 accuracy :  0.94825  class accuracy :  0.0404040404040404  car_class_accuracy :  0.0404040404040404
saved prediction of 73 accuracy :  0.92665  class accuracy :  0.08673992673992674  car_class_accuracy :  0.08673992673992674
saved prediction of 74 accuracy :  0.95445  class accuracy :  0.11483050847457628  car_class_accuracy :  0.11483050847457628
saved prediction of 75 accuracy :  0.92215  class accuracy :  0.08611803823773898  car_class_accuracy :  0.08611803823773898
saved prediction of 76 accuracy :  0.9892  class accuracy :  0.03793103448275862  car_class_accuracy :  0.03793103448275862
saved prediction of 77 accuracy :  0.9448  class accuracy :  0.08777412280701755  car_class_accuracy :  0.08777412280701755
saved prediction of 78 accuracy :  0.93085  class accuracy :  0.08472606530160487  car_class_accuracy :  0.08472606530160487
saved prediction of 79 accuracy :  0.9813  class accuracy :  0.07727272727272727  car_class_accuracy :  0.07727272727272727
saved prediction of 80 accuracy :  0.9584  class accuracy :  0.08250503693754198  car_class_accuracy :  0.08250503693754198
saved prediction of 81 accuracy :  0.95945  class accuracy :  0.13041237113402063  car_class_accuracy :  0.13041237113402063
saved prediction of 82 accuracy :  0.90485  class accuracy :  0.04463087248322148  car_class_accuracy :  0.04463087248322148
saved prediction of 83 accuracy :  0.9907  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 84 accuracy :  0.9589  class accuracy :  0.08416666666666667  car_class_accuracy :  0.08416666666666667
saved prediction of 85 accuracy :  0.9864  class accuracy :  0.09448818897637795  car_class_accuracy :  0.09448818897637795
saved prediction of 86 accuracy :  0.96715  class accuracy :  0.1256578947368421  car_class_accuracy :  0.1256578947368421
saved prediction of 87 accuracy :  0.9477  class accuracy :  0.10213523131672597  car_class_accuracy :  0.10213523131672597
saved prediction of 88 accuracy :  0.957  class accuracy :  0.06948356807511738  car_class_accuracy :  0.06948356807511738
saved prediction of 89 accuracy :  0.94785  class accuracy :  0.05068783068783069  car_class_accuracy :  0.05068783068783069
saved prediction of 90 accuracy :  0.9261  class accuracy :  0.08966763005780347  car_class_accuracy :  0.08966763005780347
saved prediction of 91 accuracy :  0.9753  class accuracy :  0.1054585152838428  car_class_accuracy :  0.1054585152838428
saved prediction of 92 accuracy :  0.9221  class accuracy :  0.08569099062372605  car_class_accuracy :  0.08569099062372605
saved prediction of 93 accuracy :  0.9904  class accuracy :  0.04126984126984127  car_class_accuracy :  0.04126984126984127
saved prediction of 94 accuracy :  0.94035  class accuracy :  0.09658869395711502  car_class_accuracy :  0.09658869395711502
saved prediction of 95 accuracy :  0.93545  class accuracy :  0.08642611683848797  car_class_accuracy :  0.08642611683848797
saved prediction of 96 accuracy :  0.9769  class accuracy :  0.08125  car_class_accuracy :  0.08125
saved prediction of 97 accuracy :  0.95385  class accuracy :  0.0831573655103067  car_class_accuracy :  0.0831573655103067
saved prediction of 98 accuracy :  0.96075  class accuracy :  0.11769436997319034  car_class_accuracy :  0.11769436997319034
saved prediction of 99 accuracy :  0.8779  class accuracy :  0.038965693804403484  car_class_accuracy :  0.038965693804403484
Iter :  30 Batch :  0   Loss :  0.3414345  Accuracy :  95.025  Class Accuracy :  13.370221327967807  Car class accuracy  13.370221327967807
Iter :  30 Batch :  1   Loss :  0.4792311  Accuracy :  93.55499999999999  Class Accuracy :  12.923076923076923  Car class accuracy  12.923076923076923
Iter :  30 Batch :  2   Loss :  0.17719018  Accuracy :  98.44500000000001  Class Accuracy :  5.833333333333333  Car class accuracy  5.833333333333333
Iter :  30 Batch :  3   Loss :  0.19939151  Accuracy :  97.515  Class Accuracy :  8.333333333333334  Car class accuracy  8.333333333333334
Iter :  30 Batch :  4   Loss :  0.282004  Accuracy :  93.915  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  30 Batch :  5   Loss :  0.81023496  Accuracy :  94.525  Class Accuracy :  8.948582729070534  Car class accuracy  8.948582729070534
Iter :  30 Batch :  6   Loss :  0.37084278  Accuracy :  93.205  Class Accuracy :  14.374999999999998  Car class accuracy  14.374999999999998
Iter :  30 Batch :  7   Loss :  0.43949375  Accuracy :  93.135  Class Accuracy :  12.080777096114518  Car class accuracy  12.080777096114518
Iter :  30 Batch :  8   Loss :  0.6106969  Accuracy :  91.345  Class Accuracy :  15.337954939341419  Car class accuracy  15.337954939341419
Iter :  30 Batch :  9   Loss :  0.5417045  Accuracy :  88.74499999999999  Class Accuracy :  15.782250686184812  Car class accuracy  15.782250686184812
Iter :  30 Batch :  10   Loss :  0.16934109  Accuracy :  96.42500000000001  Class Accuracy :  12.26027397260274  Car class accuracy  12.26027397260274
Iter :  30 Batch :  11   Loss :  0.42311603  Accuracy :  86.67  Class Accuracy :  22.195121951219516  Car class accuracy  22.195121951219516
Iter :  30 Batch :  12   Loss :  0.39860386  Accuracy :  87.345  Class Accuracy :  22.03991130820399  Car class accuracy  22.03991130820399
Iter :  30 Batch :  13   Loss :  0.85682714  Accuracy :  91.11  Class Accuracy :  12.23952738990333  Car class accuracy  12.23952738990333
Iter :  30 Batch :  14   Loss :  0.41510502  Accuracy :  88.565  Class Accuracy :  19.04564315352697  Car class accuracy  19.04564315352697
Iter :  30 Batch :  15   Loss :  0.67453825  Accuracy :  84.0  Class Accuracy :  19.680333564975676  Car class accuracy  19.680333564975676
Iter :  30 Batch :  16   Loss :  0.24034639  Accuracy :  94.11500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 31 loss : 0.57177514 Accuracy: 89.61101711026615 Class Accuracy : 15.10106370217917
Iter :  31 Batch :  0   Loss :  0.42816424  Accuracy :  88.46000000000001  Class Accuracy :  17.955271565495206  Car class accuracy  17.955271565495206
Iter :  31 Batch :  1   Loss :  0.6364896  Accuracy :  83.965  Class Accuracy :  21.857246904588493  Car class accuracy  21.857246904588493
Iter :  31 Batch :  2   Loss :  0.14300911  Accuracy :  97.72  Class Accuracy :  10.15625  Car class accuracy  10.15625
Iter :  31 Batch :  3   Loss :  0.2653578  Accuracy :  94.94500000000001  Class Accuracy :  13.37748344370861  Car class accuracy  13.37748344370861
Iter :  31 Batch :  4   Loss :  0.36450982  Accuracy :  88.89  Class Accuracy :  19.28571428571429  Car class accuracy  19.28571428571429
Iter :  31 Batch :  5   Loss :  0.7829632  Accuracy :  95.065  Class Accuracy :  9.118548799182422  Car class accuracy  9.118548799182422
Iter :  31 Batch :  6   Loss :  0.35054874  Accuracy :  98.21  Class Accuracy :  6.345177664974619  Car class accuracy  6.345177664974619
Iter :  31 Batch :  7   Loss :  0.7120374  Accuracy :  94.085  Class Accuracy :  8.750607681088965  Car class accuracy  8.750607681088965
Iter :  31 Batch :  8   Loss :  0.5495879  Accuracy :  93.94500000000001  Class Accuracy :  11.965998256320837  Car class accuracy  11.965998256320837
Iter :  31 Batch :  9   Loss :  0.67851454  Accuracy :  93.58999999999999  Class Accuracy :  8.952929875120077  Car class accuracy  8.952929875120077
Iter :  31 Batch :  10   Loss :  0.22835626  Accuracy :  96.78  Class Accuracy :  11.510791366906474  Car class accuracy  11.510791366906474
Iter :  31 Batch :  11   Loss :  0.24332148  Accuracy :  96.575  Class Accuracy :  10.897435897435896  Car class accuracy  10.897435897435896
Iter :  31 Batch :  12   Loss :  0.40456107  Accuracy :  94.34  Class Accuracy :  12.5  Car class accuracy  12.5
Iter :  31 Batch :  13   Loss :  0.49409926  Accuracy :  92.12  Class Accuracy :  13.306277056277056  Car class accuracy  13.306277056277056
Iter :  31 Batch :  14   Loss :  0.39057055  Accuracy :  91.71000000000001  Class Accuracy :  17.877551020408163  Car class accuracy  17.877551020408163
Iter :  31 Batch :  15   Loss :  0.6153324  Accuracy :  90.72  Class Accuracy :  12.594850948509487  Car class accuracy  12.594850948509487
Iter :  31 Batch :  16   Loss :  0.17603408  Accuracy :  96.3  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 32 loss : 0.5676191 Accuracy: 89.72894106813997 Class Accuracy : 15.008492895233836
Iter :  32 Batch :  0   Loss :  0.47462705  Accuracy :  92.015  Class Accuracy :  14.752774974772958  Car class accuracy  14.752774974772958
Iter :  32 Batch :  1   Loss :  0.41864398  Accuracy :  92.405  Class Accuracy :  17.066761363636367  Car class accuracy  17.066761363636367
Iter :  32 Batch :  2   Loss :  0.19118965  Accuracy :  96.565  Class Accuracy :  10.274725274725274  Car class accuracy  10.274725274725274
Iter :  32 Batch :  3   Loss :  0.26977587  Accuracy :  94.375  Class Accuracy :  12.769230769230768  Car class accuracy  12.769230769230768
Iter :  32 Batch :  4   Loss :  0.35898545  Accuracy :  90.11  Class Accuracy :  27.500000000000004  Car class accuracy  27.500000000000004
Iter :  32 Batch :  5   Loss :  0.86904055  Accuracy :  96.28  Class Accuracy :  8.977213878819265  Car class accuracy  8.977213878819265
Iter :  32 Batch :  6   Loss :  0.23606957  Accuracy :  95.345  Class Accuracy :  15.185185185185185  Car class accuracy  15.185185185185185
Iter :  32 Batch :  7   Loss :  0.56555  Accuracy :  91.96  Class Accuracy :  11.478982874935133  Car class accuracy  11.478982874935133
Iter :  32 Batch :  8   Loss :  0.59731203  Accuracy :  94.365  Class Accuracy :  11.712499999999999  Car class accuracy  11.712499999999999
Iter :  32 Batch :  9   Loss :  0.53575826  Accuracy :  88.32  Class Accuracy :  15.113636363636365  Car class accuracy  15.113636363636365
Iter :  32 Batch :  10   Loss :  0.16975047  Accuracy :  98.79  Class Accuracy :  10.074074074074073  Car class accuracy  10.074074074074073
Iter :  32 Batch :  11   Loss :  0.28275314  Accuracy :  95.07  Class Accuracy :  13.666666666666666  Car class accuracy  13.666666666666666
Iter :  32 Batch :  12   Loss :  0.41134614  Accuracy :  91.55499999999999  Class Accuracy :  14.472573839662447  Car class accuracy  14.472573839662447
Iter :  32 Batch :  13   Loss :  0.4656419  Accuracy :  93.75  Class Accuracy :  11.810005621135469  Car class accuracy  11.810005621135469
Iter :  32 Batch :  14   Loss :  0.26398098  Accuracy :  97.46000000000001  Class Accuracy :  10.204081632653061  Car class accuracy  10.204081632653061
Iter :  32 Batch :  15   Loss :  0.51462764  Accuracy :  95.405  Class Accuracy :  8.453389830508474  Car class accuracy  8.453389830508474
Iter :  32 Batch :  16   Loss :  0.16846068  Accuracy :  98.015  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 33 loss : 0.56251913 Accuracy: 89.86535714285715 Class Accuracy : 14.93414900796717
Iter :  33 Batch :  0   Loss :  0.31586573  Accuracy :  95.355  Class Accuracy :  12.116788321167885  Car class accuracy  12.116788321167885
Iter :  33 Batch :  1   Loss :  1.2882463  Accuracy :  93.66  Class Accuracy :  7.6231884057971016  Car class accuracy  7.6231884057971016
Iter :  33 Batch :  2   Loss :  0.14495945  Accuracy :  98.895  Class Accuracy :  8.181818181818182  Car class accuracy  8.181818181818182
Iter :  33 Batch :  3   Loss :  0.40931943  Accuracy :  90.28  Class Accuracy :  20.962962962962962  Car class accuracy  20.962962962962962
Iter :  33 Batch :  4   Loss :  0.63139516  Accuracy :  82.26  Class Accuracy :  17.058823529411764  Car class accuracy  17.058823529411764
Iter :  33 Batch :  5   Loss :  0.48248085  Accuracy :  95.89  Class Accuracy :  9.057798891528106  Car class accuracy  9.057798891528106
Iter :  33 Batch :  6   Loss :  0.5926788  Accuracy :  88.675  Class Accuracy :  17.722772277227723  Car class accuracy  17.722772277227723
Iter :  33 Batch :  7   Loss :  1.203583  Accuracy :  84.155  Class Accuracy :  15.073696145124718  Car class accuracy  15.073696145124718
Iter :  33 Batch :  8   Loss :  0.8330072  Accuracy :  85.39999999999999  Class Accuracy :  18.335901386748844  Car class accuracy  18.335901386748844
Iter :  33 Batch :  9   Loss :  0.84343886  Accuracy :  79.475  Class Accuracy :  21.063244729605866  Car class accuracy  21.063244729605866
Iter :  33 Batch :  10   Loss :  0.4571423  Accuracy :  88.36500000000001  Class Accuracy :  21.11111111111111  Car class accuracy  21.11111111111111
Iter :  33 Batch :  11   Loss :  0.5575602  Accuracy :  86.665  Class Accuracy :  23.503184713375795  Car class accuracy  23.503184713375795
Iter :  33 Batch :  12   Loss :  0.63351357  Accuracy :  81.915  Class Accuracy :  22.719486081370448  Car class accuracy  22.719486081370448
Iter :  33 Batch :  13   Loss :  0.68857527  Accuracy :  85.455  Class Accuracy :  15.968586387434556  Car class accuracy  15.968586387434556
Iter :  33 Batch :  14   Loss :  0.3692628  Accuracy :  91.71000000000001  Class Accuracy :  20.258620689655174  Car class accuracy  20.258620689655174
Iter :  33 Batch :  15   Loss :  0.6190322  Accuracy :  87.86500000000001  Class Accuracy :  16.161462300076163  Car class accuracy  16.161462300076163
Iter :  33 Batch :  16   Loss :  0.24268836  Accuracy :  94.6  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 34 loss : 0.5638188 Accuracy: 89.83573656845753 Class Accuracy : 14.95674677742813
Iter :  34 Batch :  0   Loss :  0.7102585  Accuracy :  88.835  Class Accuracy :  14.016393442622949  Car class accuracy  14.016393442622949
Iter :  34 Batch :  1   Loss :  0.68569857  Accuracy :  90.74  Class Accuracy :  14.478935698447895  Car class accuracy  14.478935698447895
Iter :  34 Batch :  2   Loss :  0.17443107  Accuracy :  97.725  Class Accuracy :  11.902439024390244  Car class accuracy  11.902439024390244
Iter :  34 Batch :  3   Loss :  0.2706821  Accuracy :  96.78  Class Accuracy :  9.057971014492754  Car class accuracy  9.057971014492754
Iter :  34 Batch :  4   Loss :  0.280284  Accuracy :  94.485  Class Accuracy :  10.769230769230768  Car class accuracy  10.769230769230768
Iter :  34 Batch :  5   Loss :  1.107595  Accuracy :  94.19999999999999  Class Accuracy :  8.07991513437058  Car class accuracy  8.07991513437058
Iter :  34 Batch :  6   Loss :  0.24544683  Accuracy :  96.63000000000001  Class Accuracy :  11.150442477876107  Car class accuracy  11.150442477876107
Iter :  34 Batch :  7   Loss :  2.4630008  Accuracy :  90.065  Class Accuracy :  5.832544938505204  Car class accuracy  5.832544938505204
Iter :  34 Batch :  8   Loss :  0.9650965  Accuracy :  91.47  Class Accuracy :  11.106948228882834  Car class accuracy  11.106948228882834
Iter :  34 Batch :  9   Loss :  0.7833329  Accuracy :  87.175  Class Accuracy :  13.354779411764707  Car class accuracy  13.354779411764707
Iter :  34 Batch :  10   Loss :  0.19952801  Accuracy :  97.475  Class Accuracy :  10.578512396694215  Car class accuracy  10.578512396694215
Iter :  34 Batch :  11   Loss :  0.53358865  Accuracy :  83.81  Class Accuracy :  27.013888888888886  Car class accuracy  27.013888888888886
Iter :  34 Batch :  12   Loss :  0.6640885  Accuracy :  83.455  Class Accuracy :  19.604989604989605  Car class accuracy  19.604989604989605
Iter :  34 Batch :  13   Loss :  0.6817824  Accuracy :  87.7  Class Accuracy :  13.858485351022665  Car class accuracy  13.858485351022665
Iter :  34 Batch :  14   Loss :  0.5895253  Accuracy :  83.78  Class Accuracy :  26.121673003802282  Car class accuracy  26.121673003802282
Iter :  34 Batch :  15   Loss :  0.99081093  Accuracy :  87.715  Class Accuracy :  13.547945205479452  Car class accuracy  13.547945205479452
Iter :  34 Batch :  16   Loss :  0.28730485  Accuracy :  93.29499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 35 loss : 0.56726587 Accuracy: 89.8662542087542 Class Accuracy : 14.899861927891399
Iter :  35 Batch :  0   Loss :  1.4246737  Accuracy :  90.615  Class Accuracy :  10.042780748663102  Car class accuracy /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 10.042780748663102
Iter :  35 Batch :  1   Loss :  1.2088134  Accuracy :  78.72  Class Accuracy :  20.763790664780764  Car class accuracy  20.763790664780764
Iter :  35 Batch :  2   Loss :  0.35160175  Accuracy :  89.63  Class Accuracy :  21.464646464646467  Car class accuracy  21.464646464646467
Iter :  35 Batch :  3   Loss :  0.5176324  Accuracy :  82.035  Class Accuracy :  25.3125  Car class accuracy  25.3125
Iter :  35 Batch :  4   Loss :  0.7059117  Accuracy :  72.465  Class Accuracy :  38.75  Car class accuracy  38.75
Iter :  35 Batch :  5   Loss :  0.91624874  Accuracy :  84.685  Class Accuracy :  16.75540765391015  Car class accuracy  16.75540765391015
Iter :  35 Batch :  6   Loss :  0.49061093  Accuracy :  87.29  Class Accuracy :  26.75675675675676  Car class accuracy  26.75675675675676
Iter :  35 Batch :  7   Loss :  0.75882304  Accuracy :  85.615  Class Accuracy :  14.839307787391842  Car class accuracy  14.839307787391842
Iter :  35 Batch :  8   Loss :  0.88608825  Accuracy :  80.325  Class Accuracy :  24.279569892473116  Car class accuracy  24.279569892473116
Iter :  35 Batch :  9   Loss :  0.9372303  Accuracy :  70.48  Class Accuracy :  27.93991416309013  Car class accuracy  27.93991416309013
Iter :  35 Batch :  10   Loss :  0.35256302  Accuracy :  95.83  Class Accuracy :  10.833333333333332  Car class accuracy  10.833333333333332
Iter :  35 Batch :  11   Loss :  0.49997386  Accuracy :  84.23  Class Accuracy :  23.904109589041095  Car class accuracy  23.904109589041095
Iter :  35 Batch :  12   Loss :  0.55249316  Accuracy :  86.89  Class Accuracy :  20.355029585798817  Car class accuracy  20.355029585798817
Iter :  35 Batch :  13   Loss :  0.85445344  Accuracy :  83.655  Class Accuracy :  16.082820369334076  Car class accuracy  16.082820369334076
Iter :  35 Batch :  14   Loss :  0.48080194  Accuracy :  86.47  Class Accuracy :  21.822033898305087  Car class accuracy  21.822033898305087
Iter :  35 Batch :  15   Loss :  0.9813416  Accuracy :  88.85  Class Accuracy :  9.87467018469657  Car class accuracy  9.87467018469657
Iter :  35 Batch :  16   Loss :  0.21970925  Accuracy :  97.565  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 36 loss : 0.57135 Accuracy: 89.73143207855973 Class Accuracy : 15.025032170637829
Iter :  36 Batch :  0   Loss :  0.51253474  Accuracy :  91.55499999999999  Class Accuracy :  14.503464203233257  Car class accuracy  14.503464203233257
Iter :  36 Batch :  1   Loss :  0.7282308  Accuracy :  90.08  Class Accuracy :  13.695496783416724  Car class accuracy  13.695496783416724
Iter :  36 Batch :  2   Loss :  0.24024592  Accuracy :  98.33  Class Accuracy :  8.325358851674642  Car class accuracy  8.325358851674642
Iter :  36 Batch :  3   Loss :  0.39621592  Accuracy :  93.76  Class Accuracy :  15.070422535211266  Car class accuracy  15.070422535211266
Iter :  36 Batch :  4   Loss :  0.47371945  Accuracy :  88.52  Class Accuracy :  18.571428571428573  Car class accuracy  18.571428571428573
Iter :  36 Batch :  5   Loss :  1.2774272  Accuracy :  90.85  Class Accuracy :  7.30339928970066  Car class accuracy  7.30339928970066
Iter :  36 Batch :  6   Loss :  0.3624303  Accuracy :  94.0  Class Accuracy :  15.125628140703517  Car class accuracy  15.125628140703517
Iter :  36 Batch :  7   Loss :  0.61566967  Accuracy :  93.445  Class Accuracy :  9.80958230958231  Car class accuracy  9.80958230958231
Iter :  36 Batch :  8   Loss :  1.0327848  Accuracy :  90.065  Class Accuracy :  10.87964989059081  Car class accuracy  10.87964989059081
Iter :  36 Batch :  9   Loss :  0.8032827  Accuracy :  86.09  Class Accuracy :  13.5950044603033  Car class accuracy  13.5950044603033
Iter :  36 Batch :  10   Loss :  0.29683894  Accuracy :  95.11  Class Accuracy :  12.941176470588237  Car class accuracy  12.941176470588237
Iter :  36 Batch :  11   Loss :  0.4728987  Accuracy :  87.47500000000001  Class Accuracy :  21.806451612903228  Car class accuracy  21.806451612903228
Iter :  36 Batch :  12   Loss :  0.60977596  Accuracy :  82.71  Class Accuracy :  23.841201716738198  Car class accuracy  23.841201716738198
Iter :  36 Batch :  13   Loss :  0.729421  Accuracy :  84.205  Class Accuracy :  16.732904734073642  Car class accuracy  16.732904734073642
Iter :  36 Batch :  14   Loss :  0.49641055  Accuracy :  86.76  Class Accuracy :  23.73913043478261  Car class accuracy  23.73913043478261
Iter :  36 Batch :  15   Loss :  0.7921041  Accuracy :  85.8  Class Accuracy :  14.806094182825486  Car class accuracy  14.806094182825486
Iter :  36 Batch :  16   Loss :  0.23307055  Accuracy :  95.015  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 37 loss : 0.57192343 Accuracy: 89.74470541401274 Class Accuracy : 15.001657723642467
Iter :  37 Batch :  0   Loss :  0.4124917  Accuracy :  91.065  Class Accuracy :  13.053097345132741  Car class accuracy  13.053097345132741
Iter :  37 Batch :  1   Loss :  0.6485229  Accuracy :  90.78500000000001  Class Accuracy :  16.556907659269864  Car class accuracy  16.556907659269864
Iter :  37 Batch :  2   Loss :  0.16814567  Accuracy :  98.17  Class Accuracy :  10.29126213592233  Car class accuracy  10.29126213592233
Iter :  37 Batch :  3   Loss :  0.32451484  Accuracy :  92.715  Class Accuracy :  13.925925925925926  Car class accuracy  13.925925925925926
Iter :  37 Batch :  4   Loss :  0.37114355  Accuracy :  90.63  Class Accuracy :  12.307692307692308  Car class accuracy  12.307692307692308
Iter :  37 Batch :  5   Loss :  1.2075737  Accuracy :  92.905  Class Accuracy :  6.9268167860798355  Car class accuracy  6.9268167860798355
Iter :  37 Batch :  6   Loss :  0.25223488  Accuracy :  96.735  Class Accuracy :  11.413612565445026  Car class accuracy  11.413612565445026
Iter :  37 Batch :  7   Loss :  0.57703966  Accuracy :  93.585  Class Accuracy :  10.680809077454365  Car class accuracy  10.680809077454365
Iter :  37 Batch :  8   Loss :  0.8057305  Accuracy :  91.77  Class Accuracy :  12.742634315424612  Car class accuracy  12.742634315424612
Iter :  37 Batch :  9   Loss :  0.61908996  Accuracy :  86.97  Class Accuracy :  17.492447129909365  Car class accuracy  17.492447129909365
Iter :  37 Batch :  10   Loss :  0.19417882  Accuracy :  97.22  Class Accuracy :  10.610687022900764  Car class accuracy  10.610687022900764
Iter :  37 Batch :  11   Loss :  0.51681346  Accuracy :  84.295  Class Accuracy :  26.184210526315788  Car class accuracy  26.184210526315788
Iter :  37 Batch :  12   Loss :  0.56112844  Accuracy :  85.88  Class Accuracy :  20.4635761589404  Car class accuracy  20.4635761589404
Iter :  37 Batch :  13   Loss :  0.6789987  Accuracy :  86.05000000000001  Class Accuracy :  16.40685461580984  Car class accuracy  16.40685461580984
Iter :  37 Batch :  14   Loss :  0.47330272  Accuracy :  87.01  Class Accuracy :  23.195488721804512  Car class accuracy  23.195488721804512
Iter :  37 Batch :  15   Loss :  0.662729  Accuracy :  90.77499999999999  Class Accuracy :  11.901408450704224  Car class accuracy  11.901408450704224
Iter :  37 Batch :  16   Loss :  0.1870431  Accuracy :  96.115  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 38 loss : 0.5702769 Accuracy: 89.78658914728683 Class Accuracy : 14.969293769290234
Iter :  38 Batch :  0   Loss :  0.50014555  Accuracy :  90.835  Class Accuracy :  15.225130890052357  Car class accuracy  15.225130890052357
Iter :  38 Batch :  1   Loss :  0.53928995  Accuracy :  92.415  Class Accuracy :  15.49715909090909  Car class accuracy  15.49715909090909
Iter :  38 Batch :  2   Loss :  0.16587034  Accuracy :  96.99  Class Accuracy :  17.81420765027322  Car class accuracy  17.81420765027322
Iter :  38 Batch :  3   Loss :  0.26106942  Accuracy :  95.31500000000001  Class Accuracy :  16.19047619047619  Car class accuracy  16.19047619047619
Iter :  38 Batch :  4   Loss :  0.3748702  Accuracy :  90.425  Class Accuracy :  21.818181818181817  Car class accuracy  21.818181818181817
Iter :  38 Batch :  5   Loss :  0.6249945  Accuracy :  95.735  Class Accuracy :  10.090861889927309  Car class accuracy  10.090861889927309
Iter :  38 Batch :  6   Loss :  0.2759312  Accuracy :  97.24000000000001  Class Accuracy :  10.205128205128204  Car class accuracy  10.205128205128204
Iter :  38 Batch :  7   Loss :  0.44603857  Accuracy :  94.22500000000001  Class Accuracy :  11.979062811565305  Car class accuracy  11.979062811565305
Iter :  38 Batch :  8   Loss :  0.8871307  Accuracy :  91.485  Class Accuracy :  11.168885191347751  Car class accuracy  11.168885191347751
Iter :  38 Batch :  9   Loss :  0.6704003  Accuracy :  93.285  Class Accuracy :  8.942222222222222  Car class accuracy  8.942222222222222
Iter :  38 Batch :  10   Loss :  0.14527412  Accuracy :  98.405  Class Accuracy :  9.62962962962963  Car class accuracy  9.62962962962963
Iter :  38 Batch :  11   Loss :  0.37409076  Accuracy :  89.08  Class Accuracy :  18.257575757575754  Car class accuracy  18.257575757575754
Iter :  38 Batch :  12   Loss :  0.5138705  Accuracy :  86.355  Class Accuracy :  20.573394495412845  Car class accuracy  20.573394495412845
Iter :  38 Batch :  13   Loss :  0.6449233  Accuracy :  91.53  Class Accuracy :  12.783278327832784  Car class accuracy  12.783278327832784
Iter :  38 Batch :  14   Loss :  0.2944614  Accuracy :  93.39  Class Accuracy :  14.700854700854702  Car class accuracy  14.700854700854702
Iter :  38 Batch :  15   Loss :  0.6123131  Accuracy :  90.83  Class Accuracy :  12.400300978179082  Car class accuracy  12.400300978179082
Iter :  38 Batch :  16   Loss :  0.12032549  Accuracy :  98.275  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 39 loss : 0.5668876 Accuracy: 89.87638217522658 Class Accuracy : 14.928203672268534
Iter :  39 Batch :  0   Loss :  0.45393193  Accuracy :  90.575  Class Accuracy :  15.556733828207847  Car class accuracy  15.556733828207847
Iter :  39 Batch :  1   Loss :  0.4817729  Accuracy :  91.28500000000001  Class Accuracy :  18.032424465733236  Car class accuracy  18.032424465733236
Iter :  39 Batch :  2   Loss :  0.13274774  Accuracy :  98.825  Class Accuracy :  8.085106382978722  Car class accuracy  8.085106382978722
Iter :  39 Batch :  3   Loss :  0.24295054  Accuracy :  95.515  Class Accuracy :  12.875816993464055  Car class accuracy  12.875816993464055
Iter :  39 Batch :  4   Loss :  0.4106222  Accuracy :  88.485  Class Accuracy :  24.28571428571428  Car class accuracy  24.28571428571428
Iter :  39 Batch :  5   Loss :  0.6080332  Accuracy :  94.52000000000001  Class Accuracy :  9.740181268882175  Car class accuracy  9.740181268882175
Iter :  39 Batch :  6   Loss :  0.26537845  Accuracy :  94.655  Class Accuracy :  11.510416666666668  Car class accuracy  11.510416666666668
Iter :  39 Batch :  7   Loss :  0.3962095  Accuracy :  93.25  Class Accuracy :  12.774655084312721  Car class accuracy  12.774655084312721
Iter :  39 Batch :  8   Loss :  0.729364  Accuracy :  91.825  Class Accuracy :  12.618950793005284  Car class accuracy  12.618950793005284
Iter :  39 Batch :  9   Loss :  0.5062797  Accuracy :  88.91  Class Accuracy :  16.32485643970468  Car class accuracy  16.32485643970468
Iter :  39 Batch :  10   Loss :  0.12160817  Accuracy :  98.605  Class Accuracy :  10.37037037037037  Car class accuracy  10.37037037037037
Iter :  39 Batch :  11   Loss :  0.23240268  Accuracy :  97.3  Class Accuracy :  8.843537414965986  Car class accuracy  8.843537414965986
Iter :  39 Batch :  12   Loss :  0.28276506  Accuracy :  95.48  Class Accuracy :  14.099783080260304  Car class accuracy  14.099783080260304
Iter :  39 Batch :  13   Loss :  0.54747766  Accuracy :  94.535  Class Accuracy :  10.91767173571054  Car class accuracy  10.91767173571054
Iter :  39 Batch :  14   Loss :  0.21584135  Accuracy :  96.47  Class Accuracy :  10.87719298245614  Car class accuracy  10.87719298245614
Iter :  39 Batch :  15   Loss :  0.68171763  Accuracy :  93.095  Class Accuracy :  9.69887955182073  Car class accuracy  9.69887955182073
Iter :  39 Batch :  16   Loss :  0.08877295  Accuracy :  98.925  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 40 loss : 0.56211704 Accuracy: 89.9858910162003 Class Accuracy : 14.858738030023597
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__40_0.ckpt
saved prediction of 0 accuracy :  0.95925  class accuracy :  0.10140105078809107  car_class_accuracy :  0.10140105078809107
saved prediction of 1 accuracy :  0.97775  class accuracy :  0.09927007299270073  car_class_accuracy :  0.09927007299270073
saved prediction of 2 accuracy :  0.92385  class accuracy :  0.16999999999999998  car_class_accuracy :  0.16999999999999998
saved prediction of 3 accuracy :  0.95045  class accuracy :  0.11395856052344602  car_class_accuracy :  0.11395856052344602
saved prediction of 4 accuracy :  0.9514  class accuracy :  0.07715877437325905  car_class_accuracy :  0.07715877437325905
saved prediction of 5 accuracy :  0.95385  class accuracy :  0.046209761163032194  car_class_accuracy :  0.046209761163032194
saved prediction of 6 accuracy :  0.93555  class accuracy :  0.09616749467707594  car_class_accuracy :  0.09616749467707594
saved prediction of 7 accuracy :  0.95145  class accuracy :  0.12935010482180292  car_class_accuracy :  0.12935010482180292
saved prediction of 8 accuracy :  0.9243  class accuracy :  0.10581170089112749  car_class_accuracy :  0.10581170089112749
saved prediction of 9 accuracy :  0.98655  class accuracy :  0.04507772020725388  car_class_accuracy :  0.04507772020725388
saved prediction of 10 accuracy :  0.9568  class accuracy :  0.0886482939632546  car_class_accuracy :  0.0886482939632546
saved prediction of 11 accuracy :  0.9277  class accuracy :  0.09548787366046249  car_class_accuracy :  0.09548787366046249
saved prediction of 12 accuracy :  0.96545  class accuracy :  0.06875  car_class_accuracy :  0.06875
saved prediction of 13 accuracy :  0.96825  class accuracy :  0.08942359978249048  car_class_accuracy :  0.08942359978249048
saved prediction of 14 accuracy :  0.95675  class accuracy :  0.1239247311827957  car_class_accuracy :  0.1239247311827957
saved prediction of 15 accuracy :  0.89625  class accuracy :  0.06844783715012723  car_class_accuracy :  0.06844783715012723
saved prediction of 16 accuracy :  0.9849  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 17 accuracy :  0.95405  class accuracy :  0.09354838709677418  car_class_accuracy :  0.09354838709677418
saved prediction of 18 accuracy :  0.9773  class accuracy :  0.09784172661870504  car_class_accuracy :  0.09784172661870504
saved prediction of 19 accuracy :  0.9273  class accuracy :  0.18043478260869567  car_class_accuracy :  0.18043478260869567
saved prediction of 20 accuracy :  0.9312  class accuracy :  0.12175470008952552  car_class_accuracy :  0.12175470008952552
saved prediction of 21 accuracy :  0.9536  class accuracy :  0.07383879781420764  car_class_accuracy :  0.07383879781420764
saved prediction of 22 accuracy :  0.9426  class accuracy :  0.04581589958158996  car_class_accuracy :  0.04581589958158996
saved prediction of 23 accuracy :  0.93435  class accuracy :  0.10014316392269149  car_class_accuracy :  0.10014316392269149
saved prediction of 24 accuracy :  0.95675  class accuracy :  0.11578947368421053  car_class_accuracy :  0.11578947368421053
saved prediction of 25 accuracy :  0.92865  class accuracy :  0.1028755868544601  car_class_accuracy :  0.1028755868544601
saved prediction of 26 accuracy :  0.9874  class accuracy :  0.04218009478672986  car_class_accuracy :  0.04218009478672986
saved prediction of 27 accuracy :  0.95185  class accuracy :  0.09268707482993196  car_class_accuracy :  0.09268707482993196
saved prediction of 28 accuracy :  0.92405  class accuracy :  0.09443526170798898  car_class_accuracy :  0.09443526170798898
saved prediction of 29 accuracy :  0.96405  class accuracy :  0.08888888888888888  car_class_accuracy :  0.08888888888888888
saved prediction of 30 accuracy :  0.9683  class accuracy :  0.09122490993309315  car_class_accuracy :  0.09122490993309315
saved prediction of 31 accuracy :  0.96895  class accuracy :  0.1005540166204986  car_class_accuracy :  0.1005540166204986
saved prediction of 32 accuracy :  0.87215  class accuracy :  0.06478658536585366  car_class_accuracy :  0.06478658536585366
saved prediction of 33 accuracy :  0.9873  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 34 accuracy :  0.9537  class accuracy :  0.09517943224424211  car_class_accuracy :  0.09517943224424211
saved prediction of 35 accuracy :  0.97685  class accuracy :  0.10069444444444445  car_class_accuracy :  0.10069444444444445
saved prediction of 36 accuracy :  0.92235  class accuracy :  0.18717948717948718  car_class_accuracy :  0.18717948717948718
saved prediction of 37 accuracy :  0.9265  class accuracy :  0.12596153846153846  car_class_accuracy :  0.12596153846153846
saved prediction of 38 accuracy :  0.9532  class accuracy :  0.08254189944134079  car_class_accuracy :  0.08254189944134079
saved prediction of 39 accuracy :  0.94745  class accuracy :  0.03782327586206897  car_class_accuracy :  0.03782327586206897
saved prediction of 40 accuracy :  0.93  class accuracy :  0.10277585010409437  car_class_accuracy :  0.10277585010409437
saved prediction of 41 accuracy :  0.9625  class accuracy :  0.10834990059642147  car_class_accuracy :  0.10834990059642147
saved prediction of 42 accuracy :  0.9237  class accuracy :  0.10371440363186132  car_class_accuracy :  0.10371440363186132
saved prediction of 43 accuracy :  0.98745  class accuracy :  0.031395348837209305  car_class_accuracy :  0.031395348837209305
saved prediction of 44 accuracy :  0.94185  class accuracy :  0.10357320099255582  car_class_accuracy :  0.10357320099255582
saved prediction of 45 accuracy :  0.92925  class accuracy :  0.09508290451686678  car_class_accuracy :  0.09508290451686678
saved prediction of 46 accuracy :  0.9628  class accuracy :  0.075  car_class_accuracy :  0.075
saved prediction of 47 accuracy :  0.9701  class accuracy :  0.09336707511987213  car_class_accuracy :  0.09336707511987213
saved prediction of 48 accuracy :  0.96575  class accuracy :  0.10508021390374331  car_class_accuracy :  0.10508021390374331
saved prediction of 49 accuracy :  0.8659  class accuracy :  0.05752797558494405  car_class_accuracy :  0.05752797558494405
saved prediction of 50 accuracy :  0.9859  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 51 accuracy :  0.95925  class accuracy :  0.10501101321585904  car_class_accuracy :  0.10501101321585904
saved prediction of 52 accuracy :  0.9786  class accuracy :  0.09568345323741008  car_class_accuracy :  0.09568345323741008
saved prediction of 53 accuracy :  0.92875  class accuracy :  0.18441558441558442  car_class_accuracy :  0.18441558441558442
saved prediction of 54 accuracy :  0.92545  class accuracy :  0.12399626517273576  car_class_accuracy :  0.12399626517273576
saved prediction of 55 accuracy :  0.94905  class accuracy :  0.08171667829727844  car_class_accuracy :  0.08171667829727844
saved prediction of 56 accuracy :  0.9452  class accuracy :  0.04470954356846473  car_class_accuracy :  0.04470954356846473
saved prediction of 57 accuracy :  0.93475  class accuracy :  0.09778254649499285  car_class_accuracy :  0.09778254649499285
saved prediction of 58 accuracy :  0.9585  class accuracy :  0.12236559139784946  car_class_accuracy :  0.12236559139784946
saved prediction of 59 accuracy :  0.919  class accuracy :  0.10976027397260273  car_class_accuracy :  0.10976027397260273
saved prediction of 60 accuracy :  0.98945  class accuracy :  0.05416666666666666  car_class_accuracy :  0.05416666666666666
saved prediction of 61 accuracy :  0.93945  class accuracy :  0.10211614173228348  car_class_accuracy :  0.10211614173228348
saved prediction of 62 accuracy :  0.9287  class accuracy :  0.09579250720461095  car_class_accuracy :  0.09579250720461095
saved prediction of 63 accuracy :  0.96295  class accuracy :  0.10833333333333332  car_class_accuracy :  0.10833333333333332
saved prediction of 64 accuracy :  0.96585  class accuracy :  0.08841859257335757  car_class_accuracy :  0.08841859257335757
saved prediction of 65 accuracy :  0.974  class accuracy :  0.10746666666666667  car_class_accuracy :  0.10746666666666667
saved prediction of 66 accuracy :  0.87385  class accuracy :  0.07269333333333333  car_class_accuracy :  0.07269333333333333
saved prediction of 67 accuracy :  0.98615  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 68 accuracy :  0.95515  class accuracy :  0.09674523007856342  car_class_accuracy :  0.09674523007856342
saved prediction of 69 accuracy :  0.9762  class accuracy :  0.10139860139860139  car_class_accuracy :  0.10139860139860139
saved prediction of 70 accuracy :  0.9208  class accuracy :  0.17482517482517484  car_class_accuracy :  0.17482517482517484
saved prediction of 71 accuracy :  0.9272  class accuracy :  0.12209414024975984  car_class_accuracy :  0.12209414024975984
saved prediction of 72 accuracy :  0.9517  class accuracy :  0.07882913546630362  car_class_accuracy :  0.07882913546630362
saved prediction of 73 accuracy :  0.95035  class accuracy :  0.04116445352400409  car_class_accuracy :  0.04116445352400409
saved prediction of 74 accuracy :  0.93775  class accuracy :  0.09804489500362057  car_class_accuracy :  0.09804489500362057
saved prediction of 75 accuracy :  0.9621  class accuracy :  0.11352459016393443  car_class_accuracy :  0.11352459016393443
saved prediction of 76 accuracy :  0.921  class accuracy :  0.10704659222179438  car_class_accuracy :  0.10704659222179438
saved prediction of 77 accuracy :  0.9862  class accuracy :  0.045454545454545456  car_class_accuracy :  0.045454545454545456
saved prediction of 78 accuracy :  0.93775  class accuracy :  0.10178743961352657  car_class_accuracy :  0.10178743961352657
saved prediction of 79 accuracy :  0.9274  class accuracy :  0.09938616071428572  car_class_accuracy :  0.09938616071428572
saved prediction of 80 accuracy :  0.96155  class accuracy :  0.125  car_class_accuracy :  0.125
saved prediction of 81 accuracy :  0.9672  class accuracy :  0.08996424923391215  car_class_accuracy :  0.08996424923391215
saved prediction of 82 accuracy :  0.97195  class accuracy :  0.11204188481675392  car_class_accuracy :  0.11204188481675392
saved prediction of 83 accuracy :  0.88225  class accuracy :  0.0680456490727532  car_class_accuracy :  0.0680456490727532
saved prediction of 84 accuracy :  0.98525  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 85 accuracy :  0.95035  class accuracy :  0.09696663296258848  car_class_accuracy :  0.09696663296258848
saved prediction of 86 accuracy :  0.9774  class accuracy :  0.09930555555555556  car_class_accuracy :  0.09930555555555556
saved prediction of 87 accuracy :  0.92245  class accuracy :  0.1537037037037037  car_class_accuracy :  0.1537037037037037
saved prediction of 88 accuracy :  0.91675  class accuracy :  0.12943882244710211  car_class_accuracy :  0.12943882244710211
saved prediction of 89 accuracy :  0.9573  class accuracy :  0.08702290076335878  car_class_accuracy :  0.08702290076335878
saved prediction of 90 accuracy :  0.9455  class accuracy :  0.04864321608040201  car_class_accuracy :  0.04864321608040201
saved prediction of 91 accuracy :  0.93005  class accuracy :  0.09908062234794908  car_class_accuracy :  0.09908062234794908
saved prediction of 92 accuracy :  0.97795  class accuracy :  0.10735930735930736  car_class_accuracy :  0.10735930735930736
saved prediction of 93 accuracy :  0.921  class accuracy :  0.10234957020057307  car_class_accuracy :  0.10234957020057307
saved prediction of 94 accuracy :  0.98455  class accuracy :  0.04975369458128079  car_class_accuracy :  0.04975369458128079
saved prediction of 95 accuracy :  0.94855  class accuracy :  0.09745087626128518  car_class_accuracy :  0.09745087626128518
saved prediction of 96 accuracy :  0.9294  class accuracy :  0.09516880093131548  car_class_accuracy :  0.09516880093131548
saved prediction of 97 accuracy :  0.9688  class accuracy :  0.10909090909090909  car_class_accuracy :  0.10909090909090909
saved prediction of 98 accuracy :  0.9728  class accuracy :  0.09121353979114152  car_class_accuracy :  0.09121353979114152
saved prediction of 99 accuracy :  0.96545  class accuracy :  0.0989556135770235  car_class_accuracy :  0.0989556135770235
Iter :  40 Batch :  0   Loss :  0.5477754  Accuracy :  92.71000000000001  Class Accuracy :  12.2  Car class accuracy /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/sklearn/mixture/base.py:273: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.
  % (init + 1), ConvergenceWarning)
 96.87  Class Accuracy :  12.029136316337148  Car class accuracy  12.029136316337148
Iter :  197 Batch :  7   Loss :  0.6244846  Accuracy :  92.085  Class Accuracy :  12.533407572383073  Car class accuracy  12.533407572383073
Iter :  197 Batch :  8   Loss :  0.43626904  Accuracy :  93.585  Class Accuracy :  11.44150417827298  Car class accuracy  11.44150417827298
Iter :  197 Batch :  9   Loss :  0.4940668  Accuracy :  95.775  Class Accuracy :  9.807341838063003  Car class accuracy  9.807341838063003
Iter :  197 Batch :  10   Loss :  0.3050782  Accuracy :  95.24000000000001  Class Accuracy :  14.489247311827958  Car class accuracy  14.489247311827958
Iter :  197 Batch :  11   Loss :  0.08428276  Accuracy :  99.75  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  197 Batch :  12   Loss :  0.08988564  Accuracy :  99.595  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  197 Batch :  13   Loss :  0.20943636  Accuracy :  97.44  Class Accuracy :  10.137931034482758  Car class accuracy  10.137931034482758
Iter :  197 Batch :  14   Loss :  0.29108566  Accuracy :  98.725  Class Accuracy :  7.977777777777778  Car class accuracy  7.977777777777778
Iter :  197 Batch :  15   Loss :  0.3903526  Accuracy :  94.13  Class Accuracy :  12.108843537414966  Car class accuracy  12.108843537414966
Iter :  197 Batch :  16   Loss :  0.64613044  Accuracy :  94.355  Class Accuracy :  9.428848015488867  Car class accuracy  9.428848015488867
**** Iteration : 198 loss : 0.28328642 Accuracy: 94.96064635958396 Class Accuracy : 11.340522428409475
Iter :  198 Batch :  0   Loss :  0.16065584  Accuracy :  98.53  Class Accuracy :  9.230769230769232  Car class accuracy  9.230769230769232
Iter :  198 Batch :  1   Loss :  0.490054  Accuracy :  95.86  Class Accuracy :  10.498899486427  Car class accuracy  10.498899486427
Iter :  198 Batch :  2   Loss :  0.12095487  Accuracy :  99.24  Class Accuracy :  8.564356435643564  Car class accuracy  8.564356435643564
Iter :  198 Batch :  3   Loss :  0.1542194  Accuracy :  99.095  Class Accuracy :  9.142857142857142  Car class accuracy  9.142857142857142
Iter :  198 Batch :  4   Loss :  0.09627305  Accuracy :  99.49  Class Accuracy :  9.041095890410958  Car class accuracy  9.041095890410958
Iter :  198 Batch :  5   Loss :  0.22225122  Accuracy :  97.125  Class Accuracy :  12.069140823589223  Car class accuracy  12.069140823589223
Iter :  198 Batch :  6   Loss :  0.23730217  Accuracy :  96.27  Class Accuracy :  13.387423935091277  Car class accuracy  13.387423935091277
Iter :  198 Batch :  7   Loss :  0.5718471  Accuracy :  91.795  Class Accuracy :  12.571902654867257  Car class accuracy  12.571902654867257
Iter :  198 Batch :  8   Loss :  0.4170999  Accuracy :  92.405  Class Accuracy :  12.738264580369844  Car class accuracy  12.738264580369844
Iter :  198 Batch :  9   Loss :  0.4512481  Accuracy :  96.875  Class Accuracy :  9.05241935483871  Car class accuracy  9.05241935483871
Iter :  198 Batch :  10   Loss :  0.2000901  Accuracy :  97.485  Class Accuracy :  11.126005361930295  Car class accuracy  11.126005361930295
Iter :  198 Batch :  11   Loss :  0.05575459  Accuracy :  99.81  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  198 Batch :  12   Loss :  0.066569336  Accuracy :  99.56  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  198 Batch :  13   Loss :  0.275421  Accuracy :  93.78  Class Accuracy :  13.88888888888889  Car class accuracy  13.88888888888889
Iter :  198 Batch :  14   Loss :  0.2196513  Accuracy :  97.605  Class Accuracy :  10.458515283842795  Car class accuracy  10.458515283842795
Iter :  198 Batch :  15   Loss :  0.4108616  Accuracy :  90.89  Class Accuracy :  13.832558139534884  Car class accuracy  13.832558139534884
Iter :  198 Batch :  16   Loss :  0.4019857  Accuracy :  94.735  Class Accuracy :  11.540770385192596  Car class accuracy  11.540770385192596
**** Iteration : 199 loss : 0.28320846 Accuracy: 94.96839887640449 Class Accuracy : 11.332939633114172
Iter :  199 Batch :  0   Loss :  0.1686393  Accuracy :  97.68  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  199 Batch :  1   Loss :  0.26991555  Accuracy :  97.8  Class Accuracy :  10.300214438884918  Car class accuracy  10.300214438884918
Iter :  199 Batch :  2   Loss :  0.115962625  Accuracy :  99.35000000000001  Class Accuracy :  6.406249999999999  Car class accuracy  6.406249999999999
Iter :  199 Batch :  3   Loss :  0.10624544  Accuracy :  99.07000000000001  Class Accuracy :  8.914728682170542  Car class accuracy  8.914728682170542
Iter :  199 Batch :  4   Loss :  0.06405333  Accuracy :  99.855  Class Accuracy :  8.175182481751825  Car class accuracy  8.175182481751825
Iter :  199 Batch :  5   Loss :  0.43761358  Accuracy :  97.495  Class Accuracy :  8.410041841004185  Car class accuracy  8.410041841004185
Iter :  199 Batch :  6   Loss :  0.18991765  Accuracy :  97.49  Class Accuracy :  11.126126126126126  Car class accuracy  11.126126126126126
Iter :  199 Batch :  7   Loss :  0.54942995  Accuracy :  94.51  Class Accuracy :  10.037573805689748  Car class accuracy  10.037573805689748
Iter :  199 Batch :  8   Loss :  0.28966728  Accuracy :  96.87  Class Accuracy :  9.477715877437326  Car class accuracy  9.477715877437326
Iter :  199 Batch :  9   Loss :  0.27088863  Accuracy :  97.245  Class Accuracy :  9.119496855345913  Car class accuracy  9.119496855345913
Iter :  199 Batch :  10   Loss :  0.16846763  Accuracy :  97.55  Class Accuracy :  11.44  Car class accuracy  11.44
Iter :  199 Batch :  11   Loss :  0.050187286  Accuracy :  99.775  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  199 Batch :  12   Loss :  0.054752626  Accuracy :  99.645  Class Accuracy :  0.0  Car class accuracy  0.0
Iter :  199 Batch :  13   Loss :  0.2725336  Accuracy :  94.105  Class Accuracy :  16.274509803921568  Car class accuracy  16.274509803921568
Iter :  199 Batch :  14   Loss :  0.25994352  Accuracy :  94.16499999999999  Class Accuracy :  14.602510460251045  Car class accuracy  14.602510460251045
Iter :  199 Batch :  15   Loss :  0.53561044  Accuracy :  86.49  Class Accuracy :  17.57603686635945  Car class accuracy  17.57603686635945
Iter :  199 Batch :  16   Loss :  0.38435176  Accuracy :  94.28  Class Accuracy :  11.851116625310173  Car class accuracy  11.851116625310173
**** Iteration : 200 loss : 0.2830242 Accuracy: 94.9769049720506 Class Accuracy : 11.32442287233198
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_15_17_56/checkpoints/pointer2__200_0.ckpt
saved prediction of 0 accuracy :  0.98445  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 1 accuracy :  0.872  class accuracy :  0.1131687242798354  car_class_accuracy :  0.1131687242798354
saved prediction of 2 accuracy :  0.97015  class accuracy :  0.11079460269865067  car_class_accuracy :  0.11079460269865067
saved prediction of 3 accuracy :  0.96835  class accuracy :  0.07764227642276422  car_class_accuracy :  0.07764227642276422
saved prediction of 4 accuracy :  0.8777  class accuracy :  0.13330034636318655  car_class_accuracy :  0.13330034636318655
saved prediction of 5 accuracy :  0.95175  class accuracy :  0.11012658227848102  car_class_accuracy :  0.11012658227848102
saved prediction of 6 accuracy :  0.98905  class accuracy :  0.042045454545454546  car_class_accuracy :  0.042045454545454546
saved prediction of 7 accuracy :  0.9904  class accuracy :  0.09363636363636364  car_class_accuracy :  0.09363636363636364
saved prediction of 8 accuracy :  0.93855  class accuracy :  0.14259259259259258  car_class_accuracy :  0.14259259259259258
saved prediction of 9 accuracy :  0.9829  class accuracy :  0.06666666666666667  car_class_accuracy :  0.06666666666666667
saved prediction of 10 accuracy :  0.97965  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 11 accuracy :  0.9487  class accuracy :  0.033648790746582544  car_class_accuracy :  0.033648790746582544
saved prediction of 12 accuracy :  0.98085  class accuracy :  0.10339805825242718  car_class_accuracy :  0.10339805825242718
saved prediction of 13 accuracy :  0.91345  class accuracy :  0.10479603087100331  car_class_accuracy :  0.10479603087100331
saved prediction of 14 accuracy :  0.8835  class accuracy :  0.06461310990635781  car_class_accuracy :  0.06461310990635781
saved prediction of 15 accuracy :  0.87415  class accuracy :  0.14831460674157304  car_class_accuracy :  0.14831460674157304
saved prediction of 16 accuracy :  0.9585  class accuracy :  0.11884735202492211  car_class_accuracy :  0.11884735202492211
saved prediction of 17 accuracy :  0.98425  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 18 accuracy :  0.87405  class accuracy :  0.11067106710671067  car_class_accuracy :  0.11067106710671067
saved prediction of 19 accuracy :  0.9717  class accuracy :  0.10547550432276658  car_class_accuracy :  0.10547550432276658
saved prediction of 20 accuracy :  0.9664  class accuracy :  0.08040677966101695  car_class_accuracy :  0.08040677966101695
saved prediction of 21 accuracy :  0.87265  class accuracy :  0.1334795321637427  car_class_accuracy :  0.1334795321637427
saved prediction of 22 accuracy :  0.94915  class accuracy :  0.11096491228070175  car_class_accuracy :  0.11096491228070175
saved prediction of 23 accuracy :  0.98955  class accuracy :  0.038461538461538464  car_class_accuracy :  0.038461538461538464
saved prediction of 24 accuracy :  0.98825  class accuracy :  0.10083333333333333  car_class_accuracy :  0.10083333333333333
saved prediction of 25 accuracy :  0.9324  class accuracy :  0.14968152866242038  car_class_accuracy :  0.14968152866242038
saved prediction of 26 accuracy :  0.9862  class accuracy :  0.06  car_class_accuracy :  0.06
saved prediction of 27 accuracy :  0.97785  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 28 accuracy :  0.9497  class accuracy :  0.04057672502574665  car_class_accuracy :  0.04057672502574665
saved prediction of 29 accuracy :  0.9822  class accuracy :  0.1078125  car_class_accuracy :  0.1078125
saved prediction of 30 accuracy :  0.91615  class accuracy :  0.10788888888888888  car_class_accuracy :  0.10788888888888888
saved prediction of 31 accuracy :  0.87485  class accuracy :  0.05893333333333334  car_class_accuracy :  0.05893333333333334
saved prediction of 32 accuracy :  0.884  class accuracy :  0.1449053201082056  car_class_accuracy :  0.1449053201082056
saved prediction of 33 accuracy :  0.9634  class accuracy :  0.1154564315352697  car_class_accuracy :  0.1154564315352697
saved prediction of 34 accuracy :  0.98625  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 35 accuracy :  0.87835  class accuracy :  0.11310541310541311  car_class_accuracy :  0.11310541310541311
saved prediction of 36 accuracy :  0.97215  class accuracy :  0.11111111111111112  car_class_accuracy :  0.11111111111111112
saved prediction of 37 accuracy :  0.9698  class accuracy :  0.08146179401993356  car_class_accuracy :  0.08146179401993356
saved prediction of 38 accuracy :  0.86295  class accuracy :  0.14619675456389453  car_class_accuracy :  0.14619675456389453
saved prediction of 39 accuracy :  0.9189  class accuracy :  0.13086680761099365  car_class_accuracy :  0.13086680761099365
saved prediction of 40 accuracy :  0.98805  class accuracy :  0.030693069306930693  car_class_accuracy :  0.030693069306930693
saved prediction of 41 accuracy :  0.98645  class accuracy :  0.09080882352941176  car_class_accuracy :  0.09080882352941176
saved prediction of 42 accuracy :  0.9388  class accuracy :  0.190625  car_class_accuracy :  0.190625
saved prediction of 43 accuracy :  0.98525  class accuracy :  0.07058823529411765  car_class_accuracy :  0.07058823529411765
saved prediction of 44 accuracy :  0.981  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 45 accuracy :  0.95155  class accuracy :  0.04024266936299292  car_class_accuracy :  0.04024266936299292
saved prediction of 46 accuracy :  0.98295  class accuracy :  0.10738916256157635  car_class_accuracy :  0.10738916256157635
saved prediction of 47 accuracy :  0.9127  class accuracy :  0.10681818181818181  car_class_accuracy :  0.10681818181818181
saved prediction of 48 accuracy :  0.8708  class accuracy :  0.06234327712926935  car_class_accuracy :  0.06234327712926935
saved prediction of 49 accuracy :  0.8764  class accuracy :  0.1568949771689498  car_class_accuracy :  0.1568949771689498
saved prediction of 50 accuracy :  0.9654  class accuracy :  0.1171341152473228  car_class_accuracy :  0.1171341152473228
saved prediction of 51 accuracy :  0.98445  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 52 accuracy :  0.87905  class accuracy :  0.11194196428571428  car_class_accuracy :  0.11194196428571428
saved prediction of 53 accuracy :  0.972  class accuracy :  0.11082251082251082  car_class_accuracy :  0.11082251082251082
saved prediction of 54 accuracy :  0.97225  class accuracy :  0.0786676646706587  car_class_accuracy :  0.0786676646706587
saved prediction of 55 accuracy :  0.8723  class accuracy :  0.12524461839530332  car_class_accuracy :  0.12524461839530332
saved prediction of 56 accuracy :  0.9218  class accuracy :  0.1320328542094456  car_class_accuracy :  0.1320328542094456
saved prediction of 57 accuracy :  0.98855  class accuracy :  0.0375  car_class_accuracy :  0.0375
saved prediction of 58 accuracy :  0.98795  class accuracy :  0.09871244635193133  car_class_accuracy :  0.09871244635193133
saved prediction of 59 accuracy :  0.94105  class accuracy :  0.16165413533834588  car_class_accuracy :  0.16165413533834588
saved prediction of 60 accuracy :  0.9865  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 61 accuracy :  0.9803  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 62 accuracy :  0.95135  class accuracy :  0.03806122448979592  car_class_accuracy :  0.03806122448979592
saved prediction of 63 accuracy :  0.9826  class accuracy :  0.0896551724137931  car_class_accuracy :  0.0896551724137931
saved prediction of 64 accuracy :  0.91625  class accuracy :  0.10886781929726715  car_class_accuracy :  0.10886781929726715
saved prediction of 65 accuracy :  0.89325  class accuracy :  0.0595224559408755  car_class_accuracy :  0.0595224559408755
saved prediction of 66 accuracy :  0.87465  class accuracy :  0.16200185356811864  car_class_accuracy :  0.16200185356811864
saved prediction of 67 accuracy :  0.95995  class accuracy :  0.11786372007366483  car_class_accuracy :  0.11786372007366483
saved prediction of 68 accuracy :  0.98635  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 69 accuracy :  0.87715  class accuracy :  0.10917926565874729  car_class_accuracy :  0.10917926565874729
saved prediction of 70 accuracy :  0.9713  class accuracy :  0.11922230374174614  car_class_accuracy :  0.11922230374174614
saved prediction of 71 accuracy :  0.9658  class accuracy :  0.08114093959731543  car_class_accuracy :  0.08114093959731543
saved prediction of 72 accuracy :  0.87175  class accuracy :  0.13320274240940255  car_class_accuracy :  0.13320274240940255
saved prediction of 73 accuracy :  0.95175  class accuracy :  0.11595744680851064  car_class_accuracy :  0.11595744680851064
saved prediction of 74 accuracy :  0.98635  class accuracy :  0.032160804020100506  car_class_accuracy :  0.032160804020100506
saved prediction of 75 accuracy :  0.98775  class accuracy :  0.09090909090909091  car_class_accuracy :  0.09090909090909091
saved prediction of 76 accuracy :  0.9325  class accuracy :  0.16086956521739132  car_class_accuracy :  0.16086956521739132
saved prediction of 77 accuracy :  0.98845  class accuracy :  0.08421052631578947  car_class_accuracy :  0.08421052631578947
saved prediction of 78 accuracy :  0.9786  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 79 accuracy :  0.94795  class accuracy :  0.040327868852459016  car_class_accuracy :  0.040327868852459016
saved prediction of 80 accuracy :  0.9825  class accuracy :  0.09948186528497409  car_class_accuracy :  0.09948186528497409
saved prediction of 81 accuracy :  0.9217  class accuracy :  0.10500277932184547  car_class_accuracy :  0.10500277932184547
saved prediction of 82 accuracy :  0.8665  class accuracy :  0.05831019436731456  car_class_accuracy :  0.05831019436731456
saved prediction of 83 accuracy :  0.85125  class accuracy :  0.17226596675415573  car_class_accuracy :  0.17226596675415573
saved prediction of 84 accuracy :  0.95805  class accuracy :  0.12306018854242204  car_class_accuracy :  0.12306018854242204
saved prediction of 85 accuracy :  0.9844  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 86 accuracy :  0.86465  class accuracy :  0.12469069392146315  car_class_accuracy :  0.12469069392146315
saved prediction of 87 accuracy :  0.97135  class accuracy :  0.11108630952380953  car_class_accuracy :  0.11108630952380953
saved prediction of 88 accuracy :  0.971  class accuracy :  0.08392351274787535  car_class_accuracy :  0.08392351274787535
saved prediction of 89 accuracy :  0.88255  class accuracy :  0.12962962962962962  car_class_accuracy :  0.12962962962962962
saved prediction of 90 accuracy :  0.9191  class accuracy :  0.13402061855670103  car_class_accuracy :  0.13402061855670103
saved prediction of 91 accuracy :  0.98875  class accuracy :  0.03350515463917526  car_class_accuracy :  0.03350515463917526
saved prediction of 92 accuracy :  0.9871  class accuracy :  0.09483568075117371  car_class_accuracy :  0.09483568075117371
saved prediction of 93 accuracy :  0.93315  class accuracy :  0.15625  car_class_accuracy :  0.15625
saved prediction of 94 accuracy :  0.9855  class accuracy :  0.07647058823529411  car_class_accuracy :  0.07647058823529411
saved prediction of 95 accuracy :  0.9759  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 96 accuracy :  0.95085  class accuracy :  0.03571428571428571  car_class_accuracy :  0.03571428571428571
saved prediction of 97 accuracy :  0.9824  class accuracy :  0.11157894736842104  car_class_accuracy :  0.11157894736842104
saved prediction of 98 accuracy :  0.9186  class accuracy :  0.1091533180778032  car_class_accuracy :  0.1091533180778032
saved prediction of 99 accuracy :  0.8944  class accuracy :  0.05937853107344633  car_class_accuracy :  0.05937853107344633
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 12.2
Iter :  40 Batch :  1   Loss :  0.4964703  Accuracy :  90.835  Class Accuracy :  18.111587982832617  Car class accuracy  18.111587982832617
Iter :  40 Batch :  2   Loss :  0.13137335  Accuracy :  97.82499999999999  Class Accuracy :  10.572916666666668  Car class accuracy  10.572916666666668
Iter :  40 Batch :  3   Loss :  0.19082053  Accuracy :  96.61  Class Accuracy :  10.444444444444445  Car class accuracy  10.444444444444445
Iter :  40 Batch :  4   Loss :  0.5112892  Accuracy :  83.755  Class Accuracy :  21.818181818181817  Car class accuracy  21.818181818181817
Iter :  40 Batch :  5   Loss :  0.4063847  Accuracy :  96.02000000000001  Class Accuracy :  10.87723990371757  Car class accuracy  10.87723990371757
Iter :  40 Batch :  6   Loss :  0.3072493  Accuracy :  91.155  Class Accuracy :  18.711340206185568  Car class accuracy  18.711340206185568
Iter :  40 Batch :  7   Loss :  0.46958247  Accuracy :  88.265  Class Accuracy :  16.22977346278317  Car class accuracy  16.22977346278317
Iter :  40 Batch :  8   Loss :  0.56087595  Accuracy :  90.375  Class Accuracy :  16.135972461273667  Car class accuracy  16.135972461273667
Iter :  40 Batch :  9   Loss :  0.51740944  Accuracy :  90.025  Class Accuracy :  13.601429848078642  Car class accuracy  13.601429848078642
Iter :  40 Batch :  10   Loss :  0.12776613  Accuracy :  98.58  Class Accuracy :  9.212598425196852  Car class accuracy  9.212598425196852
Iter :  40 Batch :  11   Loss :  0.24279761  Accuracy :  96.42500000000001  Class Accuracy :  8.378378378378379  Car class accuracy  8.378378378378379
Iter :  40 Batch :  12   Loss :  0.33704507  Accuracy :  92.375  Class Accuracy :  15.2317880794702  Car class accuracy  15.2317880794702
Iter :  40 Batch :  13   Loss :  0.52913445  Accuracy :  94.72  Class Accuracy :  10.011148272017838  Car class accuracy  10.011148272017838
Iter :  40 Batch :  14   Loss :  0.20950888  Accuracy :  97.155  Class Accuracy :  11.384615384615385  Car class accuracy  11.384615384615385
Iter :  40 Batch :  15   Loss :  0.6823119  Accuracy :  94.14  Class Accuracy :  8.874032371569317  Car class accuracy  8.874032371569317
Iter :  40 Batch :  16   Loss :  0.05589241  Accuracy :  99.875  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 41 loss : 0.55747294 Accuracy: 90.0736566091954 Class Accuracy : 14.800112888062404
Iter :  41 Batch :  0   Loss :  0.42202783  Accuracy :  89.36  Class Accuracy :  19.65775401069519  Car class accuracy  19.65775401069519
Iter :  41 Batch :  1   Loss :  0.4810632  Accuracy :  89.79  Class Accuracy :  19.890029325513197  Car class accuracy  19.890029325513197
Iter :  41 Batch :  2   Loss :  0.15064454  Accuracy :  98.83  Class Accuracy :  3.081081081081081  Car class accuracy  3.081081081081081
Iter :  41 Batch :  3   Loss :  0.21344976  Accuracy :  96.91499999999999  Class Accuracy :  11.43884892086331  Car class accuracy  11.43884892086331
Iter :  41 Batch :  4   Loss :  0.41123065  Accuracy :  86.83  Class Accuracy :  22.857142857142858  Car class accuracy  22.857142857142858
Iter :  41 Batch :  5   Loss :  0.7574154  Accuracy :  92.515  Class Accuracy :  9.157723577235773  Car class accuracy  9.157723577235773
Iter :  41 Batch :  6   Loss :  0.24538198  Accuracy :  94.42  Class Accuracy :  12.872340425531913  Car class accuracy  12.872340425531913
Iter :  41 Batch :  7   Loss :  0.51752895  Accuracy :  95.965  Class Accuracy :  8.528875379939208  Car class accuracy  8.528875379939208
Iter :  41 Batch :  8   Loss :  0.5888168  Accuracy :  88.91  Class Accuracy :  16.045089797478028  Car class accuracy  16.045089797478028
Iter :  41 Batch :  9   Loss :  0.58145696  Accuracy :  91.05  Class Accuracy :  12.178121974830592  Car class accuracy  12.178121974830592
Iter :  41 Batch :  10   Loss :  0.22607905  Accuracy :  95.05  Class Accuracy :  14.014084507042252  Car class accuracy  14.014084507042252
Iter :  41 Batch :  11   Loss :  0.40329927  Accuracy :  88.46000000000001  Class Accuracy :  20.80745341614907  Car class accuracy  20.80745341614907
Iter :  41 Batch :  12   Loss :  0.49815956  Accuracy :  83.49499999999999  Class Accuracy :  26.659528907922912  Car class accuracy  26.659528907922912
Iter :  41 Batch :  13   Loss :  0.58028865  Accuracy :  88.315  Class Accuracy :  15.95596133190118  Car class accuracy  15.95596133190118
Iter :  41 Batch :  14   Loss :  0.47443408  Accuracy :  86.17  Class Accuracy :  22.73764258555133  Car class accuracy  22.73764258555133
Iter :  41 Batch :  15   Loss :  0.5833387  Accuracy :  88.315  Class Accuracy :  15.289473684210526  Car class accuracy  15.289473684210526
Iter :  41 Batch :  16   Loss :  0.34355587  Accuracy :  90.27  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 42 loss : 0.5546695 Accuracy: 90.09246143057504 Class Accuracy : 14.79950872633173
Iter :  42 Batch :  0   Loss :  0.4367459  Accuracy :  88.115  Class Accuracy :  20.64143007360673  Car class accuracy  20.64143007360673
Iter :  42 Batch :  1   Loss :  0.4591102  Accuracy :  90.55499999999999  Class Accuracy :  18.445099484156227  Car class accuracy  18.445099484156227
Iter :  42 Batch :  2   Loss :  0.19891518  Accuracy :  94.795  Class Accuracy :  12.880434782608695  Car class accuracy  12.880434782608695
Iter :  42 Batch :  3   Loss :  0.3137483  Accuracy :  92.28  Class Accuracy :  14.967320261437909  Car class accuracy  14.967320261437909
Iter :  42 Batch :  4   Loss :  0.36252555  Accuracy :  89.375  Class Accuracy :  12.307692307692308  Car class accuracy  12.307692307692308
Iter :  42 Batch :  5   Loss :  0.57014567  Accuracy :  96.60499999999999  Class Accuracy :  9.234222339582782  Car class accuracy  9.234222339582782
Iter :  42 Batch :  6   Loss :  0.22256099  Accuracy :  97.555  Class Accuracy :  8.359788359788359  Car class accuracy  8.359788359788359
Iter :  42 Batch :  7   Loss :  0.5509654  Accuracy :  93.575  Class Accuracy :  10.342391304347826  Car class accuracy  10.342391304347826
Iter :  42 Batch :  8   Loss :  0.6809082  Accuracy :  94.745  Class Accuracy :  10.766580534022394  Car class accuracy  10.766580534022394
Iter :  42 Batch :  9   Loss :  0.46193066  Accuracy :  91.60000000000001  Class Accuracy :  13.68577075098814  Car class accuracy  13.68577075098814
Iter :  42 Batch :  10   Loss :  0.17915219  Accuracy :  96.78999999999999  Class Accuracy :  11.38888888888889  Car class accuracy  11.38888888888889
Iter :  42 Batch :  11   Loss :  0.31336468  Accuracy :  92.30000000000001  Class Accuracy :  17.698412698412696  Car class accuracy  17.698412698412696
Iter :  42 Batch :  12   Loss :  0.4225337  Accuracy :  84.575  Class Accuracy :  21.548387096774192  Car class accuracy  21.548387096774192
Iter :  42 Batch :  13   Loss :  0.7179018  Accuracy :  95.28999999999999  Class Accuracy :  9.515608180839612  Car class accuracy  9.515608180839612
Iter :  42 Batch :  14   Loss :  0.19125727  Accuracy :  97.59  Class Accuracy :  10.119047619047619  Car class accuracy  10.119047619047619
Iter :  42 Batch :  15   Loss :  0.66297597  Accuracy :  89.51  Class Accuracy :  13.287066246056783  Car class accuracy  13.287066246056783
Iter :  42 Batch :  16   Loss :  0.18348564  Accuracy :  95.19999999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 43 loss : 0.5512433 Accuracy: 90.15942465753426 Class Accuracy : 14.749640907949008
Iter :  43 Batch :  0   Loss :  0.39242005  Accuracy :  92.105  Class Accuracy :  13.698481561822126  Car class accuracy  13.698481561822126
Iter :  43 Batch :  1   Loss :  0.55890584  Accuracy :  88.97500000000001  Class Accuracy :  19.392226148409893  Car class accuracy  19.392226148409893
Iter :  43 Batch :  2   Loss :  0.13581464  Accuracy :  97.33500000000001  Class Accuracy :  10.962566844919785  Car class accuracy  10.962566844919785
Iter :  43 Batch :  3   Loss :  0.251131  Accuracy :  94.57  Class Accuracy :  13.310344827586206  Car class accuracy  13.310344827586206
Iter :  43 Batch :  4   Loss :  0.40235743  Accuracy :  84.61  Class Accuracy :  17.894736842105264  Car class accuracy  17.894736842105264
Iter :  43 Batch :  5   Loss :  0.5310911  Accuracy :  93.53  Class Accuracy :  11.481865284974093  Car class accuracy  11.481865284974093
Iter :  43 Batch :  6   Loss :  0.28644052  Accuracy :  93.8  Class Accuracy :  13.138297872340427  Car class accuracy  13.138297872340427
Iter :  43 Batch :  7   Loss :  0.4629011  Accuracy :  89.24499999999999  Class Accuracy :  15.714971209213052  Car class accuracy  15.714971209213052
Iter :  43 Batch :  8   Loss :  0.65443045  Accuracy :  89.59  Class Accuracy :  14.844868735083534  Car class accuracy  14.844868735083534
Iter :  43 Batch :  9   Loss :  0.54055154  Accuracy :  86.72  Class Accuracy :  18.108974358974358  Car class accuracy  18.108974358974358
Iter :  43 Batch :  10   Loss :  0.1416844  Accuracy :  98.115  Class Accuracy :  11.570247933884296  Car class accuracy  11.570247933884296
Iter :  43 Batch :  11   Loss :  0.18320975  Accuracy :  97.165  Class Accuracy :  9.300699300699302  Car class accuracy  9.300699300699302
Iter :  43 Batch :  12   Loss :  0.2876248  Accuracy :  96.505  Class Accuracy :  9.626373626373628  Car class accuracy  9.626373626373628
Iter :  43 Batch :  13   Loss :  0.39025736  Accuracy :  94.3  Class Accuracy :  12.134519177320731  Car class accuracy  12.134519177320731
Iter :  43 Batch :  14   Loss :  0.23072161  Accuracy :  96.095  Class Accuracy :  11.829787234042552  Car class accuracy  11.829787234042552
Iter :  43 Batch :  15   Loss :  0.55468005  Accuracy :  92.51  Class Accuracy :  11.111873713109128  Car class accuracy  11.111873713109128
Iter :  43 Batch :  16   Loss :  0.07935149  Accuracy :  98.905  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 44 loss : 0.5468422 Accuracy: 90.22818607764391 Class Accuracy : 14.700614052842884
Iter :  44 Batch :  0   Loss :  0.37600794  Accuracy :  91.75  Class Accuracy :  15.253164556962023  Car class accuracy  15.253164556962023
Iter :  44 Batch :  1   Loss :  0.42884493  Accuracy :  95.355  Class Accuracy :  13.098791755508172  Car class accuracy  13.098791755508172
Iter :  44 Batch :  2   Loss :  0.09515935  Accuracy :  98.77  Class Accuracy :  9.895287958115183  Car class accuracy  9.895287958115183
Iter :  44 Batch :  3   Loss :  0.18350369  Accuracy :  96.435  Class Accuracy :  11.714285714285715  Car class accuracy  11.714285714285715
Iter :  44 Batch :  4   Loss :  0.19245255  Accuracy :  96.43  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  44 Batch :  5   Loss :  0.6542878  Accuracy :  96.78  Class Accuracy :  9.391076115485564  Car class accuracy  9.391076115485564
Iter :  44 Batch :  6   Loss :  0.18303849  Accuracy :  96.10499999999999  Class Accuracy :  12.972972972972974  Car class accuracy  12.972972972972974
Iter :  44 Batch :  7   Loss :  0.39825207  Accuracy :  93.765  Class Accuracy :  10.47970479704797  Car class accuracy  10.47970479704797
Iter :  44 Batch :  8   Loss :  0.50291866  Accuracy :  93.61500000000001  Class Accuracy :  12.216278181123423  Car class accuracy  12.216278181123423
Iter :  44 Batch :  9   Loss :  0.4775293  Accuracy :  90.18  Class Accuracy :  14.133971291866027  Car class accuracy  14.133971291866027
Iter :  44 Batch :  10   Loss :  0.122331664  Accuracy :  98.26  Class Accuracy :  10.364963503649635  Car class accuracy  10.364963503649635
Iter :  44 Batch :  11   Loss :  0.20737612  Accuracy :  96.02000000000001  Class Accuracy :  13.840579710144926  Car class accuracy  13.840579710144926
Iter :  44 Batch :  12   Loss :  0.34081972  Accuracy :  93.015  Class Accuracy :  14.02805611222445  Car class accuracy  14.02805611222445
Iter :  44 Batch :  13   Loss :  0.47798526  Accuracy :  92.38499999999999  Class Accuracy :  13.561643835616438  Car class accuracy  13.561643835616438
Iter :  44 Batch :  14   Loss :  0.1646252  Accuracy :  98.64500000000001  Class Accuracy :  9.144144144144144  Car class accuracy  9.144144144144144
Iter :  44 Batch :  15   Loss :  0.4877378  Accuracy :  94.05  Class Accuracy :  9.754768392370572  Car class accuracy  9.754768392370572
Iter :  44 Batch :  16   Loss :  0.05242455  Accuracy :  99.47  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 45 loss : 0.54167074 Accuracy: 90.34225785340314 Class Accuracy : 14.622000505909883
Iter :  45 Batch :  0   Loss :  0.3432282  Accuracy :  94.625  Class Accuracy :  12.915831663326655  Car class accuracy  12.915831663326655
Iter :  45 Batch :  1   Loss :  0.40975127  Accuracy :  93.715  Class Accuracy :  15.31317494600432  Car class accuracy  15.31317494600432
Iter :  45 Batch :  2   Loss :  0.100008704  Accuracy :  98.97500000000001  Class Accuracy :  8.802083333333334  Car class accuracy  8.802083333333334
Iter :  45 Batch :  3   Loss :  0.13749798  Accuracy :  98.015  Class Accuracy :  9.253731343283581  Car class accuracy  9.253731343283581
Iter :  45 Batch :  4   Loss :  0.20773865  Accuracy :  96.83  Class Accuracy :  11.666666666666666  Car class accuracy  11.666666666666666
Iter :  45 Batch :  5   Loss :  0.37275067  Accuracy :  96.745  Class Accuracy :  10.24789029535865  Car class accuracy  10.24789029535865
Iter :  45 Batch :  6   Loss :  0.22537939  Accuracy :  95.06  Class Accuracy :  16.0  Car class accuracy  16.0
Iter :  45 Batch :  7   Loss :  0.440684  Accuracy :  93.015  Class Accuracy :  12.007972097658197  Car class accuracy  12.007972097658197
Iter :  45 Batch :  8   Loss :  0.43104628  Accuracy :  90.16  Class Accuracy :  17.5282000980873  Car class accuracy  17.5282000980873
Iter :  45 Batch :  9   Loss :  0.443088  Accuracy :  92.065  Class Accuracy :  13.130841121495326  Car class accuracy  13.130841121495326
Iter :  45 Batch :  10   Loss :  0.07570248  Accuracy :  98.92  Class Accuracy :  9.90990990990991  Car class accuracy  9.90990990990991
Iter :  45 Batch :  11   Loss :  0.14993277  Accuracy :  97.855  Class Accuracy :  9.795918367346939  Car class accuracy  9.795918367346939
Iter :  45 Batch :  12   Loss :  0.39197245  Accuracy :  88.655  Class Accuracy :  22.887473460721868  Car class accuracy  22.887473460721868
Iter :  45 Batch :  13   Loss :  0.65277755  Accuracy :  95.04  Class Accuracy :  9.403470715835141  Car class accuracy  9.403470715835141
Iter :  45 Batch :  14   Loss :  0.1456207  Accuracy :  98.05  Class Accuracy :  10.208333333333334  Car class accuracy  10.208333333333334
Iter :  45 Batch :  15   Loss :  0.38188696  Accuracy :  94.64  Class Accuracy :  10.94632768361582  Car class accuracy  10.94632768361582
Iter :  45 Batch :  16   Loss :  0.060959388  Accuracy :  99.325  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 46 loss : 0.53624386 Accuracy: 90.45220870678618 Class Accuracy : 14.559828695968154
Iter :  46 Batch :  0   Loss :  0.3457006  Accuracy :  91.295  Class Accuracy :  16.93170234454638  Car class accuracy  16.93170234454638
Iter :  46 Batch :  1   Loss :  0.9934553  Accuracy :  91.01  Class Accuracy :  11.663035584604211  Car class accuracy  11.663035584604211
Iter :  46 Batch :  2   Loss :  0.08888893  Accuracy :  98.7  Class Accuracy :  9.65174129353234  Car class accuracy  9.65174129353234
Iter :  46 Batch :  3   Loss :  0.3851032  Accuracy :  88.51  Class Accuracy :  19.130434782608695  Car class accuracy  19.130434782608695
Iter :  46 Batch :  4   Loss :  0.3278562  Accuracy :  93.595  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  46 Batch :  5   Loss :  0.6850782  Accuracy :  95.93  Class Accuracy :  8.559477124183006  Car class accuracy  8.559477124183006
Iter :  46 Batch :  6   Loss :  0.4926452  Accuracy :  91.05  Class Accuracy :  13.980099502487562  Car class accuracy  13.980099502487562
Iter :  46 Batch :  7   Loss :  0.64672756  Accuracy :  81.17  Class Accuracy :  20.911708253358924  Car class accuracy  20.911708253358924
Iter :  46 Batch :  8   Loss :  0.5407808  Accuracy :  85.265  Class Accuracy :  22.299696838458203  Car class accuracy  22.299696838458203
Iter :  46 Batch :  9   Loss :  0.8326745  Accuracy :  73.97  Class Accuracy :  28.02690582959641  Car class accuracy  28.02690582959641
Iter :  46 Batch :  10   Loss :  0.56388956  Accuracy :  84.385  Class Accuracy :  23.856209150326794  Car class accuracy  23.856209150326794
Iter :  46 Batch :  11   Loss :  0.5449588  Accuracy :  83.16  Class Accuracy :  26.22516556291391  Car class accuracy  26.22516556291391
Iter :  46 Batch :  12   Loss :  0.65371805  Accuracy :  76.46  Class Accuracy :  34.1025641025641  Car class accuracy  34.1025641025641
Iter :  46 Batch :  13   Loss :  0.6668211  Accuracy :  83.005  Class Accuracy :  19.75680370584829  Car class accuracy  19.75680370584829
Iter :  46 Batch :  14   Loss :  0.5511603  Accuracy :  84.135  Class Accuracy :  24.43548387096774  Car class accuracy  24.43548387096774
Iter :  46 Batch :  15   Loss :  0.72593844  Accuracy :  86.535  Class Accuracy :  15.747460087082727  Car class accuracy  15.747460087082727
Iter :  46 Batch :  16   Loss :  0.22401015  Accuracy :  91.935  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 47 loss : 0.5364359 Accuracy: 90.38005639097744 Class Accuracy : 14.632211402987728
Iter :  47 Batch :  0   Loss :  0.3326163  Accuracy :  91.92  Class Accuracy :  15.528898582333698  Car class accuracy  15.528898582333698
Iter :  47 Batch :  1   Loss :  0.5734783  Accuracy :  87.98  Class Accuracy :  19.423368740515933  Car class accuracy  19.423368740515933
Iter :  47 Batch :  2   Loss :  0.1642819  Accuracy :  95.92  Class Accuracy :  14.039408866995073  Car class accuracy  14.039408866995073
Iter :  47 Batch :  3   Loss :  0.25523496  Accuracy :  93.67999999999999  Class Accuracy :  19.361702127659576  Car class accuracy  19.361702127659576
Iter :  47 Batch :  4   Loss :  0.36582765  Accuracy :  87.75500000000001  Class Accuracy :  22.5  Car class accuracy  22.5
Iter :  47 Batch :  5   Loss :  1.1913593  Accuracy :  90.74  Class Accuracy :  7.253340184994861  Car class accuracy  7.253340184994861
Iter :  47 Batch :  6   Loss :  0.2667106  Accuracy :  94.22  Class Accuracy :  16.48936170212766  Car class accuracy  16.48936170212766
Iter :  47 Batch :  7   Loss :  0.72699624  Accuracy :  94.22500000000001  Class Accuracy :  9.851042701092354  Car class accuracy  9.851042701092354
Iter :  47 Batch :  8   Loss :  0.8431615  Accuracy :  94.34  Class Accuracy :  10.397096498719042  Car class accuracy  10.397096498719042
Iter :  47 Batch :  9   Loss :  0.68526685  Accuracy :  87.145  Class Accuracy :  13.746747614917606  Car class accuracy  13.746747614917606
Iter :  47 Batch :  10   Loss :  0.20709947  Accuracy :  95.89999999999999  Class Accuracy :  10.846153846153845  Car class accuracy  10.846153846153845
Iter :  47 Batch :  11   Loss :  0.27906865  Accuracy :  94.515  Class Accuracy :  10.87248322147651  Car class accuracy  10.87248322147651
Iter :  47 Batch :  12   Loss :  0.45527008  Accuracy :  85.625  Class Accuracy :  21.97247706422018  Car class accuracy  21.97247706422018
Iter :  47 Batch :  13   Loss :  0.5596729  Accuracy :  89.345  Class Accuracy :  14.519438444924408  Car class accuracy  14.519438444924408
Iter :  47 Batch :  14   Loss :  0.3895102  Accuracy :  87.785  Class Accuracy :  21.409691629955947  Car class accuracy  21.409691629955947
Iter :  47 Batch :  15   Loss :  0.6377081  Accuracy :  89.02  Class Accuracy :  13.023411371237458  Car class accuracy  13.023411371237458
Iter :  47 Batch :  16   Loss :  0.16576362  Accuracy :  96.53500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 48 loss : 0.53518397 Accuracy: 90.40482822085889 Class Accuracy : 14.622993033351573
Iter :  48 Batch :  0   Loss :  0.5301186  Accuracy :  90.755  Class Accuracy :  14.431818181818182  Car class accuracy  14.431818181818182
Iter :  48 Batch :  1   Loss :  0.44593006  Accuracy :  93.315  Class Accuracy :  14.576271186440676  Car class accuracy  14.576271186440676
Iter :  48 Batch :  2   Loss :  0.20915124  Accuracy :  96.165  Class Accuracy :  12.783505154639174  Car class accuracy  12.783505154639174
Iter :  48 Batch :  3   Loss :  0.33007646  Accuracy :  91.755  Class Accuracy :  17.865853658536583  Car class accuracy  17.865853658536583
Iter :  48 Batch :  4   Loss :  0.19267026  Accuracy :  96.30499999999999  Class Accuracy :  3.888888888888889  Car class accuracy  3.888888888888889
Iter :  48 Batch :  5   Loss :  0.5407758  Accuracy :  97.34  Class Accuracy :  9.737451737451739  Car class accuracy  9.737451737451739
Iter :  48 Batch :  6   Loss :  0.2009419  Accuracy :  97.35000000000001  Class Accuracy :  11.624365482233504  Car class accuracy  11.624365482233504
Iter :  48 Batch :  7   Loss :  0.43110716  Accuracy :  94.045  Class Accuracy :  11.303664921465968  Car class accuracy  11.303664921465968
Iter :  48 Batch :  8   Loss :  0.6191668  Accuracy :  91.89500000000001  Class Accuracy :  14.030808729139924  Car class accuracy  14.030808729139924
Iter :  48 Batch :  9   Loss :  0.46006855  Accuracy :  91.59  Class Accuracy :  13.56513222331048  Car class accuracy  13.56513222331048
Iter :  48 Batch :  10   Loss :  0.12558939  Accuracy :  98.04  Class Accuracy :  9.517241379310345  Car class accuracy  9.517241379310345
Iter :  48 Batch :  11   Loss :  0.23574848  Accuracy :  94.815  Class Accuracy :  12.934131736526947  Car class accuracy  12.934131736526947
Iter :  48 Batch :  12   Loss :  0.28475007  Accuracy :  97.82  Class Accuracy :  9.1701244813278  Car class accuracy  9.1701244813278
Iter :  48 Batch :  13   Loss :  0.39167714  Accuracy :  92.645  Class Accuracy :  13.712574850299402  Car class accuracy  13.712574850299402
Iter :  48 Batch :  14   Loss :  0.28499562  Accuracy :  92.16499999999999  Class Accuracy :  17.777777777777775  Car class accuracy  17.777777777777775
Iter :  48 Batch :  15   Loss :  0.4419954  Accuracy :  91.81  Class Accuracy :  13.182765809589995  Car class accuracy  13.182765809589995
Iter :  48 Batch :  16   Loss :  0.083716385  Accuracy :  98.66  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 49 loss : 0.53123003 Accuracy: 90.48846754807693 Class Accuracy : 14.564713579784001
Iter :  49 Batch :  0   Loss :  0.3765433  Accuracy :  92.535  Class Accuracy :  14.463917525773196  Car class accuracy  14.463917525773196
Iter :  49 Batch :  1   Loss :  0.45481992  Accuracy :  90.225  Class Accuracy :  18.15450643776824  Car class accuracy  18.15450643776824
Iter :  49 Batch :  2   Loss :  0.092557184  Accuracy :  98.77  Class Accuracy :  11.074766355140186  Car class accuracy  11.074766355140186
Iter :  49 Batch :  3   Loss :  0.15438044  Accuracy :  97.61  Class Accuracy :  10.225563909774435  Car class accuracy  10.225563909774435
Iter :  49 Batch :  4   Loss :  0.30627286  Accuracy :  91.05499999999999  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  49 Batch :  5   Loss :  0.7301905  Accuracy :  96.325  Class Accuracy :  9.605359317904993  Car class accuracy  9.605359317904993
Iter :  49 Batch :  6   Loss :  0.25461763  Accuracy :  94.03  Class Accuracy :  15.894736842105264  Car class accuracy  15.894736842105264
Iter :  49 Batch :  7   Loss :  0.39706594  Accuracy :  95.325  Class Accuracy :  11.238591916558018  Car class accuracy  11.238591916558018
Iter :  49 Batch :  8   Loss :  0.6691137  Accuracy :  91.375  Class Accuracy :  12.698492462311556  Car class accuracy  12.698492462311556
Iter :  49 Batch :  9   Loss :  0.5843289  Accuracy :  86.615  Class Accuracy :  15.484444444444446  Car class accuracy  15.484444444444446
Iter :  49 Batch :  10   Loss :  0.13081856  Accuracy :  98.115  Class Accuracy :  10.62937062937063  Car class accuracy  10.62937062937063
Iter :  49 Batch :  11   Loss :  0.1722939  Accuracy :  97.545  Class Accuracy :  10.357142857142858  Car class accuracy  10.357142857142858
Iter :  49 Batch :  12   Loss :  0.31594107  Accuracy :  94.12  Class Accuracy :  13.919491525423727  Car class accuracy  13.919491525423727
Iter :  49 Batch :  13   Loss :  0.49242842  Accuracy :  88.255  Class Accuracy :  16.05769230769231  Car class accuracy  16.05769230769231
Iter :  49 Batch :  14   Loss :  0.40423477  Accuracy :  87.965  Class Accuracy :  20.575221238938056  Car class accuracy  20.575221238938056
Iter :  49 Batch :  15   Loss :  0.54724103  Accuracy :  88.49000000000001  Class Accuracy :  14.596662030598054  Car class accuracy  14.596662030598054
Iter :  49 Batch :  16   Loss :  0.12655012  Accuracy :  96.85000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 50 loss : 0.5279067 Accuracy: 90.54371024734984 Class Accuracy : 14.532176275831842/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__50_0.ckpt
saved prediction of 0 accuracy :  0.98645  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 1 accuracy :  0.91995  class accuracy :  0.10053418803418804  car_class_accuracy :  0.10053418803418804
saved prediction of 2 accuracy :  0.977  class accuracy :  0.09370078740157481  car_class_accuracy :  0.09370078740157481
saved prediction of 3 accuracy :  0.9067  class accuracy :  0.17651006711409395  car_class_accuracy :  0.17651006711409395
saved prediction of 4 accuracy :  0.87395  class accuracy :  0.15949367088607597  car_class_accuracy :  0.15949367088607597
saved prediction of 5 accuracy :  0.95735  class accuracy :  0.0745874587458746  car_class_accuracy :  0.0745874587458746
saved prediction of 6 accuracy :  0.94785  class accuracy :  0.04372384937238494  car_class_accuracy :  0.04372384937238494
saved prediction of 7 accuracy :  0.9494  class accuracy :  0.10607168983174835  car_class_accuracy :  0.10607168983174835
saved prediction of 8 accuracy :  0.94695  class accuracy :  0.1066815144766147  car_class_accuracy :  0.1066815144766147
saved prediction of 9 accuracy :  0.9465  class accuracy :  0.11577660008153282  car_class_accuracy :  0.11577660008153282
saved prediction of 10 accuracy :  0.98775  class accuracy :  0.03398058252427184  car_class_accuracy :  0.03398058252427184
saved prediction of 11 accuracy :  0.94225  class accuracy :  0.09701419481155163  car_class_accuracy :  0.09701419481155163
saved prediction of 12 accuracy :  0.92535  class accuracy :  0.09511111111111112  car_class_accuracy :  0.09511111111111112
saved prediction of 13 accuracy :  0.9007  class accuracy :  0.19166666666666668  car_class_accuracy :  0.19166666666666668
saved prediction of 14 accuracy :  0.9703  class accuracy :  0.09561380742278744  car_class_accuracy :  0.09561380742278744
saved prediction of 15 accuracy :  0.95955  class accuracy :  0.1273936170212766  car_class_accuracy :  0.1273936170212766
saved prediction of 16 accuracy :  0.8292  class accuracy :  0.12533202164289228  car_class_accuracy :  0.12533202164289228
saved prediction of 17 accuracy :  0.9871  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 18 accuracy :  0.92365  class accuracy :  0.09805929919137465  car_class_accuracy :  0.09805929919137465
saved prediction of 19 accuracy :  0.97685  class accuracy :  0.08601398601398601  car_class_accuracy :  0.08601398601398601
saved prediction of 20 accuracy :  0.9225  class accuracy :  0.17083333333333334  car_class_accuracy :  0.17083333333333334
saved prediction of 21 accuracy :  0.8828  class accuracy :  0.1611328125  car_class_accuracy :  0.1611328125
saved prediction of 22 accuracy :  0.96375  class accuracy :  0.08033707865168539  car_class_accuracy :  0.08033707865168539
saved prediction of 23 accuracy :  0.9486  class accuracy :  0.041853035143769965  car_class_accuracy :  0.041853035143769965
saved prediction of 24 accuracy :  0.94595  class accuracy :  0.11435714285714285  car_class_accuracy :  0.11435714285714285
saved prediction of 25 accuracy :  0.9489  class accuracy :  0.10864745011086474  car_class_accuracy :  0.10864745011086474
saved prediction of 26 accuracy :  0.9464  class accuracy :  0.113050944476245  car_class_accuracy :  0.113050944476245
saved prediction of 27 accuracy :  0.9881  class accuracy :  0.02537313432835821  car_class_accuracy :  0.02537313432835821
saved prediction of 28 accuracy :  0.9507  class accuracy :  0.08436317780580076  car_class_accuracy :  0.08436317780580076
saved prediction of 29 accuracy :  0.9264  class accuracy :  0.09725643896976484  car_class_accuracy :  0.09725643896976484
saved prediction of 30 accuracy :  0.9011  class accuracy :  0.15294117647058822  car_class_accuracy :  0.15294117647058822
saved prediction of 31 accuracy :  0.9741  class accuracy :  0.0956781914893617  car_class_accuracy :  0.0956781914893617
saved prediction of 32 accuracy :  0.97035  class accuracy :  0.09722222222222222  car_class_accuracy :  0.09722222222222222
saved prediction of 33 accuracy :  0.8419  class accuracy :  0.13248  car_class_accuracy :  0.13248
saved prediction of 34 accuracy :  0.98685  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 35 accuracy :  0.92755  class accuracy :  0.10945303210463733  car_class_accuracy :  0.10945303210463733
saved prediction of 36 accuracy :  0.978  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 37 accuracy :  0.92905  class accuracy :  0.1683453237410072  car_class_accuracy :  0.1683453237410072
saved prediction of 38 accuracy :  0.8775  class accuracy :  0.15933333333333333  car_class_accuracy :  0.15933333333333333
saved prediction of 39 accuracy :  0.9564  class accuracy :  0.07724137931034483  car_class_accuracy :  0.07724137931034483
saved prediction of 40 accuracy :  0.9479  class accuracy :  0.04439834024896265  car_class_accuracy :  0.04439834024896265
saved prediction of 41 accuracy :  0.95105  class accuracy :  0.11196207148067103  car_class_accuracy :  0.11196207148067103
saved prediction of 42 accuracy :  0.90915  class accuracy :  0.13650793650793652  car_class_accuracy :  0.13650793650793652
saved prediction of 43 accuracy :  0.9489  class accuracy :  0.10769682726204466  car_class_accuracy :  0.10769682726204466
saved prediction of 44 accuracy :  0.98795  class accuracy :  0.028415300546448086  car_class_accuracy :  0.028415300546448086
saved prediction of 45 accuracy :  0.9362  class accuracy :  0.09596499756927565  car_class_accuracy :  0.09596499756927565
saved prediction of 46 accuracy :  0.9194  class accuracy :  0.10222110045431601  car_class_accuracy :  0.10222110045431601
saved prediction of 47 accuracy :  0.9059  class accuracy :  0.1588235294117647  car_class_accuracy :  0.1588235294117647
saved prediction of 48 accuracy :  0.97775  class accuracy :  0.09677332616294702  car_class_accuracy :  0.09677332616294702
saved prediction of 49 accuracy :  0.96225  class accuracy :  0.11648648648648649  car_class_accuracy :  0.11648648648648649
saved prediction of 50 accuracy :  0.84425  class accuracy :  0.12091965639211724  car_class_accuracy :  0.12091965639211724
saved prediction of 51 accuracy :  0.9875  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 52 accuracy :  0.92125  class accuracy :  0.100857908847185  car_class_accuracy :  0.100857908847185
saved prediction of 53 accuracy :  0.9793  class accuracy :  0.08716216216216216  car_class_accuracy :  0.08716216216216216
saved prediction of 54 accuracy :  0.9282  class accuracy :  0.16853146853146855  car_class_accuracy :  0.16853146853146855
saved prediction of 55 accuracy :  0.89965  class accuracy :  0.13560673162090348  car_class_accuracy :  0.13560673162090348
saved prediction of 56 accuracy :  0.96195  class accuracy :  0.08001443001443001  car_class_accuracy :  0.08001443001443001
saved prediction of 57 accuracy :  0.9499  class accuracy :  0.04562697576396206  car_class_accuracy :  0.04562697576396206
saved prediction of 58 accuracy :  0.9399  class accuracy :  0.11723646723646723  car_class_accuracy :  0.11723646723646723
saved prediction of 59 accuracy :  0.90565  class accuracy :  0.14543429844097994  car_class_accuracy :  0.14543429844097994
saved prediction of 60 accuracy :  0.94565  class accuracy :  0.11447574334898278  car_class_accuracy :  0.11447574334898278
saved prediction of 61 accuracy :  0.9872  class accuracy :  0.03333333333333333  car_class_accuracy :  0.03333333333333333
saved prediction of 62 accuracy :  0.93915  class accuracy :  0.09334257975034674  car_class_accuracy :  0.09334257975034674
saved prediction of 63 accuracy :  0.92325  class accuracy :  0.09739555073250136  car_class_accuracy :  0.09739555073250136
saved prediction of 64 accuracy :  0.9042  class accuracy :  0.135  car_class_accuracy :  0.135
saved prediction of 65 accuracy :  0.9718  class accuracy :  0.09702996552638557  car_class_accuracy :  0.09702996552638557
saved prediction of 66 accuracy :  0.96915  class accuracy :  0.0978891820580475  car_class_accuracy :  0.0978891820580475
saved prediction of 67 accuracy :  0.80675  class accuracy :  0.12867608581894296  car_class_accuracy :  0.12867608581894296
saved prediction of 68 accuracy :  0.9859  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 69 accuracy :  0.9268  class accuracy :  0.105320994794679  car_class_accuracy :  0.105320994794679
saved prediction of 70 accuracy :  0.97615  class accuracy :  0.08689655172413793  car_class_accuracy :  0.08689655172413793
saved prediction of 71 accuracy :  0.9296  class accuracy :  0.1631578947368421  car_class_accuracy :  0.1631578947368421
saved prediction of 72 accuracy :  0.8945  class accuracy :  0.15259615384615383  car_class_accuracy :  0.15259615384615383
saved prediction of 73 accuracy :  0.9612  class accuracy :  0.07398316970546984  car_class_accuracy :  0.07398316970546984
saved prediction of 74 accuracy :  0.94735  class accuracy :  0.047734457323498417  car_class_accuracy :  0.047734457323498417
saved prediction of 75 accuracy :  0.9417  class accuracy :  0.11531272465851905  car_class_accuracy :  0.11531272465851905
saved prediction of 76 accuracy :  0.90255  class accuracy :  0.14453961456102785  car_class_accuracy :  0.14453961456102785
saved prediction of 77 accuracy :  0.9454  class accuracy :  0.1160923623445826  car_class_accuracy :  0.1160923623445826
saved prediction of 78 accuracy :  0.98755  class accuracy :  0.026395939086294416  car_class_accuracy :  0.026395939086294416
saved prediction of 79 accuracy :  0.93605  class accuracy :  0.09544145873320538  car_class_accuracy :  0.09544145873320538
saved prediction of 80 accuracy :  0.9301  class accuracy :  0.09331084879145587  car_class_accuracy :  0.09331084879145587
saved prediction of 81 accuracy :  0.90445  class accuracy :  0.135  car_class_accuracy :  0.135
saved prediction of 82 accuracy :  0.97035  class accuracy :  0.09595162986330179  car_class_accuracy :  0.09595162986330179
saved prediction of 83 accuracy :  0.95875  class accuracy :  0.10962025316455697  car_class_accuracy :  0.10962025316455697
saved prediction of 84 accuracy :  0.83785  class accuracy :  0.12884267631103075  car_class_accuracy :  0.12884267631103075
saved prediction of 85 accuracy :  0.98825  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 86 accuracy :  0.92585  class accuracy :  0.10238500851788757  car_class_accuracy :  0.10238500851788757
saved prediction of 87 accuracy :  0.9777  class accuracy :  0.09586206896551724  car_class_accuracy :  0.09586206896551724
saved prediction of 88 accuracy :  0.9222  class accuracy :  0.15467625899280574  car_class_accuracy :  0.15467625899280574
saved prediction of 89 accuracy :  0.8974  class accuracy :  0.15633232016210738  car_class_accuracy :  0.15633232016210738
saved prediction of 90 accuracy :  0.9559  class accuracy :  0.07498341074983411  car_class_accuracy :  0.07498341074983411
saved prediction of 91 accuracy :  0.94665  class accuracy :  0.045307443365695796  car_class_accuracy :  0.045307443365695796
saved prediction of 92 accuracy :  0.94255  class accuracy :  0.12070254110612855  car_class_accuracy :  0.12070254110612855
saved prediction of 93 accuracy :  0.91595  class accuracy :  0.13138528138528138  car_class_accuracy :  0.13138528138528138
saved prediction of 94 accuracy :  0.94815  class accuracy :  0.10830636461704424  car_class_accuracy :  0.10830636461704424
saved prediction of 95 accuracy :  0.98605  class accuracy :  0.035897435897435895  car_class_accuracy :  0.035897435897435895
saved prediction of 96 accuracy :  0.9467  class accuracy :  0.08737486095661846  car_class_accuracy :  0.08737486095661846
saved prediction of 97 accuracy :  0.92555  class accuracy :  0.09414466130884042  car_class_accuracy :  0.09414466130884042
saved prediction of 98 accuracy :  0.9041  class accuracy :  0.15454545454545454  car_class_accuracy :  0.15454545454545454
saved prediction of 99 accuracy :  0.9703  class accuracy :  0.09620815899581589  car_class_accuracy :  0.09620815899581589
Iter :  50 Batch :  0   Loss :  0.4854249  Accuracy :  89.59  Class Accuracy :  16.419213973799128  Car class accuracy  16.419213973799128
Iter :  50 Batch :  1   Loss :  0.51174366  Accuracy :  87.775  Class Accuracy :  20.83149374540103  Car class accuracy  20.83149374540103
Iter :  50 Batch :  2   Loss :  0.12192637  Accuracy :  97.95  Class Accuracy :  10.909090909090908  Car class accuracy  10.909090909090908
Iter :  50 Batch :  3   Loss :  0.23812714  Accuracy :  94.82000000000001  Class Accuracy :  12.251655629139073  Car class accuracy  12.251655629139073
Iter :  50 Batch :  4   Loss :  0.5083756  Accuracy :  85.995  Class Accuracy :  25.833333333333336  Car class accuracy  25.833333333333336
Iter :  50 Batch :  5   Loss :  0.40419263  Accuracy :  96.19  Class Accuracy :  11.078555190704725  Car class accuracy  11.078555190704725
Iter :  50 Batch :  6   Loss :  0.25841406  Accuracy :  97.72999999999999  Class Accuracy :  8.38888888888889  Car class accuracy  8.38888888888889
Iter :  50 Batch :  7   Loss :  0.34967086  Accuracy :  93.97  Class Accuracy :  12.716829408385985  Car class accuracy  12.716829408385985
Iter :  50 Batch :  8   Loss :  0.51880723  Accuracy :  94.28999999999999  Class Accuracy :  11.19110441010177  Car class accuracy  11.19110441010177
Iter :  50 Batch :  9   Loss :  0.5368322  Accuracy :  88.775  Class Accuracy :  15.108388312912346  Car class accuracy  15.108388312912346
Iter :  50 Batch :  10   Loss :  0.094490394  Accuracy :  98.57000000000001  Class Accuracy :  10.62992125984252  Car class accuracy  10.62992125984252
Iter :  50 Batch :  11   Loss :  0.19688743  Accuracy :  98.36500000000001  Class Accuracy :  7.054794520547945  Car class accuracy  7.054794520547945
Iter :  50 Batch :  12   Loss :  0.23943296  Accuracy :  96.60499999999999  Class Accuracy :  10.132158590308372  Car class accuracy  10.132158590308372
Iter :  50 Batch :  13   Loss :  0.45799857  Accuracy :  93.38499999999999  Class Accuracy :  12.311586051743532  Car class accuracy  12.311586051743532
Iter :  50 Batch :  14   Loss :  0.20190777  Accuracy :  95.37  Class Accuracy :  13.89121338912134  Car class accuracy  13.89121338912134
Iter :  50 Batch :  15   Loss :  0.510059  Accuracy :  93.4  Class Accuracy :  10.972602739726026  Car class accuracy  10.972602739726026
Iter :  50 Batch :  16   Loss :  0.061399013  Accuracy :  99.215  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 51 loss : 0.5241206 Accuracy: 90.61617205542727 Class Accuracy : 14.489074467129656
Iter :  51 Batch :  0   Loss :  0.2784021  Accuracy :  95.365  Class Accuracy :  12.08456243854474  Car class accuracy  12.08456243854474
Iter :  51 Batch :  1   Loss :  0.3681392  Accuracy :  93.82000000000001  Class Accuracy :  15.247597930524758  Car class accuracy  15.247597930524758
Iter :  51 Batch :  2   Loss :  0.08790306  Accuracy :  99.07000000000001  Class Accuracy :  8.829787234042554  Car class accuracy  8.829787234042554
Iter :  51 Batch :  3   Loss :  0.18618652  Accuracy :  97.39999999999999  Class Accuracy :  10.337837837837839  Car class accuracy  10.337837837837839
Iter :  51 Batch :  4   Loss :  0.38615394  Accuracy :  87.17  Class Accuracy :  22.142857142857146  Car class accuracy  22.142857142857146
Iter :  51 Batch :  5   Loss :  3.2985392  Accuracy :  88.36  Class Accuracy :  1.814559942049982  Car class accuracy  1.814559942049982
Iter :  51 Batch :  6   Loss :  0.303835  Accuracy :  92.405  Class Accuracy :  16.40449438202247  Car class accuracy  16.40449438202247
Iter :  51 Batch :  7   Loss :  0.690268  Accuracy :  88.94999999999999  Class Accuracy :  14.85230024213075  Car class accuracy  14.85230024213075
Iter :  51 Batch :  8   Loss :  0.5638855  Accuracy :  87.86  Class Accuracy :  17.607433217189314  Car class accuracy  17.607433217189314
Iter :  51 Batch :  9   Loss :  0.90821135  Accuracy :  71.925  Class Accuracy :  28.28282828282828  Car class accuracy  28.28282828282828
Iter :  51 Batch :  10   Loss :  0.544621  Accuracy :  83.72500000000001  Class Accuracy :  27.209302325581397  Car class accuracy  27.209302325581397
Iter :  51 Batch :  11   Loss :  0.6660461  Accuracy :  81.035  Class Accuracy :  23.701298701298704  Car class accuracy  23.701298701298704
Iter :  51 Batch :  12   Loss :  0.58501524  Accuracy :  79.095  Class Accuracy :  25.604395604395602  Car class accuracy  25.604395604395602
Iter :  51 Batch :  13   Loss :  0.6831518  Accuracy :  80.245  Class Accuracy :  20.807416267942585  Car class accuracy  20.807416267942585
Iter :  51 Batch :  14   Loss :  0.55774266  Accuracy :  84.22  Class Accuracy :  23.056768558951966  Car class accuracy  23.056768558951966
Iter :  51 Batch :  15   Loss :  0.87660354  Accuracy :  82.11500000000001  Class Accuracy :  17.902673063742288  Car class accuracy  17.902673063742288
Iter :  51 Batch :  16   Loss :  0.5269117  Accuracy :  84.39  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 52 loss : 0.5270669 Accuracy: 90.544456398641 Class Accuracy : 14.533889696156535
Iter :  52 Batch :  0   Loss :  0.38508302  Accuracy :  89.61  Class Accuracy :  19.24628450106157  Car class accuracy  19.24628450106157
Iter :  52 Batch :  1   Loss :  0.6761667  Accuracy :  81.875  Class Accuracy :  26.350531107739002  Car class accuracy  26.350531107739002
Iter :  52 Batch :  2   Loss :  0.4840374  Accuracy :  76.36500000000001  Class Accuracy :  41.039603960396036  Car class accuracy  41.039603960396036
Iter :  52 Batch :  3   Loss :  0.5354038  Accuracy :  80.07  Class Accuracy :  27.280000000000005  Car class accuracy  27.280000000000005
Iter :  52 Batch :  4   Loss :  0.5547871  Accuracy :  77.05  Class Accuracy :  25.217391304347824  Car class accuracy  25.217391304347824
Iter :  52 Batch :  5   Loss :  0.736739  Accuracy :  93.97  Class Accuracy :  10.198863636363635  Car class accuracy  10.198863636363635
Iter :  52 Batch :  6   Loss :  0.34253177  Accuracy :  89.995  Class Accuracy :  17.099999999999998  Car class accuracy  17.099999999999998
Iter :  52 Batch :  7   Loss :  0.5470788  Accuracy :  89.485  Class Accuracy :  14.593275488069416  Car class accuracy  14.593275488069416
Iter :  52 Batch :  8   Loss :  0.75065184  Accuracy :  89.11  Class Accuracy :  14.627568493150683  Car class accuracy  14.627568493150683
Iter :  52 Batch :  9   Loss :  0.8753682  Accuracy :  73.91  Class Accuracy :  24.50589301903899  Car class accuracy  24.50589301903899
Iter :  52 Batch :  10   Loss :  0.41051686  Accuracy :  85.475  Class Accuracy :  25.64625850340136  Car class accuracy  25.64625850340136
Iter :  52 Batch :  11   Loss :  0.49877423  Accuracy :  79.97  Class Accuracy :  32.61744966442953  Car class accuracy  32.61744966442953
Iter :  52 Batch :  12   Loss :  0.50304216  Accuracy :  83.255  Class Accuracy :  22.903225806451616  Car class accuracy  22.903225806451616
Iter :  52 Batch :  13   Loss :  0.78122616  Accuracy :  85.505  Class Accuracy :  16.963042313872524  Car class accuracy  16.963042313872524
Iter :  52 Batch :  14   Loss :  0.37132794  Accuracy :  87.225  Class Accuracy :  20.120967741935488  Car class accuracy  20.120967741935488
Iter :  52 Batch :  15   Loss :  0.74466485  Accuracy :  84.065  Class Accuracy :  16.158001350438894  Car class accuracy  16.158001350438894
Iter :  52 Batch :  16   Loss :  0.37377247  Accuracy :  88.295  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 53 loss : 0.52774584 Accuracy: 90.42887222222222 Class Accuracy : 14.65332550955213
Iter :  53 Batch :  0   Loss :  0.44687685  Accuracy :  90.095  Class Accuracy :  16.460446247464507  Car class accuracy  16.460446247464507
Iter :  53 Batch :  1   Loss :  0.5760058  Accuracy :  89.235  Class Accuracy :  18.387553041018386  Car class accuracy  18.387553041018386
Iter :  53 Batch :  2   Loss :  0.31846803  Accuracy :  92.94  Class Accuracy :  15.243243243243242  Car class accuracy  15.243243243243242
Iter :  53 Batch :  3   Loss :  0.3745847  Accuracy :  88.94  Class Accuracy :  20.52631578947369  Car class accuracy  20.52631578947369
Iter :  53 Batch :  4   Loss :  0.4048981  Accuracy :  85.5  Class Accuracy :  17.82608695652174  Car class accuracy  17.82608695652174
Iter :  53 Batch :  5   Loss :  0.7756179  Accuracy :  95.49  Class Accuracy :  10.076496966499604  Car class accuracy  10.076496966499604
Iter :  53 Batch :  6   Loss :  0.28158855  Accuracy :  92.42  Class Accuracy :  13.588235294117649  Car class accuracy  13.588235294117649
Iter :  53 Batch :  7   Loss :  0.8040541  Accuracy :  92.15  Class Accuracy :  11.530266343825666  Car class accuracy  11.530266343825666
Iter :  53 Batch :  8   Loss :  0.7340326  Accuracy :  92.355  Class Accuracy :  12.659102121361618  Car class accuracy  12.659102121361618
Iter :  53 Batch :  9   Loss :  0.6193079  Accuracy :  86.13499999999999  Class Accuracy :  16.82839173405211  Car class accuracy  16.82839173405211
Iter :  53 Batch :  10   Loss :  0.36844945  Accuracy :  90.245  Class Accuracy :  18.367346938775512  Car class accuracy  18.367346938775512
Iter :  53 Batch :  11   Loss :  0.41349536  Accuracy :  87.25500000000001  Class Accuracy :  21.757575757575758  Car class accuracy  21.757575757575758
Iter :  53 Batch :  12   Loss :  0.41326064  Accuracy :  88.75999999999999  Class Accuracy :  16.883116883116884  Car class accuracy  16.883116883116884
Iter :  53 Batch :  13   Loss :  0.55056036  Accuracy :  88.945  Class Accuracy :  15.259533898305083  Car class accuracy  15.259533898305083
Iter :  53 Batch :  14   Loss :  0.37460294  Accuracy :  88.96  Class Accuracy :  19.020408163265305  Car class accuracy  19.020408163265305
Iter :  53 Batch :  15   Loss :  0.5705953  Accuracy :  90.625  Class Accuracy :  12.861423220973784  Car class accuracy  12.861423220973784
Iter :  53 Batch :  16   Loss :  0.3456393  Accuracy :  91.095  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 54 loss : 0.527092 Accuracy: 90.42217011995639 Class Accuracy : 14.66223391624483
Iter :  54 Batch :  0   Loss :  0.37300447  Accuracy :  93.44  Class Accuracy :  13.97938144329897  Car class accuracy  13.97938144329897
Iter :  54 Batch :  1   Loss :  0.48064843  Accuracy :  92.92  Class Accuracy :  15.10653409090909  Car class accuracy  15.10653409090909
Iter :  54 Batch :  2   Loss :  0.2645541  Accuracy :  92.95  Class Accuracy :  17.747252747252745  Car class accuracy  17.747252747252745
Iter :  54 Batch :  3   Loss :  0.36028337  Accuracy :  89.63  Class Accuracy :  18.7012987012987  Car class accuracy  18.7012987012987
Iter :  54 Batch :  4   Loss :  0.40701652  Accuracy :  88.05  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  54 Batch :  5   Loss :  0.52218115  Accuracy :  96.085  Class Accuracy :  9.674634794156708  Car class accuracy  9.674634794156708
Iter :  54 Batch :  6   Loss :  0.2532537  Accuracy :  94.105  Class Accuracy :  14.711538461538462  Car class accuracy  14.711538461538462
Iter :  54 Batch :  7   Loss :  0.45308843  Accuracy :  94.975  Class Accuracy :  11.486022560078471  Car class accuracy  11.486022560078471
Iter :  54 Batch :  8   Loss :  0.5157324  Accuracy :  93.41000000000001  Class Accuracy :  12.943548387096776  Car class accuracy  12.943548387096776
Iter :  54 Batch :  9   Loss :  1.0051872  Accuracy :  87.86  Class Accuracy :  12.594377510040161  Car class accuracy  12.594377510040161
Iter :  54 Batch :  10   Loss :  0.2663498  Accuracy :  94.49499999999999  Class Accuracy :  13.46774193548387  Car class accuracy  13.46774193548387
Iter :  54 Batch :  11   Loss :  0.32593745  Accuracy :  89.925  Class Accuracy :  20.215827338129493  Car class accuracy  20.215827338129493
Iter :  54 Batch :  12   Loss :  0.4658135  Accuracy :  83.22500000000001  Class Accuracy :  26.153846153846157  Car class accuracy  26.153846153846157
Iter :  54 Batch :  13   Loss :  0.47800884  Accuracy :  92.445  Class Accuracy :  11.876085697741749  Car class accuracy  11.876085697741749
Iter :  54 Batch :  14   Loss :  0.2855729  Accuracy :  91.27  Class Accuracy :  15.328185328185329  Car class accuracy  15.328185328185329
Iter :  54 Batch :  15   Loss :  0.58692515  Accuracy :  91.79  Class Accuracy :  11.21584699453552  Car class accuracy  11.21584699453552
Iter :  54 Batch :  16   Loss :  0.22801939  Accuracy :  95.295  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 55 loss : 0.5252836 Accuracy: 90.44860813704497 Class Accuracy : 14.65789145967891/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  55 Batch :  0   Loss :  0.49030033  Accuracy :  92.815  Class Accuracy :  9.721030042918455  Car class accuracy  9.721030042918455
Iter :  55 Batch :  1   Loss :  0.45164415  Accuracy :  93.445  Class Accuracy :  14.680397727272727  Car class accuracy  14.680397727272727
Iter :  55 Batch :  2   Loss :  0.22969559  Accuracy :  95.755  Class Accuracy :  12.704081632653061  Car class accuracy  12.704081632653061
Iter :  55 Batch :  3   Loss :  0.3779634  Accuracy :  89.52  Class Accuracy :  19.935897435897438  Car class accuracy  19.935897435897438
Iter :  55 Batch :  4   Loss :  0.40296805  Accuracy :  86.13499999999999  Class Accuracy :  20.52631578947369  Car class accuracy  20.52631578947369
Iter :  55 Batch :  5   Loss :  0.65236795  Accuracy :  95.015  Class Accuracy :  9.573848597141344  Car class accuracy  9.573848597141344
Iter :  55 Batch :  6   Loss :  0.2982577  Accuracy :  95.99499999999999  Class Accuracy :  12.060301507537687  Car class accuracy  12.060301507537687
Iter :  55 Batch :  7   Loss :  0.36060318  Accuracy :  93.23  Class Accuracy :  13.274917853231106  Car class accuracy  13.274917853231106
Iter :  55 Batch :  8   Loss :  0.8176283  Accuracy :  93.135  Class Accuracy :  11.057019006335445  Car class accuracy  11.057019006335445
Iter :  55 Batch :  9   Loss :  0.5368695  Accuracy :  86.33  Class Accuracy :  17.452574525745256  Car class accuracy  17.452574525745256
Iter :  55 Batch :  10   Loss :  0.21913013  Accuracy :  95.405  Class Accuracy :  13.140495867768594  Car class accuracy  13.140495867768594
Iter :  55 Batch :  11   Loss :  0.3681416  Accuracy :  88.21  Class Accuracy :  21.717791411042946  Car class accuracy  21.717791411042946
Iter :  55 Batch :  12   Loss :  0.29724076  Accuracy :  91.605  Class Accuracy :  18.730853391684903  Car class accuracy  18.730853391684903
Iter :  55 Batch :  13   Loss :  0.5196591  Accuracy :  90.365  Class Accuracy :  14.45727482678984  Car class accuracy  14.45727482678984
Iter :  55 Batch :  14   Loss :  0.3074871  Accuracy :  88.325  Class Accuracy :  18.81679389312977  Car class accuracy  18.81679389312977
Iter :  55 Batch :  15   Loss :  0.5970398  Accuracy :  89.17500000000001  Class Accuracy :  13.347079037800686  Car class accuracy  13.347079037800686
Iter :  55 Batch :  16   Loss :  0.2775583  Accuracy :  90.795  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 56 loss : 0.52346945 Accuracy: 90.4671451104101 Class Accuracy : 14.64949242469666
Iter :  56 Batch :  0   Loss :  0.28967652  Accuracy :  94.17  Class Accuracy :  15.005202913631635  Car class accuracy  15.005202913631635
Iter :  56 Batch :  1   Loss :  0.5993458  Accuracy :  85.785  Class Accuracy :  21.96415770609319  Car class accuracy  21.96415770609319
Iter :  56 Batch :  2   Loss :  0.19195855  Accuracy :  93.895  Class Accuracy :  13.72340425531915  Car class accuracy  13.72340425531915
Iter :  56 Batch :  3   Loss :  0.37113866  Accuracy :  86.26  Class Accuracy :  20.814814814814813  Car class accuracy  20.814814814814813
Iter :  56 Batch :  4   Loss :  0.41932538  Accuracy :  81.745  Class Accuracy :  21.818181818181817  Car class accuracy  21.818181818181817
Iter :  56 Batch :  5   Loss :  0.60479563  Accuracy :  92.60000000000001  Class Accuracy :  13.341219768664564  Car class accuracy  13.341219768664564
Iter :  56 Batch :  6   Loss :  0.26900545  Accuracy :  93.7  Class Accuracy :  16.751269035532996  Car class accuracy  16.751269035532996
Iter :  56 Batch :  7   Loss :  0.4777545  Accuracy :  89.435  Class Accuracy :  15.766002098635887  Car class accuracy  15.766002098635887
Iter :  56 Batch :  8   Loss :  0.6232422  Accuracy :  91.825  Class Accuracy :  14.864982578397212  Car class accuracy  14.864982578397212
Iter :  56 Batch :  9   Loss :  0.54397357  Accuracy :  87.205  Class Accuracy :  16.495495495495497  Car class accuracy  16.495495495495497
Iter :  56 Batch :  10   Loss :  0.17017955  Accuracy :  96.09  Class Accuracy :  18.84297520661157  Car class accuracy  18.84297520661157
Iter :  56 Batch :  11   Loss :  0.27274272  Accuracy :  93.515  Class Accuracy :  15.102040816326529  Car class accuracy  15.102040816326529
Iter :  56 Batch :  12   Loss :  0.3918368  Accuracy :  86.97500000000001  Class Accuracy :  21.68181818181818  Car class accuracy  21.68181818181818
Iter :  56 Batch :  13   Loss :  0.48451602  Accuracy :  95.33500000000001  Class Accuracy :  11.330998248686514  Car class accuracy  11.330998248686514
Iter :  56 Batch :  14   Loss :  0.23017432  Accuracy :  93.47999999999999  Class Accuracy :  15.401785714285715  Car class accuracy  15.401785714285715
Iter :  56 Batch :  15   Loss :  0.52858216  Accuracy :  92.36999999999999  Class Accuracy :  11.269146608315099  Car class accuracy  11.269146608315099
Iter :  56 Batch :  16   Loss :  0.19459082  Accuracy :  94.925  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 57 loss : 0.52115935 Accuracy: 90.47888946280992 Class Accuracy : 14.665124784243114
Iter :  57 Batch :  0   Loss :  0.5481558  Accuracy :  93.49  Class Accuracy :  9.66950959488273  Car class accuracy  9.66950959488273
Iter :  57 Batch :  1   Loss :  0.38260704  Accuracy :  93.86  Class Accuracy :  14.948680351906157  Car class accuracy  14.948680351906157
Iter :  57 Batch :  2   Loss :  0.17441386  Accuracy :  97.675  Class Accuracy :  8.99497487437186  Car class accuracy  8.99497487437186
Iter :  57 Batch :  3   Loss :  0.2626593  Accuracy :  94.135  Class Accuracy :  13.401360544217686  Car class accuracy  13.401360544217686
Iter :  57 Batch :  4   Loss :  0.26550162  Accuracy :  92.92  Class Accuracy :  15.909090909090908  Car class accuracy  15.909090909090908
Iter :  57 Batch :  5   Loss :  0.85540116  Accuracy :  96.27  Class Accuracy :  9.230769230769232  Car class accuracy  9.230769230769232
Iter :  57 Batch :  6   Loss :  0.22894788  Accuracy :  94.66499999999999  Class Accuracy :  15.337078651685394  Car class accuracy  15.337078651685394
Iter :  57 Batch :  7   Loss :  0.51032454  Accuracy :  94.84  Class Accuracy :  10.004875670404681  Car class accuracy  10.004875670404681
Iter :  57 Batch :  8   Loss :  0.50106484  Accuracy :  94.32000000000001  Class Accuracy :  12.808072133963073  Car class accuracy  12.808072133963073
Iter :  57 Batch :  9   Loss :  0.4607538  Accuracy :  90.925  Class Accuracy :  14.290187891440501  Car class accuracy  14.290187891440501
Iter :  57 Batch :  10   Loss :  0.2532282  Accuracy :  94.36  Class Accuracy :  14.326241134751774  Car class accuracy  14.326241134751774
Iter :  57 Batch :  11   Loss :  0.35612372  Accuracy :  90.64999999999999  Class Accuracy :  17.161290322580644  Car class accuracy  17.161290322580644
Iter :  57 Batch :  12   Loss :  0.38297513  Accuracy :  92.325  Class Accuracy :  13.995680345572353  Car class accuracy  13.995680345572353
Iter :  57 Batch :  13   Loss :  0.41242304  Accuracy :  91.11  Class Accuracy :  14.683691236215903  Car class accuracy  14.683691236215903
Iter :  57 Batch :  14   Loss :  0.39741868  Accuracy :  88.03  Class Accuracy :  18.16  Car class accuracy  18.16
Iter :  57 Batch :  15   Loss :  0.48665333  Accuracy :  92.53  Class Accuracy :  11.863699582753824  Car class accuracy  11.863699582753824
Iter :  57 Batch :  16   Loss :  0.17725733  Accuracy :  96.275  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 58 loss : 0.518922 Accuracy: 90.52989340101523 Class Accuracy : 14.630077150885217
Iter :  58 Batch :  0   Loss :  0.32157812  Accuracy :  93.72500000000001  Class Accuracy :  14.04786680541103  Car class accuracy  14.04786680541103
Iter :  58 Batch :  1   Loss :  0.4127874  Accuracy :  94.455  Class Accuracy :  13.660270078180526  Car class accuracy  13.660270078180526
Iter :  58 Batch :  2   Loss :  0.1380593  Accuracy :  97.555  Class Accuracy :  12.135416666666668  Car class accuracy  12.135416666666668
Iter :  58 Batch :  3   Loss :  0.21125698  Accuracy :  95.515  Class Accuracy :  11.631205673758863  Car class accuracy  11.631205673758863
Iter :  58 Batch :  4   Loss :  0.32598564  Accuracy :  91.685  Class Accuracy :  17.857142857142858  Car class accuracy  17.857142857142858
Iter :  58 Batch :  5   Loss :  0.5445723  Accuracy :  96.6  Class Accuracy :  9.3836510838339  Car class accuracy  9.3836510838339
Iter :  58 Batch :  6   Loss :  0.25560775  Accuracy :  95.97  Class Accuracy :  11.121951219512196  Car class accuracy  11.121951219512196
Iter :  58 Batch :  7   Loss :  0.43207607  Accuracy :  94.93  Class Accuracy :  10.734856007944389  Car class accuracy  10.734856007944389
Iter :  58 Batch :  8   Loss :  0.5346343  Accuracy :  95.685  Class Accuracy :  10.658557046979865  Car class accuracy  10.658557046979865
Iter :  58 Batch :  9   Loss :  0.5727934  Accuracy :  89.765  Class Accuracy :  14.982817869415808  Car class accuracy  14.982817869415808
Iter :  58 Batch :  10   Loss :  0.15540725  Accuracy :  97.43  Class Accuracy :  10.785714285714285  Car class accuracy  10.785714285714285
Iter :  58 Batch :  11   Loss :  0.2413537  Accuracy :  95.48  Class Accuracy :  10.77922077922078  Car class accuracy  10.77922077922078
Iter :  58 Batch :  12   Loss :  0.33077624  Accuracy :  90.59  Class Accuracy :  18.24524312896406  Car class accuracy  18.24524312896406
Iter :  58 Batch :  13   Loss :  0.39128274  Accuracy :  92.81  Class Accuracy :  13.258547008547009  Car class accuracy  13.258547008547009
Iter :  58 Batch :  14   Loss :  0.20974182  Accuracy :  94.88499999999999  Class Accuracy :  14.688796680497926  Car class accuracy  14.688796680497926
Iter :  58 Batch :  15   Loss :  0.44136825  Accuracy :  92.19500000000001  Class Accuracy :  12.614023144996594  Car class accuracy  12.614023144996594
Iter :  58 Batch :  16   Loss :  0.13740535  Accuracy :  97.585  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 59 loss : 0.51576334 Accuracy: 90.59760978043913 Class Accuracy : 14.588035203551625
Iter :  59 Batch :  0   Loss :  0.27167025  Accuracy :  93.8  Class Accuracy :  15.284210526315789  Car class accuracy  15.284210526315789
Iter :  59 Batch :  1   Loss :  0.36498314  Accuracy :  92.83500000000001  Class Accuracy :  16.59832953682612  Car class accuracy  16.59832953682612
Iter :  59 Batch :  2   Loss :  0.111492224  Accuracy :  98.675  Class Accuracy :  8.06930693069307  Car class accuracy  8.06930693069307
Iter :  59 Batch :  3   Loss :  0.18537581  Accuracy :  96.55  Class Accuracy :  10.769230769230768  Car class accuracy  10.769230769230768
Iter :  59 Batch :  4   Loss :  0.24851176  Accuracy :  92.80000000000001  Class Accuracy :  17.5  Car class accuracy  17.5
Iter :  59 Batch :  5   Loss :  0.38460296  Accuracy :  97.24000000000001  Class Accuracy :  9.821848739495799  Car class accuracy  9.821848739495799
Iter :  59 Batch :  6   Loss :  0.2496331  Accuracy :  96.72  Class Accuracy :  8.465346534653465  Car class accuracy  8.465346534653465
Iter :  59 Batch :  7   Loss :  0.33822778  Accuracy :  93.345  Class Accuracy :  12.933002481389577  Car class accuracy  12.933002481389577
Iter :  59 Batch :  8   Loss :  0.6915468  Accuracy :  94.755  Class Accuracy :  10.335648148148149  Car class accuracy  10.335648148148149
Iter :  59 Batch :  9   Loss :  0.44004384  Accuracy :  91.05499999999999  Class Accuracy :  14.067028985507246  Car class accuracy  14.067028985507246
Iter :  59 Batch :  10   Loss :  0.094172135  Accuracy :  98.44000000000001  Class Accuracy :  10.232558139534884  Car class accuracy  10.232558139534884
Iter :  59 Batch :  11   Loss :  0.2195388  Accuracy :  96.59  Class Accuracy :  11.47887323943662  Car class accuracy  11.47887323943662
Iter :  59 Batch :  12   Loss :  0.30064234  Accuracy :  88.75999999999999  Class Accuracy :  20.888429752066116  Car class accuracy  20.888429752066116
Iter :  59 Batch :  13   Loss :  0.4996065  Accuracy :  88.12  Class Accuracy :  16.639871382636656  Car class accuracy  16.639871382636656
Iter :  59 Batch :  14   Loss :  0.27789223  Accuracy :  90.46  Class Accuracy :  17.92626728110599  Car class accuracy  17.92626728110599
Iter :  59 Batch :  15   Loss :  0.5992521  Accuracy :  87.945  Class Accuracy :  15.246478873239438  Car class accuracy  15.246478873239438
Iter :  59 Batch :  16   Loss :  0.18442717  Accuracy :  96.045  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 60 loss : 0.51251864 Accuracy: 90.65057899901865 Class Accuracy : 14.556886855033376
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__60_0.ckpt
saved prediction of 0 accuracy :  0.78205  class accuracy :  0.17130833970925785  car_class_accuracy :  0.17130833970925785
saved prediction of 1 accuracy :  0.91305  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 2 accuracy :  0.8889  class accuracy :  0.15511856564488144  car_class_accuracy :  0.15511856564488144
saved prediction of 3 accuracy :  0.9117  class accuracy :  0.15511811023622046  car_class_accuracy :  0.15511811023622046
saved prediction of 4 accuracy :  0.8698  class accuracy :  0.20915032679738563  car_class_accuracy :  0.20915032679738563
saved prediction of 5 accuracy :  0.88775  class accuracy :  0.15164728682170542  car_class_accuracy :  0.15164728682170542
saved prediction of 6 accuracy :  0.89665  class accuracy :  0.13025152957171993  car_class_accuracy :  0.13025152957171993
saved prediction of 7 accuracy :  0.862  class accuracy :  0.16368843069873998  car_class_accuracy :  0.16368843069873998
saved prediction of 8 accuracy :  0.90215  class accuracy :  0.18102564102564103  car_class_accuracy :  0.18102564102564103
saved prediction of 9 accuracy :  0.8112  class accuracy :  0.26836027713625865  car_class_accuracy :  0.26836027713625865
saved prediction of 10 accuracy :  0.9147  class accuracy :  0.1681047018904508  car_class_accuracy :  0.1681047018904508
saved prediction of 11 accuracy :  0.90015  class accuracy :  0.16042780748663102  car_class_accuracy :  0.16042780748663102
saved prediction of 12 accuracy :  0.8778  class accuracy :  0.13929098966026587  car_class_accuracy :  0.13929098966026587
saved prediction of 13 accuracy :  0.8746  class accuracy :  0.1470489977728285  car_class_accuracy :  0.1470489977728285
saved prediction of 14 accuracy :  0.8684  class accuracy :  0.1368421052631579  car_class_accuracy :  0.1368421052631579
saved prediction of 15 accuracy :  0.9243  class accuracy :  0.14810526315789474  car_class_accuracy :  0.14810526315789474
saved prediction of 16 accuracy :  0.84415  class accuracy :  0.24960835509138382  car_class_accuracy :  0.24960835509138382
saved prediction of 17 accuracy :  0.76405  class accuracy :  0.1400414937759336  car_class_accuracy :  0.1400414937759336
saved prediction of 18 accuracy :  0.9191  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 19 accuracy :  0.88445  class accuracy :  0.1532258064516129  car_class_accuracy :  0.1532258064516129
saved prediction of 20 accuracy :  0.88845  class accuracy :  0.1722972972972973  car_class_accuracy :  0.1722972972972973
saved prediction of 21 accuracy :  0.8749  class accuracy :  0.23443708609271524  car_class_accuracy :  0.23443708609271524
saved prediction of 22 accuracy :  0.88155  class accuracy :  0.14310823311748383  car_class_accuracy :  0.14310823311748383
saved prediction of 23 accuracy :  0.89655  class accuracy :  0.13076420640104508  car_class_accuracy :  0.13076420640104508
saved prediction of 24 accuracy :  0.88095  class accuracy :  0.14514462809917356  car_class_accuracy :  0.14514462809917356
saved prediction of 25 accuracy :  0.89165  class accuracy :  0.17043795620437957  car_class_accuracy :  0.17043795620437957
saved prediction of 26 accuracy :  0.8333  class accuracy :  0.2628691983122363  car_class_accuracy :  0.2628691983122363
saved prediction of 27 accuracy :  0.9164  class accuracy :  0.15077536552946388  car_class_accuracy :  0.15077536552946388
saved prediction of 28 accuracy :  0.89815  class accuracy :  0.14223300970873787  car_class_accuracy :  0.14223300970873787
saved prediction of 29 accuracy :  0.8817  class accuracy :  0.1383920076117983  car_class_accuracy :  0.1383920076117983
saved prediction of 30 accuracy :  0.88  class accuracy :  0.14495565410199557  car_class_accuracy :  0.14495565410199557
saved prediction of 31 accuracy :  0.86625  class accuracy :  0.13999999999999999  car_class_accuracy :  0.13999999999999999
saved prediction of 32 accuracy :  0.91665  class accuracy :  0.13858040859088527  car_class_accuracy :  0.13858040859088527
saved prediction of 33 accuracy :  0.8702  class accuracy :  0.22840579710144926  car_class_accuracy :  0.22840579710144926
saved prediction of 34 accuracy :  0.78265  class accuracy :  0.17816277195809832  car_class_accuracy :  0.17816277195809832
saved prediction of 35 accuracy :  0.91605  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 36 accuracy :  0.8717  class accuracy :  0.16685681688533943  car_class_accuracy :  0.16685681688533943
saved prediction of 37 accuracy :  0.91  class accuracy :  0.15144927536231884  car_class_accuracy :  0.15144927536231884
saved prediction of 38 accuracy :  0.87555  class accuracy :  0.20283687943262413  car_class_accuracy :  0.20283687943262413
saved prediction of 39 accuracy :  0.88725  class accuracy :  0.1313840155945419  car_class_accuracy :  0.1313840155945419
saved prediction of 40 accuracy :  0.90215  class accuracy :  0.1312719606465214  car_class_accuracy :  0.1312719606465214
saved prediction of 41 accuracy :  0.8769  class accuracy :  0.1447  car_class_accuracy :  0.1447
saved prediction of 42 accuracy :  0.889  class accuracy :  0.1890817064352856  car_class_accuracy :  0.1890817064352856
saved prediction of 43 accuracy :  0.8375  class accuracy :  0.2408256880733945  car_class_accuracy :  0.2408256880733945
saved prediction of 44 accuracy :  0.9191  class accuracy :  0.16430423509075193  car_class_accuracy :  0.16430423509075193
saved prediction of 45 accuracy :  0.89095  class accuracy :  0.17619047619047618  car_class_accuracy :  0.17619047619047618
saved prediction of 46 accuracy :  0.8917  class accuracy :  0.13484764542936287  car_class_accuracy :  0.13484764542936287
saved prediction of 47 accuracy :  0.8494  class accuracy :  0.1619348054679285  car_class_accuracy :  0.1619348054679285
saved prediction of 48 accuracy :  0.86145  class accuracy :  0.24705882352941178  car_class_accuracy :  0.24705882352941178
saved prediction of 49 accuracy :  0.90505  class accuracy :  0.146  car_class_accuracy :  0.146
saved prediction of 50 accuracy :  0.8398  class accuracy :  0.2628808864265928  car_class_accuracy :  0.2628808864265928
saved prediction of 51 accuracy :  0.77605  class accuracy :  0.1273006134969325  car_class_accuracy :  0.1273006134969325
saved prediction of 52 accuracy :  0.9122  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 53 accuracy :  0.8655  class accuracy :  0.15734494015233952  car_class_accuracy :  0.15734494015233952
saved prediction of 54 accuracy :  0.8918  class accuracy :  0.1820689655172414  car_class_accuracy :  0.1820689655172414
saved prediction of 55 accuracy :  0.8737  class accuracy :  0.20916030534351146  car_class_accuracy :  0.20916030534351146
saved prediction of 56 accuracy :  0.88625  class accuracy :  0.1385981308411215  car_class_accuracy :  0.1385981308411215
saved prediction of 57 accuracy :  0.8988  class accuracy :  0.13948497854077252  car_class_accuracy :  0.13948497854077252
saved prediction of 58 accuracy :  0.88105  class accuracy :  0.14211076280041796  car_class_accuracy :  0.14211076280041796
saved prediction of 59 accuracy :  0.88625  class accuracy :  0.18802612481857767  car_class_accuracy :  0.18802612481857767
saved prediction of 60 accuracy :  0.81415  class accuracy :  0.26646216768916153  car_class_accuracy :  0.26646216768916153
saved prediction of 61 accuracy :  0.9209  class accuracy :  0.16536118363794602  car_class_accuracy :  0.16536118363794602
saved prediction of 62 accuracy :  0.89425  class accuracy :  0.152020202020202  car_class_accuracy :  0.152020202020202
saved prediction of 63 accuracy :  0.88005  class accuracy :  0.13955399061032864  car_class_accuracy :  0.13955399061032864
saved prediction of 64 accuracy :  0.87265  class accuracy :  0.15229411764705883  car_class_accuracy :  0.15229411764705883
saved prediction of 65 accuracy :  0.8748  class accuracy :  0.16666666666666669  car_class_accuracy :  0.16666666666666669
saved prediction of 66 accuracy :  0.9099  class accuracy :  0.14076464746772593  car_class_accuracy :  0.14076464746772593
saved prediction of 67 accuracy :  0.8447  class accuracy :  0.27472826086956526  car_class_accuracy :  0.27472826086956526
saved prediction of 68 accuracy :  0.77415  class accuracy :  0.1528607594936709  car_class_accuracy :  0.1528607594936709
saved prediction of 69 accuracy :  0.91785  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 70 accuracy :  0.86805  class accuracy :  0.164293659621802  car_class_accuracy :  0.164293659621802
saved prediction of 71 accuracy :  0.91235  class accuracy :  0.15928571428571428  car_class_accuracy :  0.15928571428571428
saved prediction of 72 accuracy :  0.8732  class accuracy :  0.20952380952380953  car_class_accuracy :  0.20952380952380953
saved prediction of 73 accuracy :  0.8813  class accuracy :  0.14797360980207352  car_class_accuracy :  0.14797360980207352
saved prediction of 74 accuracy :  0.8856  class accuracy :  0.1471763085399449  car_class_accuracy :  0.1471763085399449
saved prediction of 75 accuracy :  0.8798  class accuracy :  0.14284304047384008  car_class_accuracy :  0.14284304047384008
saved prediction of 76 accuracy :  0.89235  class accuracy :  0.18673253352152436  car_class_accuracy :  0.18673253352152436
saved prediction of 77 accuracy :  0.83985  class accuracy :  0.21572052401746725  car_class_accuracy :  0.21572052401746725
saved prediction of 78 accuracy :  0.92145  class accuracy :  0.1568523790158601  car_class_accuracy :  0.1568523790158601
saved prediction of 79 accuracy :  0.89905  class accuracy :  0.15436893203883495  car_class_accuracy :  0.15436893203883495
saved prediction of 80 accuracy :  0.88655  class accuracy :  0.1462888665997994  car_class_accuracy :  0.1462888665997994
saved prediction of 81 accuracy :  0.8751  class accuracy :  0.1475382932166302  car_class_accuracy :  0.1475382932166302
saved prediction of 82 accuracy :  0.8599  class accuracy :  0.19473684210526315  car_class_accuracy :  0.19473684210526315
saved prediction of 83 accuracy :  0.90575  class accuracy :  0.1441776400722954  car_class_accuracy :  0.1441776400722954
saved prediction of 84 accuracy :  0.85065  class accuracy :  0.25224274406332453  car_class_accuracy :  0.25224274406332453
saved prediction of 85 accuracy :  0.78925  class accuracy :  0.16374903175832686  car_class_accuracy :  0.16374903175832686
saved prediction of 86 accuracy :  0.9331  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 87 accuracy :  0.87785  class accuracy :  0.1540570789031897  car_class_accuracy :  0.1540570789031897
saved prediction of 88 accuracy :  0.90785  class accuracy :  0.16279069767441862  car_class_accuracy :  0.16279069767441862
saved prediction of 89 accuracy :  0.8836  class accuracy :  0.22818791946308722  car_class_accuracy :  0.22818791946308722
saved prediction of 90 accuracy :  0.87395  class accuracy :  0.15273224043715847  car_class_accuracy :  0.15273224043715847
saved prediction of 91 accuracy :  0.88795  class accuracy :  0.14065573770491804  car_class_accuracy :  0.14065573770491804
saved prediction of 92 accuracy :  0.8793  class accuracy :  0.13989528795811518  car_class_accuracy :  0.13989528795811518
saved prediction of 93 accuracy :  0.88975  class accuracy :  0.18651603498542274  car_class_accuracy :  0.18651603498542274
saved prediction of 94 accuracy :  0.8144  class accuracy :  0.29532908704883226  car_class_accuracy :  0.29532908704883226
saved prediction of 95 accuracy :  0.9146  class accuracy :  0.153347022587269  car_class_accuracy :  0.153347022587269
saved prediction of 96 accuracy :  0.904  class accuracy :  0.14926829268292682  car_class_accuracy :  0.14926829268292682
saved prediction of 97 accuracy :  0.87535  class accuracy :  0.13375854214123006  car_class_accuracy :  0.13375854214123006
saved prediction of 98 accuracy :  0.8754  class accuracy :  0.14720564297341293  car_class_accuracy :  0.14720564297341293
saved prediction of 99 accuracy :  0.8649/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  class accuracy :  0.18571428571428572  car_class_accuracy :  0.18571428571428572
Iter :  60 Batch :  0   Loss :  0.50277615  Accuracy :  85.845  Class Accuracy :  21.434426229508198  Car class accuracy  21.434426229508198
Iter :  60 Batch :  1   Loss :  0.4465472  Accuracy :  89.53  Class Accuracy :  18.82602545968883  Car class accuracy  18.82602545968883
Iter :  60 Batch :  2   Loss :  0.12443671  Accuracy :  97.50999999999999  Class Accuracy :  12.105263157894736  Car class accuracy  12.105263157894736
Iter :  60 Batch :  3   Loss :  0.2755202  Accuracy :  93.105  Class Accuracy :  14.580152671755725  Car class accuracy  14.580152671755725
Iter :  60 Batch :  4   Loss :  0.32483062  Accuracy :  90.11  Class Accuracy :  12.307692307692308  Car class accuracy  12.307692307692308
Iter :  60 Batch :  5   Loss :  0.49001372  Accuracy :  94.86  Class Accuracy :  11.59937888198758  Car class accuracy  11.59937888198758
Iter :  60 Batch :  6   Loss :  0.26890865  Accuracy :  97.195  Class Accuracy :  9.76470588235294  Car class accuracy  9.76470588235294
Iter :  60 Batch :  7   Loss :  0.3524758  Accuracy :  92.595  Class Accuracy :  14.080543425521592  Car class accuracy  14.080543425521592
Iter :  60 Batch :  8   Loss :  0.4937715  Accuracy :  95.125  Class Accuracy :  11.099672437997192  Car class accuracy  11.099672437997192
Iter :  60 Batch :  9   Loss :  0.46669927  Accuracy :  91.495  Class Accuracy :  13.234476367006486  Car class accuracy  13.234476367006486
Iter :  60 Batch :  10   Loss :  0.09747684  Accuracy :  98.425  Class Accuracy :  11.074380165289258  Car class accuracy  11.074380165289258
Iter :  60 Batch :  11   Loss :  0.1984691  Accuracy :  96.135  Class Accuracy :  12.546583850931675  Car class accuracy  12.546583850931675
Iter :  60 Batch :  12   Loss :  0.4156091  Accuracy :  90.36  Class Accuracy :  15.908141962421713  Car class accuracy  15.908141962421713
Iter :  60 Batch :  13   Loss :  0.41949716  Accuracy :  96.03  Class Accuracy :  10.256550218340612  Car class accuracy  10.256550218340612
Iter :  60 Batch :  14   Loss :  0.1777178  Accuracy :  96.825  Class Accuracy :  11.567796610169493  Car class accuracy  11.567796610169493
Iter :  60 Batch :  15   Loss :  0.42376924  Accuracy :  94.43  Class Accuracy :  11.265646731571628  Car class accuracy  11.265646731571628
Iter :  60 Batch :  16   Loss :  0.086282596  Accuracy :  98.715  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 61 loss : 0.50948 Accuracy: 90.70582046332046 Class Accuracy : 14.522315773782951
Iter :  61 Batch :  0   Loss :  0.2943047  Accuracy :  94.80499999999999  Class Accuracy :  10.250260688216892  Car class accuracy  10.250260688216892
Iter :  61 Batch :  1   Loss :  0.36885267  Accuracy :  94.825  Class Accuracy :  13.627737226277373  Car class accuracy  13.627737226277373
Iter :  61 Batch :  2   Loss :  0.09644309  Accuracy :  99.115  Class Accuracy :  8.717948717948717  Car class accuracy  8.717948717948717
Iter :  61 Batch :  3   Loss :  0.1873716  Accuracy :  96.7  Class Accuracy :  12.48407643312102  Car class accuracy  12.48407643312102
Iter :  61 Batch :  4   Loss :  0.1809233  Accuracy :  96.765  Class Accuracy :  3.75  Car class accuracy  3.75
Iter :  61 Batch :  5   Loss :  0.43196493  Accuracy :  95.83  Class Accuracy :  10.803409971583571  Car class accuracy  10.803409971583571
Iter :  61 Batch :  6   Loss :  0.19090699  Accuracy :  96.015  Class Accuracy :  13.189189189189191  Car class accuracy  13.189189189189191
Iter :  61 Batch :  7   Loss :  0.6882651  Accuracy :  96.385  Class Accuracy :  7.162842753217682  Car class accuracy  7.162842753217682
Iter :  61 Batch :  8   Loss :  0.4048271  Accuracy :  93.19  Class Accuracy :  13.650574712643676  Car class accuracy  13.650574712643676
Iter :  61 Batch :  9   Loss :  0.40215537  Accuracy :  91.015  Class Accuracy :  16.180811808118083  Car class accuracy  16.180811808118083
Iter :  61 Batch :  10   Loss :  0.15901309  Accuracy :  97.015  Class Accuracy :  11.590909090909092  Car class accuracy  11.590909090909092
Iter :  61 Batch :  11   Loss :  0.31008598  Accuracy :  90.955  Class Accuracy :  18.709677419354836  Car class accuracy  18.709677419354836
Iter :  61 Batch :  12   Loss :  0.2614539  Accuracy :  94.315  Class Accuracy :  13.983402489626556  Car class accuracy  13.983402489626556
Iter :  61 Batch :  13   Loss :  0.36294696  Accuracy :  90.27  Class Accuracy :  16.11645299145299  Car class accuracy  16.11645299145299
Iter :  61 Batch :  14   Loss :  0.26169986  Accuracy :  92.29  Class Accuracy :  16.74897119341564  Car class accuracy  16.74897119341564
Iter :  61 Batch :  15   Loss :  0.3701414  Accuracy :  93.875  Class Accuracy :  12.029391182645206  Car class accuracy  12.029391182645206
Iter :  61 Batch :  16   Loss :  0.15707421  Accuracy :  95.78  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 62 loss : 0.5061251 Accuracy: 90.7695868945869 Class Accuracy : 14.47684216287451
Iter :  62 Batch :  0   Loss :  0.27849096  Accuracy :  93.35  Class Accuracy :  14.124168514412416  Car class accuracy  14.124168514412416
Iter :  62 Batch :  1   Loss :  0.30465427  Accuracy :  93.69  Class Accuracy :  15.99854756717502  Car class accuracy  15.99854756717502
Iter :  62 Batch :  2   Loss :  0.13840176  Accuracy :  96.23  Class Accuracy :  13.134328358208954  Car class accuracy  13.134328358208954
Iter :  62 Batch :  3   Loss :  0.2365517  Accuracy :  95.21  Class Accuracy :  12.03125  Car class accuracy  12.03125
Iter :  62 Batch :  4   Loss :  0.24836937  Accuracy :  92.785  Class Accuracy :  12.222222222222223  Car class accuracy  12.222222222222223
Iter :  62 Batch :  5   Loss :  0.6444555  Accuracy :  95.92500000000001  Class Accuracy :  9.827811114009913  Car class accuracy  9.827811114009913
Iter :  62 Batch :  6   Loss :  0.18459961  Accuracy :  96.42500000000001  Class Accuracy :  11.594202898550725  Car class accuracy  11.594202898550725
Iter :  62 Batch :  7   Loss :  0.33752126  Accuracy :  92.86  Class Accuracy :  13.47466960352423  Car class accuracy  13.47466960352423
Iter :  62 Batch :  8   Loss :  0.3805046  Accuracy :  94.99  Class Accuracy :  12.825229960578186  Car class accuracy  12.825229960578186
Iter :  62 Batch :  9   Loss :  0.7052453  Accuracy :  87.115  Class Accuracy :  15.581188997338064  Car class accuracy  15.581188997338064
Iter :  62 Batch :  10   Loss :  0.14500977  Accuracy :  97.505  Class Accuracy :  11.343283582089551  Car class accuracy  11.343283582089551
Iter :  62 Batch :  11   Loss :  0.3668331  Accuracy :  90.46499999999999  Class Accuracy :  17.29559748427673  Car class accuracy  17.29559748427673
Iter :  62 Batch :  12   Loss :  0.31161627  Accuracy :  91.645  Class Accuracy :  15.86912065439673  Car class accuracy  15.86912065439673
Iter :  62 Batch :  13   Loss :  0.4495425  Accuracy :  90.455  Class Accuracy :  14.876305662451896  Car class accuracy  14.876305662451896
Iter :  62 Batch :  14   Loss :  0.23410733  Accuracy :  92.4  Class Accuracy :  17.109375  Car class accuracy  17.109375
Iter :  62 Batch :  15   Loss :  0.34193665  Accuracy :  93.01  Class Accuracy :  13.535281539558092  Car class accuracy  13.535281539558092
Iter :  62 Batch :  16   Loss :  0.18742593  Accuracy :  95.41  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 63 loss : 0.5032196 Accuracy: 90.81293925233645 Class Accuracy : 14.453231196883786
Iter :  63 Batch :  0   Loss :  0.32515693  Accuracy :  92.89500000000001  Class Accuracy :  15.766423357664234  Car class accuracy  15.766423357664234
Iter :  63 Batch :  1   Loss :  0.34253058  Accuracy :  92.96  Class Accuracy :  16.551724137931036  Car class accuracy  16.551724137931036
Iter :  63 Batch :  2   Loss :  0.13328972  Accuracy :  97.17  Class Accuracy :  13.653846153846155  Car class accuracy  13.653846153846155
Iter :  63 Batch :  3   Loss :  0.29175326  Accuracy :  91.215  Class Accuracy :  17.099236641221374  Car class accuracy  17.099236641221374
Iter :  63 Batch :  4   Loss :  0.31881848  Accuracy :  91.2  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  63 Batch :  5   Loss :  0.364419  Accuracy :  96.275  Class Accuracy :  11.726543425183118  Car class accuracy  11.726543425183118
Iter :  63 Batch :  6   Loss :  0.17249553  Accuracy :  95.36  Class Accuracy :  18.181818181818183  Car class accuracy  18.181818181818183
Iter :  63 Batch :  7   Loss :  0.35957327  Accuracy :  94.62  Class Accuracy :  12.537530266343827  Car class accuracy  12.537530266343827
Iter :  63 Batch :  8   Loss :  1.9111924  Accuracy :  91.05  Class Accuracy :  6.437125748502995  Car class accuracy  6.437125748502995
Iter :  63 Batch :  9   Loss :  0.58821326  Accuracy :  89.61  Class Accuracy :  14.84769364664926  Car class accuracy  14.84769364664926
Iter :  63 Batch :  10   Loss :  0.14956844  Accuracy :  97.285  Class Accuracy :  11.08695652173913  Car class accuracy  11.08695652173913
Iter :  63 Batch :  11   Loss :  0.38608927  Accuracy :  88.845  Class Accuracy :  17.70186335403727  Car class accuracy  17.70186335403727
Iter :  63 Batch :  12   Loss :  0.33615577  Accuracy :  91.495  Class Accuracy :  17.61603375527426  Car class accuracy  17.61603375527426
Iter :  63 Batch :  13   Loss :  0.7036335  Accuracy :  86.35000000000001  Class Accuracy :  16.56144306651635  Car class accuracy  16.56144306651635
Iter :  63 Batch :  14   Loss :  0.34933156  Accuracy :  88.79  Class Accuracy :  18.86178861788618  Car class accuracy  18.86178861788618
Iter :  63 Batch :  15   Loss :  0.8144877  Accuracy :  84.865  Class Accuracy :  17.78025241276912  Car class accuracy  17.78025241276912
Iter :  63 Batch :  16   Loss :  0.30647096  Accuracy :  93.56  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 64 loss : 0.5025742 Accuracy: 90.83108555657773 Class Accuracy : 14.449280275945753
Iter :  64 Batch :  0   Loss :  0.4739603  Accuracy :  87.26  Class Accuracy :  19.92857142857143  Car class accuracy  19.92857142857143
Iter :  64 Batch :  1   Loss :  0.5763722  Accuracy :  87.395  Class Accuracy :  18.799424874191228  Car class accuracy  18.799424874191228
Iter :  64 Batch :  2   Loss :  0.34408414  Accuracy :  91.7  Class Accuracy :  18.47222222222222  Car class accuracy  18.47222222222222
Iter :  64 Batch :  3   Loss :  0.5940133  Accuracy :  81.895  Class Accuracy :  30.20689655172414  Car class accuracy  30.20689655172414
Iter :  64 Batch :  4   Loss :  0.5905759  Accuracy :  81.97  Class Accuracy :  26.666666666666668  Car class accuracy  26.666666666666668
Iter :  64 Batch :  5   Loss :  0.42551783  Accuracy :  93.125  Class Accuracy :  12.924849437025399  Car class accuracy  12.924849437025399
Iter :  64 Batch :  6   Loss :  0.3904953  Accuracy :  94.67  Class Accuracy :  13.571428571428573  Car class accuracy  13.571428571428573
Iter :  64 Batch :  7   Loss :  0.46515235  Accuracy :  91.415  Class Accuracy :  14.46969696969697  Car class accuracy  14.46969696969697
Iter :  64 Batch :  8   Loss :  0.531037  Accuracy :  92.905  Class Accuracy :  13.534704370179949  Car class accuracy  13.534704370179949
Iter :  64 Batch :  9   Loss :  0.66402215  Accuracy :  82.03  Class Accuracy :  20.618374558303888  Car class accuracy  20.618374558303888
Iter :  64 Batch :  10   Loss :  0.20896204  Accuracy :  96.2  Class Accuracy :  12.265625  Car class accuracy  12.265625
Iter :  64 Batch :  11   Loss :  0.37836498  Accuracy :  89.655  Class Accuracy :  15.961538461538463  Car class accuracy  15.961538461538463
Iter :  64 Batch :  12   Loss :  0.3297272  Accuracy :  93.365  Class Accuracy :  14.046610169491524  Car class accuracy  14.046610169491524
Iter :  64 Batch :  13   Loss :  0.55456984  Accuracy :  92.065  Class Accuracy :  12.571921749136939  Car class accuracy  12.571921749136939
Iter :  64 Batch :  14   Loss :  0.22294924  Accuracy :  95.30499999999999  Class Accuracy :  13.919999999999998  Car class accuracy  13.919999999999998
Iter :  64 Batch :  15   Loss :  0.7629876  Accuracy :  92.77  Class Accuracy :  10.649350649350648  Car class accuracy  10.649350649350648
Iter :  64 Batch :  16   Loss :  0.26934093  Accuracy :  91.045  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 65 loss : 0.50188434 Accuracy: 90.82260869565218 Class Accuracy : 14.470086541333842
Iter :  65 Batch :  0   Loss :  0.47671247  Accuracy :  93.535  Class Accuracy :  8.19371727748691  Car class accuracy  8.19371727748691
Iter :  65 Batch :  1   Loss :  0.7827263  Accuracy :  92.975  Class Accuracy :  10.776978417266188  Car class accuracy  10.776978417266188
Iter :  65 Batch :  2   Loss :  0.19625105  Accuracy :  96.96000000000001  Class Accuracy :  7.6616915422885565  Car class accuracy  7.6616915422885565
Iter :  65 Batch :  3   Loss :  0.288586  Accuracy :  91.55499999999999  Class Accuracy :  16.44927536231884  Car class accuracy  16.44927536231884
Iter :  65 Batch :  4   Loss :  0.36961013  Accuracy :  86.21  Class Accuracy :  20.76923076923077  Car class accuracy  20.76923076923077
Iter :  65 Batch :  5   Loss :  0.5259716  Accuracy :  96.705  Class Accuracy :  9.216787838730998  Car class accuracy  9.216787838730998
Iter :  65 Batch :  6   Loss :  0.29508364  Accuracy :  92.995  Class Accuracy :  13.29608938547486  Car class accuracy  13.29608938547486
Iter :  65 Batch :  7   Loss :  0.60830593  Accuracy :  90.28  Class Accuracy :  13.08859520313265  Car class accuracy  13.08859520313265
Iter :  65 Batch :  8   Loss :  0.4738755  Accuracy :  92.765  Class Accuracy :  14.328873543375053  Car class accuracy  14.328873543375053
Iter :  65 Batch :  9   Loss :  0.5863456  Accuracy :  82.53  Class Accuracy :  21.41831238779174  Car class accuracy  21.41831238779174
Iter :  65 Batch :  10   Loss :  0.17711326  Accuracy :  96.80499999999999  Class Accuracy :  12.65625  Car class accuracy  12.65625
Iter :  65 Batch :  11   Loss :  0.33217737  Accuracy :  89.805  Class Accuracy :  22.857142857142858  Car class accuracy  22.857142857142858
Iter :  65 Batch :  12   Loss :  0.3952337  Accuracy :  87.405  Class Accuracy :  20.812499999999996  Car class accuracy  20.812499999999996
Iter :  65 Batch :  13   Loss :  0.4788368  Accuracy :  90.36  Class Accuracy :  14.492836676217763  Car class accuracy  14.492836676217763
Iter :  65 Batch :  14   Loss :  0.2698986  Accuracy :  92.65  Class Accuracy :  15.223214285714286  Car class accuracy  15.223214285714286
Iter :  65 Batch :  15   Loss :  0.50697064  Accuracy :  92.39  Class Accuracy :  12.358490566037736  Car class accuracy  12.358490566037736
Iter :  65 Batch :  16   Loss :  0.17669629  Accuracy :  95.6  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 66 loss : 0.5004645 Accuracy: 90.83825602140945 Class Accuracy : 14.459032584964113
Iter :  66 Batch :  0   Loss :  0.3253234  Accuracy :  93.215  Class Accuracy :  13.577981651376147  Car class accuracy  13.577981651376147
Iter :  66 Batch :  1   Loss :  0.39770082  Accuracy :  93.11  Class Accuracy :  15.946516537649542  Car class accuracy  15.946516537649542
Iter :  66 Batch :  2   Loss :  0.14305864  Accuracy :  98.165  Class Accuracy :  9.635416666666666  Car class accuracy  9.635416666666666
Iter :  66 Batch :  3   Loss :  0.2576297  Accuracy :  95.49499999999999  Class Accuracy :  11.41891891891892  Car class accuracy  11.41891891891892
Iter :  66 Batch :  4   Loss :  0.37565017  Accuracy :  86.83  Class Accuracy :  28.888888888888886  Car class accuracy  28.888888888888886
Iter :  66 Batch :  5   Loss :  0.56469524  Accuracy :  96.975  Class Accuracy :  9.736909981944802  Car class accuracy  9.736909981944802
Iter :  66 Batch :  6   Loss :  0.20184204  Accuracy :  97.235  Class Accuracy :  10.108108108108107  Car class accuracy  10.108108108108107
Iter :  66 Batch :  7   Loss :  0.44969454  Accuracy :  92.38  Class Accuracy :  12.647412755716006  Car class accuracy  12.647412755716006
Iter :  66 Batch :  8   Loss :  0.43893296  Accuracy :  94.025  Class Accuracy :  13.307426597582037  Car class accuracy  13.307426597582037
Iter :  66 Batch :  9   Loss :  0.62862307  Accuracy :  86.78  Class Accuracy :  16.06060606060606  Car class accuracy  16.06060606060606
Iter :  66 Batch :  10   Loss :  0.13099368  Accuracy :  97.65  Class Accuracy :  10.482758620689655  Car class accuracy  10.482758620689655
Iter :  66 Batch :  11   Loss :  0.27780128  Accuracy :  92.045  Class Accuracy :  17.56578947368421  Car class accuracy  17.56578947368421
Iter :  66 Batch :  12   Loss :  0.24921705  Accuracy :  93.91000000000001  Class Accuracy :  14.444444444444443  Car class accuracy  14.444444444444443
Iter :  66 Batch :  13   Loss :  0.44127423  Accuracy :  89.88000000000001  Class Accuracy :  15.275377969762419  Car class accuracy  15.275377969762419
Iter :  66 Batch :  14   Loss :  0.17938879  Accuracy :  95.6  Class Accuracy :  14.530612244897961  Car class accuracy  14.530612244897961
Iter :  66 Batch :  15   Loss :  0.36930925  Accuracy :  92.77499999999999  Class Accuracy :  13.395953757225435  Car class accuracy  13.395953757225435
Iter :  66 Batch :  16   Loss :  0.12298097  Accuracy :  96.86  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 67 loss : 0.49786893 Accuracy: 90.88103251318103 Class Accuracy : 14.442529569791677
Iter :  67 Batch :  0   Loss :  0.28565833  Accuracy :  95.025  Class Accuracy :  12.186528497409325  Car class accuracy  12.186528497409325
Iter :  67 Batch :  1   Loss :  0.3711078  Accuracy :  90.945  Class Accuracy :  18.88478581979321  Car class accuracy  18.88478581979321
Iter :  67 Batch :  2   Loss :  0.10260662  Accuracy :  98.03  Class Accuracy :  11.472081218274113  Car class accuracy  11.472081218274113
Iter :  67 Batch :  3   Loss :  0.22841504  Accuracy :  94.765  Class Accuracy :  14.666666666666666  Car class accuracy  14.666666666666666
Iter :  67 Batch :  4   Loss :  0.38488334  Accuracy :  87.04499999999999  Class Accuracy :  16.666666666666668  Car class accuracy  16.666666666666668
Iter :  67 Batch :  5   Loss :  0.4432621  Accuracy :  96.83  Class Accuracy :  10.296195652173914  Car class accuracy  10.296195652173914
Iter :  67 Batch :  6   Loss :  0.19539759  Accuracy :  96.015  Class Accuracy :  14.75138121546961  Car class accuracy  14.75138121546961
Iter :  67 Batch :  7   Loss :  0.37836596  Accuracy :  90.865  Class Accuracy :  14.623338257016247  Car class accuracy  14.623338257016247
Iter :  67 Batch :  8   Loss :  0.7890065  Accuracy :  96.145  Class Accuracy :  9.605077574047954  Car class accuracy  9.605077574047954
Iter :  67 Batch :  9   Loss :  0.49702704  Accuracy :  89.7  Class Accuracy :  14.863436123348016  Car class accuracy  14.863436123348016
Iter :  67 Batch :  10   Loss :  0.11265252  Accuracy :  97.99  Class Accuracy :  11.007751937984496  Car class accuracy  11.007751937984496
Iter :  67 Batch :  11   Loss :  0.27552548  Accuracy :  93.655  Class Accuracy :  12.894736842105264  Car class accuracy  12.894736842105264
Iter :  67 Batch :  12   Loss :  0.30520123  Accuracy :  89.59  Class Accuracy :  18.280632411067195  Car class accuracy  18.280632411067195
Iter :  67 Batch :  13   Loss :  0.38519618  Accuracy :  90.835  Class Accuracy :  15.461667599328482  Car class accuracy  15.461667599328482
Iter :  67 Batch :  14   Loss :  0.23396394  Accuracy :  92.97  Class Accuracy :  12.918454935622318  Car class accuracy  12.918454935622318
Iter :  67 Batch :  15   Loss :  0.44557157  Accuracy :  89.05499999999999  Class Accuracy :  16.57104736490994  Car class accuracy  16.57104736490994
Iter :  67 Batch :  16   Loss :  0.21774942  Accuracy :  93.78999999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 68 loss : 0.4954341 Accuracy: 90.91416883116884 Class Accuracy : 14.424890994982524
Iter :  68 Batch :  0   Loss :  0.24869426  Accuracy :  93.74  Class Accuracy :  14.266211604095563  Car class accuracy  14.266211604095563
Iter :  68 Batch :  1   Loss :  0.43108234  Accuracy :  92.78999999999999  Class Accuracy :  16.180505415162454  Car class accuracy  16.180505415162454
Iter :  68 Batch :  2   Loss :  0.09329209  Accuracy :  98.19  Class Accuracy :  12.87958115183246  Car class accuracy  12.87958115183246
Iter :  68 Batch :  3   Loss :  0.16638179  Accuracy :  97.99  Class Accuracy :  9.635036496350367  Car class accuracy  9.635036496350367
Iter :  68 Batch :  4   Loss :  0.31767383  Accuracy :  89.945  Class Accuracy :  17.777777777777775  Car class accuracy  17.777777777777775
Iter :  68 Batch :  5   Loss :  0.3914492  Accuracy :  96.14  Class Accuracy :  11.198738170347003  Car class accuracy  11.198738170347003
Iter :  68 Batch :  6   Loss :  0.20115012  Accuracy :  96.02000000000001  Class Accuracy :  12.918918918918918  Car class accuracy  12.918918918918918
Iter :  68 Batch :  7   Loss :  0.43163976  Accuracy :  93.245  Class Accuracy :  12.59294117647059  Car class accuracy  12.59294117647059
Iter :  68 Batch :  8   Loss :  0.4953809  Accuracy :  95.7  Class Accuracy :  10.235588972431078  Car class accuracy  10.235588972431078
Iter :  68 Batch :  9   Loss :  0.38217825  Accuracy :  92.16499999999999  Class Accuracy :  13.659274193548388  Car class accuracy  13.659274193548388
Iter :  68 Batch :  10   Loss :  0.08805256  Accuracy :  98.41  Class Accuracy :  9.609375  Car class accuracy  9.609375
Iter :  68 Batch :  11   Loss :  0.20487486  Accuracy :  95.56  Class Accuracy :  14.701492537313431  Car class accuracy  14.701492537313431
Iter :  68 Batch :  12   Loss :  0.31031266  Accuracy :  93.44  Class Accuracy :  14.592901878914406  Car class accuracy  14.592901878914406
Iter :  68 Batch :  13   Loss :  0.32650384  Accuracy :  93.33500000000001  Class Accuracy :  14.106714628297363  Car class accuracy  14.106714628297363
Iter :  68 Batch :  14   Loss :  0.15205723  Accuracy :  96.655  Class Accuracy :  12.962962962962962  Car class accuracy  12.962962962962962
Iter :  68 Batch :  15   Loss :  0.44315472  Accuracy :  93.27  Class Accuracy :  12.439817826935588  Car class accuracy  12.439817826935588
Iter :  68 Batch :  16   Loss :  0.095489904  Accuracy :  97.515  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 69 loss : 0.49232572 Accuracy: 90.97267491467578 Class Accuracy : 14.394630493102536
Iter :  69 Batch :  0   Loss :  0.3002893  Accuracy :  93.435  Class Accuracy :  13.215811965811966  Car class accuracy  13.215811965811966
Iter :  69 Batch :  1   Loss :  0.2940026  Accuracy :  95.95  Class Accuracy :  12.431482782853127  Car class accuracy  12.431482782853127
Iter :  69 Batch :  2   Loss :  0.09056317  Accuracy :  97.965  Class Accuracy :  11.534391534391535  Car class accuracy  11.534391534391535
Iter :  69 Batch :  3   Loss :  0.22799045  Accuracy :  96.325  Class Accuracy :  11.533333333333333  Car class accuracy  11.533333333333333
Iter :  69 Batch :  4   Loss :  0.36711323  Accuracy :  86.595  Class Accuracy :  21.333333333333332  Car class accuracy  21.333333333333332
Iter :  69 Batch :  5   Loss :  0.32757622  Accuracy :  96.00999999999999  Class Accuracy :  11.386880165289256  Car class accuracy  11.386880165289256
Iter :  69 Batch :  6   Loss :  0.24830095  Accuracy :  97.6  Class Accuracy :  6.958762886597938  Car class accuracy  6.958762886597938
Iter :  69 Batch :  7   Loss :  0.3289339  Accuracy :  91.03999999999999  Class Accuracy :  15.359712230215827  Car class accuracy  15.359712230215827
Iter :  69 Batch :  8   Loss :  0.352699  Accuracy :  95.145  Class Accuracy :  12.659932659932661  Car class accuracy  12.659932659932661
Iter :  69 Batch :  9   Loss :  0.39554507  Accuracy :  90.98  Class Accuracy :  15.07274490785645  Car class accuracy  15.07274490785645
Iter :  69 Batch :  10   Loss :  0.10195718  Accuracy :  98.725  Class Accuracy :  9.473684210526315  Car class accuracy  9.473684210526315
Iter :  69 Batch :  11   Loss :  0.20808712  Accuracy :  97.61999999999999  Class Accuracy :  6.114649681528663  Car class accuracy  6.114649681528663
Iter :  69 Batch :  12   Loss :  0.20514168  Accuracy :  92.955  Class Accuracy :  16.365503080082135  Car class accuracy  16.365503080082135
Iter :  69 Batch :  13   Loss :  0.39065096  Accuracy :  93.325  Class Accuracy :  12.954907161803714  Car class accuracy  12.954907161803714
Iter :  69 Batch :  14   Loss :  0.13897142  Accuracy :  97.53  Class Accuracy :  11.872340425531917  Car class accuracy  11.872340425531917
Iter :  69 Batch :  15   Loss :  0.44661024  Accuracy :  93.87  Class Accuracy :  11.665533650577837  Car class accuracy  11.665533650577837
Iter :  69 Batch :  16   Loss :  0.04856383  Accuracy :  99.59  Class Accuracy :  0.0  Car class accuracy /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.0
**** Iteration : 70 loss : 0.48904857 Accuracy: 91.02997056349874 Class Accuracy : 14.356972196741665
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__70_0.ckpt
saved prediction of 0 accuracy :  0.96435  class accuracy :  0.10599455040871934  car_class_accuracy :  0.10599455040871934
saved prediction of 1 accuracy :  0.86275  class accuracy :  0.07371744277821626  car_class_accuracy :  0.07371744277821626
saved prediction of 2 accuracy :  0.98405  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 3 accuracy :  0.96085  class accuracy :  0.0858111927642736  car_class_accuracy :  0.0858111927642736
saved prediction of 4 accuracy :  0.97925  class accuracy :  0.0945945945945946  car_class_accuracy :  0.0945945945945946
saved prediction of 5 accuracy :  0.9558  class accuracy :  0.14964028776978416  car_class_accuracy :  0.14964028776978416
saved prediction of 6 accuracy :  0.95045  class accuracy :  0.08406647116324537  car_class_accuracy :  0.08406647116324537
saved prediction of 7 accuracy :  0.95785  class accuracy :  0.06345441067457376  car_class_accuracy :  0.06345441067457376
saved prediction of 8 accuracy :  0.94065  class accuracy :  0.053837719298245615  car_class_accuracy :  0.053837719298245615
saved prediction of 9 accuracy :  0.93805  class accuracy :  0.07778561354019746  car_class_accuracy :  0.07778561354019746
saved prediction of 10 accuracy :  0.9413  class accuracy :  0.1482180293501048  car_class_accuracy :  0.1482180293501048
saved prediction of 11 accuracy :  0.95275  class accuracy :  0.108130081300813  car_class_accuracy :  0.108130081300813
saved prediction of 12 accuracy :  0.9897  class accuracy :  0.058499999999999996  car_class_accuracy :  0.058499999999999996
saved prediction of 13 accuracy :  0.9519  class accuracy :  0.08014796547472255  car_class_accuracy :  0.08014796547472255
saved prediction of 14 accuracy :  0.9318  class accuracy :  0.07866449511400651  car_class_accuracy :  0.07866449511400651
saved prediction of 15 accuracy :  0.964  class accuracy :  0.05  car_class_accuracy :  0.05
saved prediction of 16 accuracy :  0.95205  class accuracy :  0.08517843188330294  car_class_accuracy :  0.08517843188330294
saved prediction of 17 accuracy :  0.9644  class accuracy :  0.11327683615819209  car_class_accuracy :  0.11327683615819209
saved prediction of 18 accuracy :  0.84595  class accuracy :  0.06755646817248459  car_class_accuracy :  0.06755646817248459
saved prediction of 19 accuracy :  0.9818  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 20 accuracy :  0.9619  class accuracy :  0.08701077708451503  car_class_accuracy :  0.08701077708451503
saved prediction of 21 accuracy :  0.98055  class accuracy :  0.09210526315789473  car_class_accuracy :  0.09210526315789473
saved prediction of 22 accuracy :  0.9542  class accuracy :  0.14255319148936169  car_class_accuracy :  0.14255319148936169
saved prediction of 23 accuracy :  0.95035  class accuracy :  0.0824561403508772  car_class_accuracy :  0.0824561403508772
saved prediction of 24 accuracy :  0.95195  class accuracy :  0.06043507817811013  car_class_accuracy :  0.06043507817811013
saved prediction of 25 accuracy :  0.9443  class accuracy :  0.05016146393972013  car_class_accuracy :  0.05016146393972013
saved prediction of 26 accuracy :  0.9419  class accuracy :  0.06997885835095138  car_class_accuracy :  0.06997885835095138
saved prediction of 27 accuracy :  0.94815  class accuracy :  0.1513742071881607  car_class_accuracy :  0.1513742071881607
saved prediction of 28 accuracy :  0.9525  class accuracy :  0.1039692183070069  car_class_accuracy :  0.1039692183070069
saved prediction of 29 accuracy :  0.987  class accuracy :  0.05384615384615384  car_class_accuracy :  0.05384615384615384
saved prediction of 30 accuracy :  0.9465  class accuracy :  0.08784392196098048  car_class_accuracy :  0.08784392196098048
saved prediction of 31 accuracy :  0.9352  class accuracy :  0.07717271727172717  car_class_accuracy :  0.07717271727172717
saved prediction of 32 accuracy :  0.95805  class accuracy :  0.096  car_class_accuracy :  0.096
saved prediction of 33 accuracy :  0.94845  class accuracy :  0.08375321336760926  car_class_accuracy :  0.08375321336760926
saved prediction of 34 accuracy :  0.9652  class accuracy :  0.11294765840220386  car_class_accuracy :  0.11294765840220386
saved prediction of 35 accuracy :  0.8644  class accuracy :  0.0725735294117647  car_class_accuracy :  0.0725735294117647
saved prediction of 36 accuracy :  0.98335  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 37 accuracy :  0.9537  class accuracy :  0.07836691410392364  car_class_accuracy :  0.07836691410392364
saved prediction of 38 accuracy :  0.9788  class accuracy :  0.09923664122137404  car_class_accuracy :  0.09923664122137404
saved prediction of 39 accuracy :  0.95945  class accuracy :  0.1289655172413793  car_class_accuracy :  0.1289655172413793
saved prediction of 40 accuracy :  0.93915  class accuracy :  0.07881136950904392  car_class_accuracy :  0.07881136950904392
saved prediction of 41 accuracy :  0.951  class accuracy :  0.06920341394025604  car_class_accuracy :  0.06920341394025604
saved prediction of 42 accuracy :  0.94505  class accuracy :  0.044954128440366975  car_class_accuracy :  0.044954128440366975
saved prediction of 43 accuracy :  0.9445  class accuracy :  0.08058035714285713  car_class_accuracy :  0.08058035714285713
saved prediction of 44 accuracy :  0.93975  class accuracy :  0.1473903966597077  car_class_accuracy :  0.1473903966597077
saved prediction of 45 accuracy :  0.9543  class accuracy :  0.10591845681718544  car_class_accuracy :  0.10591845681718544
saved prediction of 46 accuracy :  0.9859  class accuracy :  0.05444444444444444  car_class_accuracy :  0.05444444444444444
saved prediction of 47 accuracy :  0.9482  class accuracy :  0.07904191616766468  car_class_accuracy :  0.07904191616766468
saved prediction of 48 accuracy :  0.93685  class accuracy :  0.08122886133032695  car_class_accuracy :  0.08122886133032695
saved prediction of 49 accuracy :  0.95935  class accuracy :  0.06956521739130435  car_class_accuracy :  0.06956521739130435
saved prediction of 50 accuracy :  0.9593  class accuracy :  0.08633398564905415  car_class_accuracy :  0.08633398564905415
saved prediction of 51 accuracy :  0.96285  class accuracy :  0.11786743515850144  car_class_accuracy :  0.11786743515850144
saved prediction of 52 accuracy :  0.86285  class accuracy :  0.07639517345399698  car_class_accuracy :  0.07639517345399698
saved prediction of 53 accuracy :  0.98195  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 54 accuracy :  0.9555  class accuracy :  0.08026172300981461  car_class_accuracy :  0.08026172300981461
saved prediction of 55 accuracy :  0.97995  class accuracy :  0.08721804511278194  car_class_accuracy :  0.08721804511278194
saved prediction of 56 accuracy :  0.9559  class accuracy :  0.11533742331288344  car_class_accuracy :  0.11533742331288344
saved prediction of 57 accuracy :  0.9404  class accuracy :  0.08939393939393939  car_class_accuracy :  0.08939393939393939
saved prediction of 58 accuracy :  0.949  class accuracy :  0.06799733865602128  car_class_accuracy :  0.06799733865602128
saved prediction of 59 accuracy :  0.94755  class accuracy :  0.046964490263459335  car_class_accuracy :  0.046964490263459335
saved prediction of 60 accuracy :  0.9498  class accuracy :  0.06661753868828298  car_class_accuracy :  0.06661753868828298
saved prediction of 61 accuracy :  0.96345  class accuracy :  0.12677824267782428  car_class_accuracy :  0.12677824267782428
saved prediction of 62 accuracy :  0.9556  class accuracy :  0.10703495899870523  car_class_accuracy :  0.10703495899870523
saved prediction of 63 accuracy :  0.98845  class accuracy :  0.06497461928934009  car_class_accuracy :  0.06497461928934009
saved prediction of 64 accuracy :  0.94625  class accuracy :  0.0859771258080557  car_class_accuracy :  0.0859771258080557
saved prediction of 65 accuracy :  0.9374  class accuracy :  0.07878787878787878  car_class_accuracy :  0.07878787878787878
saved prediction of 66 accuracy :  0.9588  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 67 accuracy :  0.9509  class accuracy :  0.08448320749804739  car_class_accuracy :  0.08448320749804739
saved prediction of 68 accuracy :  0.9634  class accuracy :  0.11243386243386244  car_class_accuracy :  0.11243386243386244
saved prediction of 69 accuracy :  0.8297  class accuracy :  0.08091836734693877  car_class_accuracy :  0.08091836734693877
saved prediction of 70 accuracy :  0.9841  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 71 accuracy :  0.95325  class accuracy :  0.08294491525423728  car_class_accuracy :  0.08294491525423728
saved prediction of 72 accuracy :  0.98185  class accuracy :  0.09927007299270073  car_class_accuracy :  0.09927007299270073
saved prediction of 73 accuracy :  0.95715  class accuracy :  0.12251655629139073  car_class_accuracy :  0.12251655629139073
saved prediction of 74 accuracy :  0.94285  class accuracy :  0.07974335472043996  car_class_accuracy :  0.07974335472043996
saved prediction of 75 accuracy :  0.956  class accuracy :  0.06481099656357389  car_class_accuracy :  0.06481099656357389
saved prediction of 76 accuracy :  0.9454  class accuracy :  0.049607182940516276  car_class_accuracy :  0.049607182940516276
saved prediction of 77 accuracy :  0.94805  class accuracy :  0.07340345604808415  car_class_accuracy :  0.07340345604808415
saved prediction of 78 accuracy :  0.9319  class accuracy :  0.16940928270042194  car_class_accuracy :  0.16940928270042194
saved prediction of 79 accuracy :  0.95655  class accuracy :  0.11186365648517042  car_class_accuracy :  0.11186365648517042
saved prediction of 80 accuracy :  0.9883  class accuracy :  0.06321243523316063  car_class_accuracy :  0.06321243523316063
saved prediction of 81 accuracy :  0.95355  class accuracy :  0.0839242053789731  car_class_accuracy :  0.0839242053789731
saved prediction of 82 accuracy :  0.9355  class accuracy :  0.0796420581655481  car_class_accuracy :  0.0796420581655481
saved prediction of 83 accuracy :  0.956  class accuracy :  0.14090909090909093  car_class_accuracy :  0.14090909090909093
saved prediction of 84 accuracy :  0.94945  class accuracy :  0.08366375892149089  car_class_accuracy :  0.08366375892149089
saved prediction of 85 accuracy :  0.96105  class accuracy :  0.1085164835164835  car_class_accuracy :  0.1085164835164835
saved prediction of 86 accuracy :  0.8464  class accuracy :  0.05172932330827068  car_class_accuracy :  0.05172932330827068
saved prediction of 87 accuracy :  0.98275  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 88 accuracy :  0.9589  class accuracy :  0.08031945236737023  car_class_accuracy :  0.08031945236737023
saved prediction of 89 accuracy :  0.9795  class accuracy :  0.08391608391608392  car_class_accuracy :  0.08391608391608392
saved prediction of 90 accuracy :  0.9594  class accuracy :  0.108843537414966  car_class_accuracy :  0.108843537414966
saved prediction of 91 accuracy :  0.9461  class accuracy :  0.07669491525423729  car_class_accuracy :  0.07669491525423729
saved prediction of 92 accuracy :  0.9499  class accuracy :  0.06243206521739131  car_class_accuracy :  0.06243206521739131
saved prediction of 93 accuracy :  0.94645  class accuracy :  0.05543822597676874  car_class_accuracy :  0.05543822597676874
saved prediction of 94 accuracy :  0.94125  class accuracy :  0.0788977519941987  car_class_accuracy :  0.0788977519941987
saved prediction of 95 accuracy :  0.9476  class accuracy :  0.15  car_class_accuracy :  0.15
saved prediction of 96 accuracy :  0.95355  class accuracy :  0.10718588640275388  car_class_accuracy :  0.10718588640275388
saved prediction of 97 accuracy :  0.9848  class accuracy :  0.0642512077294686  car_class_accuracy :  0.0642512077294686
saved prediction of 98 accuracy :  0.95355  class accuracy :  0.08441558441558442  car_class_accuracy :  0.08441558441558442
saved prediction of 99 accuracy :  0.93365  class accuracy :  0.07701590784421283  car_class_accuracy :  0.07701590784421283
Iter :  70 Batch :  0   Loss :  0.20597114  Accuracy :  94.87  Class Accuracy :  14.348739495798318  Car class accuracy  14.348739495798318
Iter :  70 Batch :  1   Loss :  0.32845864  Accuracy :  94.895  Class Accuracy :  13.750921149594694  Car class accuracy  13.750921149594694
Iter :  70 Batch :  2   Loss :  0.079432786  Accuracy :  98.95  Class Accuracy :  9.364161849710982  Car class accuracy  9.364161849710982
Iter :  70 Batch :  3   Loss :  0.13974053  Accuracy :  98.745  Class Accuracy :  8.31081081081081  Car class accuracy  8.31081081081081
Iter :  70 Batch :  4   Loss :  0.18217121  Accuracy :  96.33  Class Accuracy :  8.0  Car class accuracy  8.0
Iter :  70 Batch :  5   Loss :  0.35559905  Accuracy :  95.345  Class Accuracy :  11.971345184399045  Car class accuracy  11.971345184399045
Iter :  70 Batch :  6   Loss :  0.1956669  Accuracy :  95.42500000000001  Class Accuracy :  12.210526315789474  Car class accuracy  12.210526315789474
Iter :  70 Batch :  7   Loss :  0.302929  Accuracy :  92.965  Class Accuracy :  13.807829181494663  Car class accuracy  13.807829181494663
Iter :  70 Batch :  8   Loss :  0.74634403  Accuracy :  95.505  Class Accuracy :  7.638190954773869  Car class accuracy  7.638190954773869
Iter :  70 Batch :  9   Loss :  0.36706528  Accuracy :  91.32000000000001  Class Accuracy :  15.228174603174601  Car class accuracy  15.228174603174601
Iter :  70 Batch :  10   Loss :  0.11135824  Accuracy :  98.125  Class Accuracy :  9.93421052631579  Car class accuracy  9.93421052631579
Iter :  70 Batch :  11   Loss :  0.20217349  Accuracy :  95.60499999999999  Class Accuracy :  13.977272727272727  Car class accuracy  13.977272727272727
Iter :  70 Batch :  12   Loss :  0.26470688  Accuracy :  92.535  Class Accuracy :  15.654101995565412  Car class accuracy  15.654101995565412
Iter :  70 Batch :  13   Loss :  0.34874707  Accuracy :  91.045  Class Accuracy :  15.807759119861032  Car class accuracy  15.807759119861032
Iter :  70 Batch :  14   Loss :  0.21225522  Accuracy :  94.16  Class Accuracy :  15.41501976284585  Car class accuracy  15.41501976284585
Iter :  70 Batch :  15   Loss :  0.5053456  Accuracy :  90.89500000000001  Class Accuracy :  13.356741573033709  Car class accuracy  13.356741573033709
Iter :  70 Batch :  16   Loss :  0.16375536  Accuracy :  95.27  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 71 loss : 0.48606178 Accuracy: 91.08343283582089 Class Accuracy : 14.31941604243473
Iter :  71 Batch :  0   Loss :  0.2751544  Accuracy :  94.08999999999999  Class Accuracy :  12.743362831858407  Car class accuracy  12.743362831858407
Iter :  71 Batch :  1   Loss :  0.32610118  Accuracy :  92.11  Class Accuracy :  17.02722063037249  Car class accuracy  17.02722063037249
Iter :  71 Batch :  2   Loss :  0.12638663  Accuracy :  96.595  Class Accuracy :  13.83084577114428  Car class accuracy  13.83084577114428
Iter :  71 Batch :  3   Loss :  0.3051133  Accuracy :  92.38499999999999  Class Accuracy :  14.214285714285715  Car class accuracy  14.214285714285715
Iter :  71 Batch :  4   Loss :  0.47461092  Accuracy :  82.52000000000001  Class Accuracy :  30.833333333333336  Car class accuracy  30.833333333333336
Iter :  71 Batch :  5   Loss :  0.42343965  Accuracy :  93.91000000000001  Class Accuracy :  12.240853658536585  Car class accuracy  12.240853658536585
Iter :  71 Batch :  6   Loss :  0.17342393  Accuracy :  95.86  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  71 Batch :  7   Loss :  0.32167885  Accuracy :  93.13  Class Accuracy :  13.94736842105263  Car class accuracy  13.94736842105263
Iter :  71 Batch :  8   Loss :  0.45039198  Accuracy :  93.99  Class Accuracy :  12.659014825442371  Car class accuracy  12.659014825442371
Iter :  71 Batch :  9   Loss :  0.48951757  Accuracy :  87.155  Class Accuracy :  16.31677600749766  Car class accuracy  16.31677600749766
Iter :  71 Batch :  10   Loss :  0.09551464  Accuracy :  98.575  Class Accuracy :  9.071428571428571  Car class accuracy  9.071428571428571
Iter :  71 Batch :  11   Loss :  0.17035083  Accuracy :  96.95  Class Accuracy :  10.583941605839415  Car class accuracy  10.583941605839415
Iter :  71 Batch :  12   Loss :  0.29290885  Accuracy :  92.00500000000001  Class Accuracy :  16.436058700209642  Car class accuracy  16.436058700209642
Iter :  71 Batch :  13   Loss :  0.41752583  Accuracy :  96.96000000000001  Class Accuracy :  9.600674915635546  Car class accuracy  9.600674915635546
Iter :  71 Batch :  14   Loss :  0.117696606  Accuracy :  98.98  Class Accuracy :  9.303278688524589  Car class accuracy  9.303278688524589
Iter :  71 Batch :  15   Loss :  0.39959297  Accuracy :  93.975  Class Accuracy :  11.648492623476587  Car class accuracy  11.648492623476587
Iter :  71 Batch :  16   Loss :  0.054807544  Accuracy :  99.18  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 72 loss : 0.48332357 Accuracy: 91.124276369583 Class Accuracy : 14.301653870380148
Iter :  72 Batch :  0   Loss :  0.6819462  Accuracy :  95.055  Class Accuracy :  7.221052631578948  Car class accuracy  7.221052631578948
Iter :  72 Batch :  1   Loss :  0.8673807  Accuracy :  92.24  Class Accuracy :  12.381959126145173  Car class accuracy  12.381959126145173
Iter :  72 Batch :  2   Loss :  0.10292875  Accuracy :  97.72999999999999  Class Accuracy :  10.879120879120878  Car class accuracy  10.879120879120878
Iter :  72 Batch :  3   Loss :  0.2772178  Accuracy :  92.975  Class Accuracy :  16.515151515151516  Car class accuracy  16.515151515151516
Iter :  72 Batch :  4   Loss :  0.49391463  Accuracy :  84.795  Class Accuracy :  20.76923076923077  Car class accuracy  20.76923076923077
Iter :  72 Batch :  5   Loss :  0.41227832  Accuracy :  94.80499999999999  Class Accuracy :  10.630230125523013  Car class accuracy  10.630230125523013
Iter :  72 Batch :  6   Loss :  0.30682528  Accuracy :  91.96  Class Accuracy :  20.04901960784314  Car class accuracy  20.04901960784314
Iter :  72 Batch :  7   Loss :  0.8599709  Accuracy :  84.69  Class Accuracy :  16.05509099852435  Car class accuracy  16.05509099852435
Iter :  72 Batch :  8   Loss :  0.55389166  Accuracy :  89.77000000000001  Class Accuracy :  15.638792102206736  Car class accuracy  15.638792102206736
Iter :  72 Batch :  9   Loss :  0.6925569  Accuracy :  82.28999999999999  Class Accuracy :  19.766734279918865  Car class accuracy  19.766734279918865
Iter :  72 Batch :  10   Loss :  0.5314005  Accuracy :  83.83  Class Accuracy :  27.923076923076923  Car class accuracy  27.923076923076923
Iter :  72 Batch :  11   Loss :  0.54752845  Accuracy :  84.615  Class Accuracy :  26.11464968152866  Car class accuracy  26.11464968152866
Iter :  72 Batch :  12   Loss :  0.6009961  Accuracy :  76.64999999999999  Class Accuracy :  32.15555555555555  Car class accuracy  32.15555555555555
Iter :  72 Batch :  13   Loss :  0.69595134  Accuracy :  78.78500000000001  Class Accuracy :  22.74251497005988  Car class accuracy  22.74251497005988
Iter :  72 Batch :  14   Loss :  0.57264465  Accuracy :  79.07499999999999  Class Accuracy :  32.47863247863248  Car class accuracy  32.47863247863248
Iter :  72 Batch :  15   Loss :  0.71391875  Accuracy :  80.095  Class Accuracy :  22.303559435862997  Car class accuracy  22.303559435862997
Iter :  72 Batch :  16   Loss :  0.24217963  Accuracy :  91.485  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 73 loss : 0.48407918 Accuracy: 91.06922177419357 Class Accuracy : 14.358505689157163
Iter :  73 Batch :  0   Loss :  0.48020157  Accuracy :  84.74000000000001  Class Accuracy :  24.75355969331873  Car class accuracy  24.75355969331873
Iter :  73 Batch :  1   Loss :  0.54749715  Accuracy :  85.045  Class Accuracy :  25.128205128205128  Car class accuracy  25.128205128205128
Iter :  73 Batch :  2   Loss :  0.23179294  Accuracy :  96.52  Class Accuracy :  12.790697674418606  Car class accuracy  12.790697674418606
Iter :  73 Batch :  3   Loss :  0.32846567  Accuracy :  92.52  Class Accuracy :  14.814814814814813  Car class accuracy  14.814814814814813
Iter :  73 Batch :  4   Loss :  0.31301215  Accuracy :  88.455  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  73 Batch :  5   Loss :  0.9069673  Accuracy :  94.82000000000001  Class Accuracy :  10.665642601126473  Car class accuracy  10.665642601126473
Iter :  73 Batch :  6   Loss :  0.2219899  Accuracy :  95.45  Class Accuracy :  16.555555555555554  Car class accuracy  16.555555555555554
Iter :  73 Batch :  7   Loss :  0.76187986  Accuracy :  94.305  Class Accuracy :  8.236040609137056  Car class accuracy  8.236040609137056
Iter :  73 Batch :  8   Loss :  1.8747852  Accuracy :  93.015  Class Accuracy :  5.754475703324808  Car class accuracy  5.754475703324808
Iter :  73 Batch :  9   Loss :  0.6745743  Accuracy :  84.185  Class Accuracy :  16.79328621908127  Car class accuracy  16.79328621908127
Iter :  73 Batch :  10   Loss :  0.19113894  Accuracy :  96.265  Class Accuracy :  11.338028169014084  Car class accuracy  11.338028169014084
Iter :  73 Batch :  11   Loss :  0.42881268  Accuracy :  85.855  Class Accuracy :  20.981595092024538  Car class accuracy  20.981595092024538
Iter :  73 Batch :  12   Loss :  0.5006317  Accuracy :  79.835  Class Accuracy :  24.816414686825055  Car class accuracy  24.816414686825055
Iter :  73 Batch :  13   Loss :  0.6127823  Accuracy :  83.91  Class Accuracy :  19.301837270341206  Car class accuracy  19.301837270341206
Iter :  73 Batch :  14   Loss :  0.35583597  Accuracy :  88.58500000000001  Class Accuracy :  23.347280334728033  Car class accuracy  23.347280334728033
Iter :  73 Batch :  15   Loss :  0.5472903  Accuracy :  86.22999999999999  Class Accuracy :  19.338605319913732  Car class accuracy  19.338605319913732
Iter :  73 Batch :  16   Loss :  0.46574014  Accuracy :  85.9  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 74 loss : 0.48504508 Accuracy: 91.04333333333334 Class Accuracy : 14.382786868279004
Iter :  74 Batch :  0   Loss :  0.4594068  Accuracy :  87.45  Class Accuracy :  19.10694597574421  Car class accuracy  19.10694597574421
Iter :  74 Batch :  1   Loss :  0.58815044  Accuracy :  88.05  Class Accuracy :  18.330945558739256  Car class accuracy  18.330945558739256
Iter :  74 Batch :  2   Loss :  0.25753412  Accuracy :  92.325  Class Accuracy :  14.84848484848485  Car class accuracy  14.84848484848485
Iter :  74 Batch :  3   Loss :  0.39936996  Accuracy :  87.5  Class Accuracy :  23.08219178082192  Car class accuracy  23.08219178082192
Iter :  74 Batch :  4   Loss :  0.48314223  Accuracy :  84.71  Class Accuracy :  30.0  Car class accuracy  30.0
Iter :  74 Batch :  5   Loss :  0.83748406  Accuracy :  92.635  Class Accuracy :  9.979550102249489  Car class accuracy  9.979550102249489
Iter :  74 Batch :  6   Loss :  0.2670288  Accuracy :  95.69  Class Accuracy :  12.648648648648647  Car class accuracy  12.648648648648647
Iter :  74 Batch :  7   Loss :  0.7216403  Accuracy :  88.19500000000001  Class Accuracy :  15.04803073967339  Car class accuracy  15.04803073967339
Iter :  74 Batch :  8   Loss :  0.47684506  Accuracy :  93.2  Class Accuracy :  13.45821325648415  Car class accuracy  13.45821325648415
Iter :  74 Batch :  9   Loss :  0.57613176  Accuracy :  86.165  Class Accuracy :  17.794238683127574  Car class accuracy  17.794238683127574
Iter :  74 Batch :  10   Loss :  0.18156983  Accuracy :  97.19  Class Accuracy :  11.666666666666666  Car class accuracy  11.666666666666666
Iter :  74 Batch :  11   Loss :  0.43734688  Accuracy :  85.79  Class Accuracy :  22.530120481927714  Car class accuracy  22.530120481927714
Iter :  74 Batch :  12   Loss :  0.4907998  Accuracy :  82.16499999999999  Class Accuracy :  24.387096774193544  Car class accuracy  24.387096774193544
Iter :  74 Batch :  13   Loss :  0.48397988  Accuracy :  91.625  Class Accuracy :  13.161473087818695  Car class accuracy  13.161473087818695
Iter :  74 Batch :  14   Loss :  0.2592164  Accuracy :  91.795  Class Accuracy :  17.46341463414634  Car class accuracy  17.46341463414634
Iter :  74 Batch :  15   Loss :  0.5500638  Accuracy :  90.93  Class Accuracy :  12.839421088904205  Car class accuracy  12.839421088904205
Iter :  74 Batch :  16   Loss :  0.2364263  Accuracy :  93.88  Class Accuracy :  0.0  Car class accuracy /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.0
**** Iteration : 75 loss : 0.4846215 Accuracy: 91.0288579277865 Class Accuracy : 14.407777500592102
Iter :  75 Batch :  0   Loss :  0.38325572  Accuracy :  93.175  Class Accuracy :  13.42133051742344  Car class accuracy  13.42133051742344
Iter :  75 Batch :  1   Loss :  0.6401248  Accuracy :  92.89500000000001  Class Accuracy :  12.475035663338089  Car class accuracy  12.475035663338089
Iter :  75 Batch :  2   Loss :  0.20330091  Accuracy :  96.935  Class Accuracy :  10.452261306532664  Car class accuracy  10.452261306532664
Iter :  75 Batch :  3   Loss :  0.31719688  Accuracy :  92.025  Class Accuracy :  14.705882352941178  Car class accuracy  14.705882352941178
Iter :  75 Batch :  4   Loss :  0.3840326  Accuracy :  86.49  Class Accuracy :  28.57142857142857  Car class accuracy  28.57142857142857
Iter :  75 Batch :  5   Loss :  0.5553274  Accuracy :  93.94500000000001  Class Accuracy :  11.552208322695941  Car class accuracy  11.552208322695941
Iter :  75 Batch :  6   Loss :  0.25538668  Accuracy :  94.935  Class Accuracy :  12.669902912621362  Car class accuracy  12.669902912621362
Iter :  75 Batch :  7   Loss :  0.5090679  Accuracy :  88.645  Class Accuracy :  16.60086663456909  Car class accuracy  16.60086663456909
Iter :  75 Batch :  8   Loss :  1.0709674  Accuracy :  92.83  Class Accuracy :  11.848294137131502  Car class accuracy  11.848294137131502
Iter :  75 Batch :  9   Loss :  0.5621394  Accuracy :  85.495  Class Accuracy :  18.28082808280828  Car class accuracy  18.28082808280828
Iter :  75 Batch :  10   Loss :  0.14029905  Accuracy :  97.89999999999999  Class Accuracy :  11.304347826086955  Car class accuracy  11.304347826086955
Iter :  75 Batch :  11   Loss :  0.3465458  Accuracy :  91.215  Class Accuracy :  14.519774011299436  Car class accuracy  14.519774011299436
Iter :  75 Batch :  12   Loss :  0.42551538  Accuracy :  88.25  Class Accuracy :  20.023201856148493  Car class accuracy  20.023201856148493
Iter :  75 Batch :  13   Loss :  0.5820026  Accuracy :  89.795  Class Accuracy :  14.267310789049919  Car class accuracy  14.267310789049919
Iter :  75 Batch :  14   Loss :  0.32558745  Accuracy :  92.345  Class Accuracy :  12.288135593220339  Car class accuracy  12.288135593220339
Iter :  75 Batch :  15   Loss :  0.58394873  Accuracy :  91.08500000000001  Class Accuracy :  12.194337194337194  Car class accuracy  12.194337194337194
Iter :  75 Batch :  16   Loss :  0.16603072  Accuracy :  96.27  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 76 loss : 0.48401123 Accuracy: 91.04182416731217 Class Accuracy : 14.400219737820269
Iter :  76 Batch :  0   Loss :  0.2887084  Accuracy :  95.075  Class Accuracy :  13.346897253306206  Car class accuracy  13.346897253306206
Iter :  76 Batch :  1   Loss :  0.4353044  Accuracy :  93.585  Class Accuracy :  15.846153846153847  Car class accuracy  15.846153846153847
Iter :  76 Batch :  2   Loss :  0.11575237  Accuracy :  98.49  Class Accuracy :  10.099502487562189  Car class accuracy  10.099502487562189
Iter :  76 Batch :  3   Loss :  0.3042766  Accuracy :  92.645  Class Accuracy :  14.897959183673471  Car class accuracy  14.897959183673471
Iter :  76 Batch :  4   Loss :  0.30742514  Accuracy :  93.865  Class Accuracy :  9.130434782608695  Car class accuracy  9.130434782608695
Iter :  76 Batch :  5   Loss :  0.4947593  Accuracy :  96.12  Class Accuracy :  10.25294695481336  Car class accuracy  10.25294695481336
Iter :  76 Batch :  6   Loss :  0.2796352  Accuracy :  94.8  Class Accuracy :  17.88659793814433  Car class accuracy  17.88659793814433
Iter :  76 Batch :  7   Loss :  0.81996053  Accuracy :  93.69  Class Accuracy :  10.529897909577054  Car class accuracy  10.529897909577054
Iter :  76 Batch :  8   Loss :  0.45021987  Accuracy :  94.11  Class Accuracy :  13.269065981148243  Car class accuracy  13.269065981148243
Iter :  76 Batch :  9   Loss :  0.48271757  Accuracy :  88.825  Class Accuracy :  16.387387387387385  Car class accuracy  16.387387387387385
Iter :  76 Batch :  10   Loss :  0.10172665  Accuracy :  98.50999999999999  Class Accuracy :  9.920634920634921  Car class accuracy  9.920634920634921
Iter :  76 Batch :  11   Loss :  0.25035414  Accuracy :  95.31500000000001  Class Accuracy :  12.467532467532468  Car class accuracy  12.467532467532468
Iter :  76 Batch :  12   Loss :  0.54568744  Accuracy :  93.51  Class Accuracy :  13.716814159292035  Car class accuracy  13.716814159292035
Iter :  76 Batch :  13   Loss :  0.42648146  Accuracy :  89.73  Class Accuracy :  16.01066666666667  Car class accuracy  16.01066666666667
Iter :  76 Batch :  14   Loss :  0.29690132  Accuracy :  92.785  Class Accuracy :  16.84  Car class accuracy  16.84
Iter :  76 Batch :  15   Loss :  0.55207235  Accuracy :  89.115  Class Accuracy :  14.572192513368984  Car class accuracy  14.572192513368984
Iter :  76 Batch :  16   Loss :  0.10872727  Accuracy :  98.485  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 77 loss : 0.48250702 Accuracy: 91.08077217125381 Class Accuracy : 14.377567558087032
Iter :  77 Batch :  0   Loss :  0.7509007  Accuracy :  88.4  Class Accuracy :  15.513459621136588  Car class accuracy  15.513459621136588
Iter :  77 Batch :  1   Loss :  0.47854298  Accuracy :  92.94  Class Accuracy :  15.96452328159645  Car class accuracy  15.96452328159645
Iter :  77 Batch :  2   Loss :  0.111708194  Accuracy :  97.84  Class Accuracy :  11.264367816091953  Car class accuracy  11.264367816091953
Iter :  77 Batch :  3   Loss :  0.29159912  Accuracy :  93.28  Class Accuracy :  15.241379310344827  Car class accuracy  15.241379310344827
Iter :  77 Batch :  4   Loss :  0.4155837  Accuracy :  87.335  Class Accuracy :  21.875  Car class accuracy  21.875
Iter :  77 Batch :  5   Loss :  0.63994133  Accuracy :  93.99499999999999  Class Accuracy :  10.668756530825496  Car class accuracy  10.668756530825496
Iter :  77 Batch :  6   Loss :  0.16648391  Accuracy :  96.585  Class Accuracy :  12.390243902439025  Car class accuracy  12.390243902439025
Iter :  77 Batch :  7   Loss :  0.5087323  Accuracy :  91.89500000000001  Class Accuracy :  12.456813819577734  Car class accuracy  12.456813819577734
Iter :  77 Batch :  8   Loss :  0.49320668  Accuracy :  94.72500000000001  Class Accuracy :  12.264069264069263  Car class accuracy  12.264069264069263
Iter :  77 Batch :  9   Loss :  0.85495067  Accuracy :  89.22  Class Accuracy :  12.113821138211382  Car class accuracy  12.113821138211382
Iter :  77 Batch :  10   Loss :  0.19785902  Accuracy :  97.3  Class Accuracy :  10.352112676056338  Car class accuracy  10.352112676056338
Iter :  77 Batch :  11   Loss :  0.28436637  Accuracy :  94.235  Class Accuracy :  13.945578231292515  Car class accuracy  13.945578231292515
Iter :  77 Batch :  12   Loss :  0.40850595  Accuracy :  86.315  Class Accuracy :  22.77310924369748  Car class accuracy  22.77310924369748
Iter :  77 Batch :  13   Loss :  0.47960302  Accuracy :  88.22  Class Accuracy :  16.56879677605066  Car class accuracy  16.56879677605066
Iter :  77 Batch :  14   Loss :  0.33521166  Accuracy :  92.495  Class Accuracy :  13.151260504201682  Car class accuracy  13.151260504201682
Iter :  77 Batch :  15   Loss :  0.64979225  Accuracy :  89.015  Class Accuracy :  13.79235760634463  Car class accuracy  13.79235760634463
Iter :  77 Batch :  16   Loss :  0.11388166  Accuracy :  98.215  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 78 loss : 0.4817359 Accuracy: 91.09861132075471 Class Accuracy : 14.366938879773416
Iter :  78 Batch :  0   Loss :  0.28650543  Accuracy :  94.745  Class Accuracy :  13.73404255319149  Car class accuracy  13.73404255319149
Iter :  78 Batch :  1   Loss :  0.48190644  Accuracy :  92.235  Class Accuracy :  15.636492220650638  Car class accuracy  15.636492220650638
Iter :  78 Batch :  2   Loss :  0.15433052  Accuracy :  98.63  Class Accuracy :  5.073891625615764  Car class accuracy  5.073891625615764
Iter :  78 Batch :  3   Loss :  0.31054533  Accuracy :  93.285  Class Accuracy :  13.020134228187919  Car class accuracy  13.020134228187919
Iter :  78 Batch :  4   Loss :  0.36363578  Accuracy :  90.345  Class Accuracy :  17.058823529411764  Car class accuracy  17.058823529411764
Iter :  78 Batch :  5   Loss :  0.5462862  Accuracy :  95.57  Class Accuracy :  9.23419879360084  Car class accuracy  9.23419879360084
Iter :  78 Batch :  6   Loss :  0.18944322  Accuracy :  97.89  Class Accuracy :  5.773809523809524  Car class accuracy  5.773809523809524
Iter :  78 Batch :  7   Loss :  0.41316533  Accuracy :  93.515  Class Accuracy :  11.716008771929824  Car class accuracy  11.716008771929824
Iter :  78 Batch :  8   Loss :  0.6178904  Accuracy :  91.83  Class Accuracy :  13.19910514541387  Car class accuracy  13.19910514541387
Iter :  78 Batch :  9   Loss :  0.45595282  Accuracy :  90.66  Class Accuracy :  14.087656529516995  Car class accuracy  14.087656529516995
Iter :  78 Batch :  10   Loss :  0.14319602  Accuracy :  97.41499999999999  Class Accuracy :  11.843971631205674  Car class accuracy  11.843971631205674
Iter :  78 Batch :  11   Loss :  0.16673592  Accuracy :  97.14  Class Accuracy :  9.178082191780822  Car class accuracy  9.178082191780822
Iter :  78 Batch :  12   Loss :  0.32090318  Accuracy :  90.885  Class Accuracy :  18.99590163934426  Car class accuracy  18.99590163934426
Iter :  78 Batch :  13   Loss :  0.43930352  Accuracy :  92.42  Class Accuracy :  13.223796033994335  Car class accuracy  13.223796033994335
Iter :  78 Batch :  14   Loss :  0.19929811  Accuracy :  95.515  Class Accuracy :  13.536585365853659  Car class accuracy  13.536585365853659
Iter :  78 Batch :  15   Loss :  0.41220185  Accuracy :  92.83500000000001  Class Accuracy :  12.521676300578036  Car class accuracy  12.521676300578036
Iter :  78 Batch :  16   Loss :  0.07750599  Accuracy :  99.09  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 79 loss : 0.4797905 Accuracy: 91.1398397913562 Class Accuracy : 14.332360798646693
Iter :  79 Batch :  0   Loss :  0.2569511  Accuracy :  94.525  Class Accuracy :  12.47715736040609  Car class accuracy  12.47715736040609
Iter :  79 Batch :  1   Loss :  0.39829546  Accuracy :  92.23  Class Accuracy :  17.31454005934718  Car class accuracy  17.31454005934718
Iter :  79 Batch :  2   Loss :  0.100474894  Accuracy :  98.88  Class Accuracy :  10.62200956937799  Car class accuracy  10.62200956937799
Iter :  79 Batch :  3   Loss :  0.23200613  Accuracy :  96.67999999999999  Class Accuracy :  10.903225806451614  Car class accuracy  10.903225806451614
Iter :  79 Batch :  4   Loss :  0.28950077  Accuracy :  92.485  Class Accuracy :  13.846153846153847  Car class accuracy  13.846153846153847
Iter :  79 Batch :  5   Loss :  0.44208604  Accuracy :  95.88499999999999  Class Accuracy :  11.349974528782477  Car class accuracy  11.349974528782477
Iter :  79 Batch :  6   Loss :  0.21506304  Accuracy :  95.355  Class Accuracy :  12.162162162162163  Car class accuracy  12.162162162162163
Iter :  79 Batch :  7   Loss :  0.35721284  Accuracy :  91.065  Class Accuracy :  15.55689343768814  Car class accuracy  15.55689343768814
Iter :  79 Batch :  8   Loss :  0.45891377  Accuracy :  94.735  Class Accuracy :  12.210065645514224  Car class accuracy  12.210065645514224
Iter :  79 Batch :  9   Loss :  0.47064093  Accuracy :  90.55  Class Accuracy :  14.479465138490927  Car class accuracy  14.479465138490927
Iter :  79 Batch :  10   Loss :  0.08862127  Accuracy :  99.385  Class Accuracy :  9.793103448275861  Car class accuracy  9.793103448275861
Iter :  79 Batch :  11   Loss :  0.20602833  Accuracy :  95.45  Class Accuracy :  12.387096774193548  Car class accuracy  12.387096774193548
Iter :  79 Batch :  12   Loss :  0.3058458  Accuracy :  90.3  Class Accuracy :  19.79591836734694  Car class accuracy  19.79591836734694
Iter :  79 Batch :  13   Loss :  0.28091463  Accuracy :  93.94500000000001  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  79 Batch :  14   Loss :  0.15085919  Accuracy :  96.85000000000001  Class Accuracy :  11.630901287553648  Car class accuracy  11.630901287553648
Iter :  79 Batch :  15   Loss :  0.36175868  Accuracy :  94.195  Class Accuracy :  11.678520625889046  Car class accuracy  11.678520625889046
Iter :  79 Batch :  16   Loss :  0.03461473  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 80 loss : 0.47721022 Accuracy: 91.1862362030905 Class Accuracy : 14.30726174626551
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__80_0.ckpt
saved prediction of 0 accuracy :  0.9585  class accuracy :  0.0849425568320704  car_class_accuracy :  0.0849425568320704
saved prediction of 1 accuracy :  0.9715  class accuracy :  0.0968503937007874  car_class_accuracy :  0.0968503937007874
saved prediction of 2 accuracy :  0.88575  class accuracy :  0.07802275960170697  car_class_accuracy :  0.07802275960170697
saved prediction of 3 accuracy :  0.99245  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 4 accuracy :  0.9454  class accuracy :  0.08548827059465357  car_class_accuracy :  0.08548827059465357
saved prediction of 5 accuracy :  0.98795  class accuracy :  0.0920863309352518  car_class_accuracy :  0.0920863309352518
saved prediction of 6 accuracy :  0.9664  class accuracy :  0.09929078014184398  car_class_accuracy :  0.09929078014184398
saved prediction of 7 accuracy :  0.89695  class accuracy :  0.13624567474048443  car_class_accuracy :  0.13624567474048443
saved prediction of 8 accuracy :  0.95715  class accuracy :  0.0688536409516943  car_class_accuracy :  0.0688536409516943
saved prediction of 9 accuracy :  0.95625  class accuracy :  0.04378265412748171  car_class_accuracy :  0.04378265412748171
saved prediction of 10 accuracy :  0.9586  class accuracy :  0.09174793698424606  car_class_accuracy :  0.09174793698424606
saved prediction of 11 accuracy :  0.9502  class accuracy :  0.12037037037037038  car_class_accuracy :  0.12037037037037038
saved prediction of 12 accuracy :  0.95665  class accuracy :  0.10437017994858613  car_class_accuracy :  0.10437017994858613
saved prediction of 13 accuracy :  0.9899  class accuracy :  0.037244897959183676  car_class_accuracy :  0.037244897959183676
saved prediction of 14 accuracy :  0.9455  class accuracy :  0.07913870246085011  car_class_accuracy :  0.07913870246085011
saved prediction of 15 accuracy :  0.9446  class accuracy :  0.0765432098765432  car_class_accuracy :  0.0765432098765432
saved prediction of 16 accuracy :  0.9791  class accuracy :  0.05500000000000001  car_class_accuracy :  0.05500000000000001
saved prediction of 17 accuracy :  0.9727  class accuracy :  0.09001353179972936  car_class_accuracy :  0.09001353179972936
saved prediction of 18 accuracy :  0.9725  class accuracy :  0.1021505376344086  car_class_accuracy :  0.1021505376344086
saved prediction of 19 accuracy :  0.86435  class accuracy :  0.07989769820971868  car_class_accuracy :  0.07989769820971868
saved prediction of 20 accuracy :  0.9898  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 21 accuracy :  0.9538  class accuracy :  0.08407746100053792  car_class_accuracy :  0.08407746100053792
saved prediction of 22 accuracy :  0.99005  class accuracy :  0.08914728682170543  car_class_accuracy :  0.08914728682170543
saved prediction of 23 accuracy :  0.97145  class accuracy :  0.12198581560283688  car_class_accuracy :  0.12198581560283688
saved prediction of 24 accuracy :  0.91955  class accuracy :  0.11816513761467891  car_class_accuracy :  0.11816513761467891
saved prediction of 25 accuracy :  0.9468  class accuracy :  0.06694750486066105  car_class_accuracy :  0.06694750486066105
saved prediction of 26 accuracy :  0.95265  class accuracy :  0.043020833333333335  car_class_accuracy :  0.043020833333333335
saved prediction of 27 accuracy :  0.9561  class accuracy :  0.08602941176470588  car_class_accuracy :  0.08602941176470588
saved prediction of 28 accuracy :  0.93815  class accuracy :  0.13054298642533937  car_class_accuracy :  0.13054298642533937
saved prediction of 29 accuracy :  0.9576  class accuracy :  0.09795819154107924  car_class_accuracy :  0.09795819154107924
saved prediction of 30 accuracy :  0.98925  class accuracy :  0.03967391304347826  car_class_accuracy :  0.03967391304347826
saved prediction of 31 accuracy :  0.95545  class accuracy :  0.07705248990578735  car_class_accuracy :  0.07705248990578735
saved prediction of 32 accuracy :  0.94165  class accuracy :  0.08057110862262037  car_class_accuracy :  0.08057110862262037
saved prediction of 33 accuracy :  0.97235  class accuracy :  0.05238095238095238  car_class_accuracy :  0.05238095238095238
saved prediction of 34 accuracy :  0.9674  class accuracy :  0.08766804550155119  car_class_accuracy :  0.08766804550155119
saved prediction of 35 accuracy :  0.9722  class accuracy :  0.12325581395348836  car_class_accuracy :  0.12325581395348836
saved prediction of 36 accuracy :  0.8611  class accuracy :  0.08440832910106652  car_class_accuracy :  0.08440832910106652
saved prediction of 37 accuracy :  0.9908  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 38 accuracy :  0.95335  class accuracy :  0.08653311074012242  car_class_accuracy :  0.08653311074012242
saved prediction of 39 accuracy :  0.9897  class accuracy :  0.0874074074074074  car_class_accuracy :  0.0874074074074074
saved prediction of 40 accuracy :  0.9629  class accuracy :  0.12413793103448276  car_class_accuracy :  0.12413793103448276
saved prediction of 41 accuracy :  0.9096  class accuracy :  0.12130281690140846  car_class_accuracy :  0.12130281690140846
saved prediction of 42 accuracy :  0.95445  class accuracy :  0.0715629522431259  car_class_accuracy :  0.0715629522431259
saved prediction of 43 accuracy :  0.95715  class accuracy :  0.04677248677248677  car_class_accuracy :  0.04677248677248677
saved prediction of 44 accuracy :  0.95825  class accuracy :  0.08906020558002938  car_class_accuracy :  0.08906020558002938
saved prediction of 45 accuracy :  0.9509  class accuracy :  0.11794310722100657  car_class_accuracy :  0.11794310722100657
saved prediction of 46 accuracy :  0.96105  class accuracy :  0.0993649449618967  car_class_accuracy :  0.0993649449618967
saved prediction of 47 accuracy :  0.98885  class accuracy :  0.024509803921568627  car_class_accuracy :  0.024509803921568627
saved prediction of 48 accuracy :  0.94575  class accuracy :  0.08342572062084257  car_class_accuracy :  0.08342572062084257
saved prediction of 49 accuracy :  0.938  class accuracy :  0.07924932975871314  car_class_accuracy :  0.07924932975871314
saved prediction of 50 accuracy :  0.9728  class accuracy :  0.1285714285714286  car_class_accuracy :  0.1285714285714286
saved prediction of 51 accuracy :  0.9709  class accuracy :  0.09027308192457736  car_class_accuracy :  0.09027308192457736
saved prediction of 52 accuracy :  0.97305  class accuracy :  0.09571045576407507  car_class_accuracy :  0.09571045576407507
saved prediction of 53 accuracy :  0.8825  class accuracy :  0.08273491214667686  car_class_accuracy :  0.08273491214667686
saved prediction of 54 accuracy :  0.9919  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 55 accuracy :  0.95185  class accuracy :  0.08411164787976382  car_class_accuracy :  0.08411164787976382
saved prediction of 56 accuracy :  0.98875  class accuracy :  0.09024390243902439  car_class_accuracy :  0.09024390243902439
saved prediction of 57 accuracy :  0.9713  class accuracy :  0.11232876712328768  car_class_accuracy :  0.11232876712328768
saved prediction of 58 accuracy :  0.91535  class accuracy :  0.12103849597135183  car_class_accuracy :  0.12103849597135183
saved prediction of 59 accuracy :  0.9555  class accuracy :  0.07196327683615819  car_class_accuracy :  0.07196327683615819
saved prediction of 60 accuracy :  0.9574  class accuracy :  0.04351949420442571  car_class_accuracy :  0.04351949420442571
saved prediction of 61 accuracy :  0.9626  class accuracy :  0.08164556962025317  car_class_accuracy :  0.08164556962025317
saved prediction of 62 accuracy :  0.95005  class accuracy :  0.1299771167048055  car_class_accuracy :  0.1299771167048055
saved prediction of 63 accuracy :  0.9588  class accuracy :  0.10083579154375615  car_class_accuracy :  0.10083579154375615
saved prediction of 64 accuracy :  0.99115  class accuracy :  0.04098360655737705  car_class_accuracy :  0.04098360655737705
saved prediction of 65 accuracy :  0.9522  class accuracy :  0.07997557997557998  car_class_accuracy :  0.07997557997557998
saved prediction of 66 accuracy :  0.93915  class accuracy :  0.08189509306260576  car_class_accuracy :  0.08189509306260576
saved prediction of 67 accuracy :  0.97245  class accuracy :  0.061111111111111116  car_class_accuracy :  0.061111111111111116
saved prediction of 68 accuracy :  0.9722  class accuracy :  0.09104826154644526  car_class_accuracy :  0.09104826154644526
saved prediction of 69 accuracy :  0.973  class accuracy :  0.1119891008174387  car_class_accuracy :  0.1119891008174387
saved prediction of 70 accuracy :  0.861  class accuracy :  0.06853320118929633  car_class_accuracy :  0.06853320118929633
saved prediction of 71 accuracy :  0.99185  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 72 accuracy :  0.95525  class accuracy :  0.09321845469705392  car_class_accuracy :  0.09321845469705392
saved prediction of 73 accuracy :  0.9877  class accuracy :  0.08150684931506849  car_class_accuracy :  0.08150684931506849
saved prediction of 74 accuracy :  0.95945  class accuracy :  0.12933333333333333  car_class_accuracy :  0.12933333333333333
saved prediction of 75 accuracy :  0.91655  class accuracy :  0.11574585635359116  car_class_accuracy :  0.11574585635359116
saved prediction of 76 accuracy :  0.95485  class accuracy :  0.06443335709194584  car_class_accuracy :  0.06443335709194584
saved prediction of 77 accuracy :  0.957  class accuracy :  0.04543478260869565  car_class_accuracy :  0.04543478260869565
saved prediction of 78 accuracy :  0.95325  class accuracy :  0.08837042354630295  car_class_accuracy :  0.08837042354630295
saved prediction of 79 accuracy :  0.94925  class accuracy :  0.125  car_class_accuracy :  0.125
saved prediction of 80 accuracy :  0.959  class accuracy :  0.10263954997836436  car_class_accuracy :  0.10263954997836436
saved prediction of 81 accuracy :  0.98865  class accuracy :  0.027860696517412936  car_class_accuracy :  0.027860696517412936
saved prediction of 82 accuracy :  0.95185  class accuracy :  0.07681071211199027  car_class_accuracy :  0.07681071211199027
saved prediction of 83 accuracy :  0.93875  class accuracy :  0.08146067415730338  car_class_accuracy :  0.08146067415730338
saved prediction of 84 accuracy :  0.9736  class accuracy :  0.08333333333333334  car_class_accuracy :  0.08333333333333334
saved prediction of 85 accuracy :  0.9693  class accuracy :  0.08989028213166145  car_class_accuracy :  0.08989028213166145
saved prediction of 86 accuracy :  0.97205  class accuracy :  0.1150259067357513  car_class_accuracy :  0.1150259067357513
saved prediction of 87 accuracy :  0.87455  class accuracy :  0.07032291132752436  car_class_accuracy :  0.07032291132752436
saved prediction of 88 accuracy :  0.99145  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 89 accuracy :  0.95215  class accuracy :  0.09499733901011176  car_class_accuracy :  0.09499733901011176
saved prediction of 90 accuracy :  0.9888  class accuracy :  0.08333333333333334  car_class_accuracy :  0.08333333333333334
saved prediction of 91 accuracy :  0.9682  class accuracy :  0.12132352941176469  car_class_accuracy :  0.12132352941176469
saved prediction of 92 accuracy :  0.91335  class accuracy :  0.11502487562189054  car_class_accuracy :  0.11502487562189054
saved prediction of 93 accuracy :  0.9475  class accuracy :  0.06373994638069705  car_class_accuracy :  0.06373994638069705
saved prediction of 94 accuracy :  0.9561  class accuracy :  0.04252631578947368  car_class_accuracy :  0.04252631578947368
saved prediction of 95 accuracy :  0.956  class accuracy :  0.08717754172989378  car_class_accuracy :  0.08717754172989378
saved prediction of 96 accuracy :  0.9484  class accuracy :  0.11886409736308316  car_class_accuracy :  0.11886409736308316
saved prediction of 97 accuracy :  0.96235  class accuracy :  0.09706654991243432  car_class_accuracy :  0.09706654991243432
saved prediction of 98 accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.9896  class accuracy :  0.031578947368421054  car_class_accuracy :  0.031578947368421054
saved prediction of 99 accuracy :  0.9401  class accuracy :  0.08999037536092397  car_class_accuracy :  0.08999037536092397
Iter :  80 Batch :  0   Loss :  0.2757383  Accuracy :  96.505  Class Accuracy :  9.699792960662526  Car class accuracy  9.699792960662526
Iter :  80 Batch :  1   Loss :  0.2842489  Accuracy :  95.845  Class Accuracy :  13.45507669831994  Car class accuracy  13.45507669831994
Iter :  80 Batch :  2   Loss :  0.06801964  Accuracy :  99.265  Class Accuracy :  9.069767441860463  Car class accuracy  9.069767441860463
Iter :  80 Batch :  3   Loss :  0.15038458  Accuracy :  98.46000000000001  Class Accuracy :  9.354838709677418  Car class accuracy  9.354838709677418
Iter :  80 Batch :  4   Loss :  0.20606184  Accuracy :  94.8  Class Accuracy :  14.285714285714285  Car class accuracy  14.285714285714285
Iter :  80 Batch :  5   Loss :  1.3148371  Accuracy :  93.96  Class Accuracy :  6.107744107744108  Car class accuracy  6.107744107744108
Iter :  80 Batch :  6   Loss :  0.18217815  Accuracy :  95.405  Class Accuracy :  12.921348314606742  Car class accuracy  12.921348314606742
Iter :  80 Batch :  7   Loss :  0.29232416  Accuracy :  92.865  Class Accuracy :  14.533925174381737  Car class accuracy  14.533925174381737
Iter :  80 Batch :  8   Loss :  0.40649894  Accuracy :  91.22  Class Accuracy :  16.528468767274738  Car class accuracy  16.528468767274738
Iter :  80 Batch :  9   Loss :  0.49171305  Accuracy :  83.695  Class Accuracy :  20.64279155188246  Car class accuracy  20.64279155188246
Iter :  80 Batch :  10   Loss :  0.12678123  Accuracy :  96.855  Class Accuracy :  11.324503311258278  Car class accuracy  11.324503311258278
Iter :  80 Batch :  11   Loss :  0.43376216  Accuracy :  85.005  Class Accuracy :  26.064516129032256  Car class accuracy  26.064516129032256
Iter :  80 Batch :  12   Loss :  0.24430703  Accuracy :  92.965  Class Accuracy :  16.96842105263158  Car class accuracy  16.96842105263158
Iter :  80 Batch :  13   Loss :  0.32429215  Accuracy :  91.51  Class Accuracy :  15.363128491620111  Car class accuracy  15.363128491620111
Iter :  80 Batch :  14   Loss :  0.22837383  Accuracy :  93.745  Class Accuracy :  14.155844155844155  Car class accuracy  14.155844155844155
Iter :  80 Batch :  15   Loss :  0.4751902  Accuracy :  88.62  Class Accuracy :  15.801324503311259  Car class accuracy  15.801324503311259
Iter :  80 Batch :  16   Loss :  0.2421956  Accuracy :  94.405  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 81 loss : 0.47549096 Accuracy: 91.21164244186046 Class Accuracy : 14.29494616194088
Iter :  81 Batch :  0   Loss :  0.25729996  Accuracy :  94.575  Class Accuracy :  13.891834570519618  Car class accuracy  13.891834570519618
Iter :  81 Batch :  1   Loss :  0.33477736  Accuracy :  93.94500000000001  Class Accuracy :  15.062089116143168  Car class accuracy  15.062089116143168
Iter :  81 Batch :  2   Loss :  0.09615473  Accuracy :  97.765  Class Accuracy :  12.124352331606218  Car class accuracy  12.124352331606218
Iter :  81 Batch :  3   Loss :  0.24458215  Accuracy :  94.295  Class Accuracy :  14.782608695652172  Car class accuracy  14.782608695652172
Iter :  81 Batch :  4   Loss :  0.25403085  Accuracy :  92.92  Class Accuracy :  10.833333333333332  Car class accuracy  10.833333333333332
Iter :  81 Batch :  5   Loss :  0.33837324  Accuracy :  96.57  Class Accuracy :  11.245533435426239  Car class accuracy  11.245533435426239
Iter :  81 Batch :  6   Loss :  0.20763838  Accuracy :  96.96000000000001  Class Accuracy :  11.074766355140186  Car class accuracy  11.074766355140186
Iter :  81 Batch :  7   Loss :  0.5265808  Accuracy :  95.63000000000001  Class Accuracy :  9.666344294003867  Car class accuracy  9.666344294003867
Iter :  81 Batch :  8   Loss :  0.6875093  Accuracy :  95.14  Class Accuracy :  8.799772468714448  Car class accuracy  8.799772468714448
Iter :  81 Batch :  9   Loss :  0.51214635  Accuracy :  90.68  Class Accuracy :  13.215898825654923  Car class accuracy  13.215898825654923
Iter :  81 Batch :  10   Loss :  0.11799522  Accuracy :  97.255  Class Accuracy :  11.517241379310345  Car class accuracy  11.517241379310345
Iter :  81 Batch :  11   Loss :  0.25652382  Accuracy :  92.855  Class Accuracy :  15.2  Car class accuracy  15.2
Iter :  81 Batch :  12   Loss :  0.25583988  Accuracy :  92.75999999999999  Class Accuracy :  16.868250539956804  Car class accuracy  16.868250539956804
Iter :  81 Batch :  13   Loss :  0.4237768  Accuracy :  94.64  Class Accuracy :  11.847345132743364  Car class accuracy  11.847345132743364
Iter :  81 Batch :  14   Loss :  0.19532904  Accuracy :  94.905  Class Accuracy :  14.878048780487804  Car class accuracy  14.878048780487804
Iter :  81 Batch :  15   Loss :  0.4025289  Accuracy :  93.46  Class Accuracy :  12.248213125406108  Car class accuracy  12.248213125406108
Iter :  81 Batch :  16   Loss :  0.32406172  Accuracy :  91.18  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 82 loss : 0.47358987 Accuracy: 91.25108040201005 Class Accuracy : 14.266404559378858
Iter :  82 Batch :  0   Loss :  0.29266733  Accuracy :  92.66  Class Accuracy :  15.806122448979593  Car class accuracy  15.806122448979593
Iter :  82 Batch :  1   Loss :  0.34435126  Accuracy :  95.43  Class Accuracy :  12.590448625180898  Car class accuracy  12.590448625180898
Iter :  82 Batch :  2   Loss :  0.10899952  Accuracy :  97.185  Class Accuracy :  13.571428571428573  Car class accuracy  13.571428571428573
Iter :  82 Batch :  3   Loss :  0.21414363  Accuracy :  95.665  Class Accuracy :  12.012195121951219  Car class accuracy  12.012195121951219
Iter :  82 Batch :  4   Loss :  0.33481485  Accuracy :  88.67  Class Accuracy :  19.411764705882355  Car class accuracy  19.411764705882355
Iter :  82 Batch :  5   Loss :  0.31892407  Accuracy :  93.66  Class Accuracy :  13.06935817805383  Car class accuracy  13.06935817805383
Iter :  82 Batch :  6   Loss :  0.25178087  Accuracy :  95.655  Class Accuracy :  12.415458937198068  Car class accuracy  12.415458937198068
Iter :  82 Batch :  7   Loss :  0.29849407  Accuracy :  92.69  Class Accuracy :  14.258227848101265  Car class accuracy  14.258227848101265
Iter :  82 Batch :  8   Loss :  0.35945687  Accuracy :  95.155  Class Accuracy :  12.461447212336891  Car class accuracy  12.461447212336891
Iter :  82 Batch :  9   Loss :  0.37994486  Accuracy :  92.04  Class Accuracy :  14.016468435498627  Car class accuracy  14.016468435498627
Iter :  82 Batch :  10   Loss :  0.10797998  Accuracy :  97.38  Class Accuracy :  11.417910447761196  Car class accuracy  11.417910447761196
Iter :  82 Batch :  11   Loss :  0.22676143  Accuracy :  95.46  Class Accuracy :  11.533742331288344  Car class accuracy  11.533742331288344
Iter :  82 Batch :  12   Loss :  0.20985171  Accuracy :  94.07  Class Accuracy :  14.924731182795698  Car class accuracy  14.924731182795698
Iter :  82 Batch :  13   Loss :  0.41214576  Accuracy :  94.76  Class Accuracy :  12.063841496973033  Car class accuracy  12.063841496973033
Iter :  82 Batch :  14   Loss :  0.1340926  Accuracy :  97.33500000000001  Class Accuracy :  12.181069958847738  Car class accuracy  12.181069958847738
Iter :  82 Batch :  15   Loss :  0.4096331  Accuracy :  93.715  Class Accuracy :  11.799352750809062  Car class accuracy  11.799352750809062
Iter :  82 Batch :  16   Loss :  0.07474624  Accuracy :  98.46000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 83 loss : 0.4710564 Accuracy: 91.2927269503546 Class Accuracy : 14.245840510260876
Iter :  83 Batch :  0   Loss :  0.30849075  Accuracy :  94.08  Class Accuracy :  12.02661207778915  Car class accuracy  12.02661207778915
Iter :  83 Batch :  1   Loss :  0.40473974  Accuracy :  96.135  Class Accuracy :  11.414356787491116  Car class accuracy  11.414356787491116
Iter :  83 Batch :  2   Loss :  0.06992655  Accuracy :  98.875  Class Accuracy :  10.971428571428572  Car class accuracy  10.971428571428572
Iter :  83 Batch :  3   Loss :  0.18519245  Accuracy :  97.14500000000001  Class Accuracy :  10.27972027972028  Car class accuracy  10.27972027972028
Iter :  83 Batch :  4   Loss :  0.26229513  Accuracy :  91.765  Class Accuracy :  17.82608695652174  Car class accuracy  17.82608695652174
Iter :  83 Batch :  5   Loss :  0.25733832  Accuracy :  96.935  Class Accuracy :  11.275277234181344  Car class accuracy  11.275277234181344
Iter :  83 Batch :  6   Loss :  0.1786839  Accuracy :  96.95  Class Accuracy :  10.625  Car class accuracy  10.625
Iter :  83 Batch :  7   Loss :  0.3142605  Accuracy :  94.11500000000001  Class Accuracy :  12.737665463297231  Car class accuracy  12.737665463297231
Iter :  83 Batch :  8   Loss :  0.32668784  Accuracy :  94.565  Class Accuracy :  13.254223652453739  Car class accuracy  13.254223652453739
Iter :  83 Batch :  9   Loss :  0.46941513  Accuracy :  91.52  Class Accuracy :  14.045275590551181  Car class accuracy  14.045275590551181
Iter :  83 Batch :  10   Loss :  0.0934693  Accuracy :  98.30499999999999  Class Accuracy :  9.10344827586207  Car class accuracy  9.10344827586207
Iter :  83 Batch :  11   Loss :  0.16765928  Accuracy :  96.54  Class Accuracy :  11.103448275862068  Car class accuracy  11.103448275862068
Iter :  83 Batch :  12   Loss :  0.24595612  Accuracy :  93.235  Class Accuracy :  15.736607142857142  Car class accuracy  15.736607142857142
Iter :  83 Batch :  13   Loss :  0.27955857  Accuracy :  94.555  Class Accuracy :  13.097294185377088  Car class accuracy  13.097294185377088
Iter :  83 Batch :  14   Loss :  0.13475032  Accuracy :  97.275  Class Accuracy :  12.57777777777778  Car class accuracy  12.57777777777778
Iter :  83 Batch :  15   Loss :  0.38969207  Accuracy :  95.41  Class Accuracy :  10.18018018018018  Car class accuracy  10.18018018018018
Iter :  83 Batch :  16   Loss :  0.060414348  Accuracy :  99.25  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 84 loss : 0.46835178 Accuracy: 91.34505956552206 Class Accuracy : 14.213657688801115
Iter :  84 Batch :  0   Loss :  0.21128134  Accuracy :  95.66  Class Accuracy :  13.574423480083858  Car class accuracy  13.574423480083858
Iter :  84 Batch :  1   Loss :  0.2539708  Accuracy :  95.17999999999999  Class Accuracy :  14.320987654320987  Car class accuracy  14.320987654320987
Iter :  84 Batch :  2   Loss :  0.063829795  Accuracy :  99.29  Class Accuracy :  10.154639175257731  Car class accuracy  10.154639175257731
Iter :  84 Batch :  3   Loss :  0.11715557  Accuracy :  98.76  Class Accuracy :  9.347826086956522  Car class accuracy  9.347826086956522
Iter :  84 Batch :  4   Loss :  0.21230677  Accuracy :  94.595  Class Accuracy :  13.571428571428573  Car class accuracy  13.571428571428573
Iter :  84 Batch :  5   Loss :  0.36181092  Accuracy :  95.14  Class Accuracy :  11.756300337750066  Car class accuracy  11.756300337750066
Iter :  84 Batch :  6   Loss :  0.15631953  Accuracy :  96.865  Class Accuracy :  14.352331606217616  Car class accuracy  14.352331606217616
Iter :  84 Batch :  7   Loss :  0.2776224  Accuracy :  94.6  Class Accuracy :  12.773757838880847  Car class accuracy  12.773757838880847
Iter :  84 Batch :  8   Loss :  0.5846793  Accuracy :  94.96  Class Accuracy :  11.027764247442766  Car class accuracy  11.027764247442766
Iter :  84 Batch :  9   Loss :  0.37834716  Accuracy :  90.995  Class Accuracy :  14.887755102040817  Car class accuracy  14.887755102040817
Iter :  84 Batch :  10   Loss :  0.07278016  Accuracy :  98.55000000000001  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  84 Batch :  11   Loss :  0.19041608  Accuracy :  95.505  Class Accuracy :  14.081632653061224  Car class accuracy  14.081632653061224
Iter :  84 Batch :  12   Loss :  0.43174872  Accuracy :  85.53500000000001  Class Accuracy :  23.403361344537814  Car class accuracy  23.403361344537814
Iter :  84 Batch :  13   Loss :  0.45036015  Accuracy :  92.86999999999999  Class Accuracy :  13.365906623235613  Car class accuracy  13.365906623235613
Iter :  84 Batch :  14   Loss :  0.22330701  Accuracy :  93.47999999999999  Class Accuracy :  14.597701149425287  Car class accuracy  14.597701149425287
Iter :  84 Batch :  15   Loss :  0.37503463  Accuracy :  92.825  Class Accuracy :  12.985274431057563  Car class accuracy  12.985274431057563
Iter :  84 Batch :  16   Loss :  0.12346553  Accuracy :  96.6  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 85 loss : 0.46594352 Accuracy: 91.38560249307479 Class Accuracy : 14.195526739765155
Iter :  85 Batch :  0   Loss :  0.35620797  Accuracy :  90.89500000000001  Class Accuracy :  17.76617954070981  Car class accuracy  17.76617954070981
Iter :  85 Batch :  1   Loss :  0.2846833  Accuracy :  94.78999999999999  Class Accuracy :  13.985401459854014  Car class accuracy  13.985401459854014
Iter :  85 Batch :  2   Loss :  0.069266215  Accuracy :  98.79  Class Accuracy :  11.538461538461538  Car class accuracy  11.538461538461538
Iter :  85 Batch :  3   Loss :  0.17978188  Accuracy :  97.675  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  85 Batch :  4   Loss :  0.40782446  Accuracy :  84.53  Class Accuracy :  23.846153846153843  Car class accuracy  23.846153846153843
Iter :  85 Batch :  5   Loss :  0.24225959  Accuracy :  96.04  Class Accuracy :  11.921834625322997  Car class accuracy  11.921834625322997
Iter :  85 Batch :  6   Loss :  0.1955515  Accuracy :  94.60499999999999  Class Accuracy :  17.027027027027025  Car class accuracy  17.027027027027025
Iter :  85 Batch :  7   Loss :  0.27219635  Accuracy :  94.315  Class Accuracy :  12.96034763715372  Car class accuracy  12.96034763715372
Iter :  85 Batch :  8   Loss :  0.41986293  Accuracy :  96.205  Class Accuracy :  11.169513797634693  Car class accuracy  11.169513797634693
Iter :  85 Batch :  9   Loss :  0.45792094  Accuracy :  93.77499999999999  Class Accuracy :  11.165829145728642  Car class accuracy  11.165829145728642
Iter :  85 Batch :  10   Loss :  0.08038347  Accuracy :  99.105  Class Accuracy :  9.67479674796748  Car class accuracy  9.67479674796748
Iter :  85 Batch :  11   Loss :  0.15156923  Accuracy :  97.59  Class Accuracy :  10.733333333333333  Car class accuracy  10.733333333333333
Iter :  85 Batch :  12   Loss :  0.17209196  Accuracy :  96.21  Class Accuracy :  15.370786516853933  Car class accuracy  15.370786516853933
Iter :  85 Batch :  13   Loss :  0.3134515  Accuracy :  91.49000000000001  Class Accuracy :  15.07825148407987  Car class accuracy  15.07825148407987
Iter :  85 Batch :  14   Loss :  0.13297498  Accuracy :  96.99  Class Accuracy :  11.799999999999999  Car class accuracy  11.799999999999999
Iter :  85 Batch :  15   Loss :  0.36410657  Accuracy :  92.585  Class Accuracy :  13.183915622940013  Car class accuracy  13.183915622940013
Iter :  85 Batch :  16   Loss :  0.04281289  Accuracy :  99.62  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 86 loss : 0.4633576 Accuracy: 91.42780287474334 Class Accuracy : 14.17902973616982
Iter :  86 Batch :  0   Loss :  0.32361007  Accuracy :  95.7  Class Accuracy :  10.46137339055794  Car class accuracy  10.46137339055794
Iter :  86 Batch :  1   Loss :  0.30327636  Accuracy :  95.17  Class Accuracy :  13.251974156496768  Car class accuracy  13.251974156496768
Iter :  86 Batch :  2   Loss :  0.0672642  Accuracy :  99.36  Class Accuracy :  9.065934065934066  Car class accuracy  9.065934065934066
Iter :  86 Batch :  3   Loss :  0.12030974  Accuracy :  98.11999999999999  Class Accuracy :  9.432624113475176  Car class accuracy  9.432624113475176
Iter :  86 Batch :  4   Loss :  0.24499258  Accuracy :  93.55499999999999  Class Accuracy :  10.769230769230768  Car class accuracy  10.769230769230768
Iter :  86 Batch :  5   Loss :  0.24877279  Accuracy :  95.895  Class Accuracy :  12.413793103448276  Car class accuracy  12.413793103448276
Iter :  86 Batch :  6   Loss :  0.16030999  Accuracy :  95.74000000000001  Class Accuracy :  12.67379679144385  Car class accuracy  12.67379679144385
Iter :  86 Batch :  7   Loss :  0.29111993  Accuracy :  94.62  Class Accuracy :  13.023598820058996  Car class accuracy  13.023598820058996
Iter :  86 Batch :  8   Loss :  0.46252608  Accuracy :  96.015  Class Accuracy :  10.633888663145063  Car class accuracy  10.633888663145063
Iter :  86 Batch :  9   Loss :  0.4336711  Accuracy :  93.05  Class Accuracy :  13.230209281164695  Car class accuracy  13.230209281164695
Iter :  86 Batch :  10   Loss :  0.06698313  Accuracy :  99.14500000000001  Class Accuracy :  9.044117647058822  Car class accuracy  9.044117647058822
Iter :  86 Batch :  11   Loss :  0.14963849  Accuracy :  97.66  Class Accuracy :  11.372549019607844  Car class accuracy  11.372549019607844
Iter :  86 Batch :  12   Loss :  0.18648297  Accuracy :  95.485  Class Accuracy :  12.935010482180292  Car class accuracy  12.935010482180292
Iter :  86 Batch :  13   Loss :  0.35001904  Accuracy :  95.3  Class Accuracy :  11.077441077441078  Car class accuracy  11.077441077441078
Iter :  86 Batch :  14   Loss :  0.17085896  Accuracy :  95.73  Class Accuracy :  13.77049180327869  Car class accuracy  13.77049180327869
Iter :  86 Batch :  15   Loss :  0.5429367  Accuracy :  92.77499999999999  Class Accuracy :  11.569474442044637  Car class accuracy  11.569474442044637
Iter :  86 Batch :  16   Loss :  0.11693701  Accuracy :  96.98  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 87 loss : 0.46089652 Accuracy: 91.47924221921517 Class Accuracy : 14.140925542740643
Iter :  87 Batch :  0   Loss :  0.22283405  Accuracy :  94.74000000000001  Class Accuracy :  14.235171696149845  Car class accuracy  14.235171696149845
Iter :  87 Batch :  1   Loss :  0.28332365  Accuracy :  93.97999999999999  Class Accuracy :  14.949201741654573  Car class accuracy  14.949201741654573
Iter :  87 Batch :  2   Loss :  0.06670123  Accuracy :  98.85000000000001  Class Accuracy :  10.404040404040405  Car class accuracy  10.404040404040405
Iter :  87 Batch :  3   Loss :  0.22158901  Accuracy :  94.04  Class Accuracy :  12.661870503597122  Car class accuracy  12.661870503597122
Iter :  87 Batch :  4   Loss :  0.3348073  Accuracy :  89.08500000000001  Class Accuracy :  17.857142857142858  Car class accuracy  17.857142857142858
Iter :  87 Batch :  5   Loss :  0.33305654  Accuracy :  93.22500000000001  Class Accuracy :  13.156626506024097  Car class accuracy  13.156626506024097
Iter :  87 Batch :  6   Loss :  0.46212748  Accuracy :  97.78  Class Accuracy :  4.139784946236559  Car class accuracy  4.139784946236559
Iter :  87 Batch :  7   Loss :  0.34136504  Accuracy :  89.97500000000001  Class Accuracy :  15.975247524752476  Car class accuracy  15.975247524752476
Iter :  87 Batch :  8   Loss :  0.359027  Accuracy :  93.55499999999999  Class Accuracy :  13.311663479923519  Car class accuracy  13.311663479923519
Iter :  87 Batch :  9   Loss :  0.4488465  Accuracy :  85.91  Class Accuracy :  20.11197243755383  Car class accuracy  20.11197243755383
Iter :  87 Batch :  10   Loss :  0.061806757  Accuracy :  98.66  Class Accuracy :  10.260869565217392  Car class accuracy  10.260869565217392
Iter :  87 Batch :  11   Loss :  0.1481679  Accuracy :  97.685  Class Accuracy :  10.855263157894738  Car class accuracy  10.855263157894738
Iter :  87 Batch :  12   Loss :  0.3440743  Accuracy :  89.5  Class Accuracy :  20.06024096385542  Car class accuracy  20.06024096385542
Iter :  87 Batch :  13   Loss :  0.42606813  Accuracy :  94.63000000000001  Class Accuracy :  11.723955579058698  Car class accuracy  11.723955579058698
Iter :  87 Batch :  14   Loss :  0.14161086  Accuracy :  96.435  Class Accuracy :  13.017241379310345  Car class accuracy  13.017241379310345
Iter :  87 Batch :  15   Loss :  0.5160388  Accuracy :  95.625  Class Accuracy :  9.729354614850799  Car class accuracy  9.729354614850799
Iter :  87 Batch :  16   Loss :  0.07141969  Accuracy :  98.53  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 88 loss : 0.45885482 Accuracy: 91.51071906354512 Class Accuracy : 14.122232508045443
Iter :  88 Batch :  0   Loss :  0.21599664  Accuracy :  95.78  Class Accuracy :  12.170385395537526  Car class accuracy  12.170385395537526
Iter :  88 Batch :  1   Loss :  0.26925948  Accuracy :  95.80499999999999  Class Accuracy :  13.403330919623462  Car class accuracy  13.403330919623462
Iter :  88 Batch :  2   Loss :  0.074161366  Accuracy :  98.38  Class Accuracy :  11.451612903225808  Car class accuracy  11.451612903225808
Iter :  88 Batch :  3   Loss :  0.14050297  Accuracy :  98.625  Class Accuracy :  8.615384615384617  Car class accuracy  8.615384615384617
Iter :  88 Batch :  4   Loss :  0.21860278  Accuracy :  94.77499999999999  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  88 Batch :  5   Loss :  0.41261947  Accuracy :  95.91  Class Accuracy :  11.370351502801835  Car class accuracy  11.370351502801835
Iter :  88 Batch :  6   Loss :  0.16628844  Accuracy :  95.455  Class Accuracy :  13.703703703703704  Car class accuracy  13.703703703703704
Iter :  88 Batch :  7   Loss :  0.38325447  Accuracy :  94.73  Class Accuracy :  11.775342465753425  Car class accuracy  11.775342465753425
Iter :  88 Batch :  8   Loss :  0.41639453  Accuracy :  94.315  Class Accuracy :  13.432617187500002  Car class accuracy  13.432617187500002
Iter :  88 Batch :  9   Loss :  0.37342623  Accuracy :  93.95  Class Accuracy :  12.17692974848222  Car class accuracy  12.17692974848222
Iter :  88 Batch :  10   Loss :  0.09077499  Accuracy :  98.175  Class Accuracy :  11.037037037037036  Car class accuracy  11.037037037037036
Iter :  88 Batch :  11   Loss :  0.15808198  Accuracy :  97.39  Class Accuracy :  11.111111111111112  Car class accuracy  11.111111111111112
Iter :  88 Batch :  12   Loss :  0.16752899  Accuracy :  97.24000000000001  Class Accuracy :  13.421633554083884  Car class accuracy  13.421633554083884
Iter :  88 Batch :  13   Loss :  0.2580852  Accuracy :  92.55  Class Accuracy :  14.546472564389697  Car class accuracy  14.546472564389697
Iter :  88 Batch :  14   Loss :  0.14572763  Accuracy :  97.295  Class Accuracy :  12.887029288702928  Car class accuracy  12.887029288702928
Iter :  88 Batch :  15   Loss :  0.310255  Accuracy :  93.93  Class Accuracy :  12.871419053964022  Car class accuracy  12.871419053964022
Iter :  88 Batch :  16   Loss :  0.041348428  Accuracy :  99.785  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 89 loss : 0.456237 Accuracy: 91.56257605820105 Class Accuracy : 14.093945300206725
Iter :  89 Batch :  0   Loss :  0.22369878  Accuracy :  95.535  Class Accuracy :  11.39588100686499  Car class accuracy  11.39588100686499
Iter :  89 Batch :  1   Loss :  0.36384565  Accuracy :  94.88  Class Accuracy :  13.362131029517638  Car class accuracy  13.362131029517638
Iter :  89 Batch :  2   Loss :  0.05802779  Accuracy :  98.885  Class Accuracy :  10.585106382978724  Car class accuracy  10.585106382978724
Iter :  89 Batch :  3   Loss :  0.14221933  Accuracy :  98.03500000000001  Class Accuracy :  9.2  Car class accuracy  9.2
Iter :  89 Batch :  4   Loss :  0.22590864  Accuracy :  94.94500000000001  Class Accuracy :  4.285714285714286  Car class accuracy  4.285714285714286
Iter :  89 Batch :  5   Loss :  0.30990297  Accuracy :  96.97  Class Accuracy :  10.524691358024691  Car class accuracy  10.524691358024691
Iter :  89 Batch :  6   Loss :  0.12699495  Accuracy :  98.02  Class Accuracy :  10.816326530612246  Car class accuracy  10.816326530612246
Iter :  89 Batch :  7   Loss :  0.30986515  Accuracy :  91.435  Class Accuracy :  15.360623781676413  Car class accuracy  15.360623781676413
Iter :  89 Batch :  8   Loss :  0.26884165  Accuracy :  94.58  Class Accuracy :  13.945885005636976  Car class accuracy  13.945885005636976
Iter :  89 Batch :  9   Loss :  0.29951373  Accuracy :  95.735  Class Accuracy :  11.293375394321767  Car class accuracy  11.293375394321767
Iter :  89 Batch :  10   Loss :  0.05141281  Accuracy :  99.32  Class Accuracy :  9.834710743801653  Car class accuracy  9.834710743801653
Iter :  89 Batch :  11   Loss :  0.12009746  Accuracy :  98.685  Class Accuracy :  10.649350649350648  Car class accuracy  10.649350649350648
Iter :  89 Batch :  12   Loss :  0.23291008  Accuracy :  93.61500000000001  Class Accuracy :  18.336886993603414  Car class accuracy  18.336886993603414
Iter :  89 Batch :  13   Loss :  0.24914287  Accuracy :  94.64  Class Accuracy :  12.835497835497836  Car class accuracy  12.835497835497836
Iter :  89 /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
Batch :  14   Loss :  0.12109417  Accuracy :  97.57000000000001  Class Accuracy :  11.957446808510639  Car class accuracy  11.957446808510639
Iter :  89 Batch :  15   Loss :  0.28045073  Accuracy :  96.17999999999999  Class Accuracy :  10.875169606512891  Car class accuracy  10.875169606512891
Iter :  89 Batch :  16   Loss :  0.023962423  Accuracy :  99.95  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 90 loss : 0.45339322 Accuracy: 91.61647809025509 Class Accuracy : 14.05840686155997
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__90_0.ckpt
saved prediction of 0 accuracy :  0.98935  class accuracy :  0.047058823529411764  car_class_accuracy :  0.047058823529411764
saved prediction of 1 accuracy :  0.9608  class accuracy :  0.08226968605249614  car_class_accuracy :  0.08226968605249614
saved prediction of 2 accuracy :  0.9812  class accuracy :  0.08485639686684074  car_class_accuracy :  0.08485639686684074
saved prediction of 3 accuracy :  0.8784  class accuracy :  0.028253164556962022  car_class_accuracy :  0.028253164556962022
saved prediction of 4 accuracy :  0.99175  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 5 accuracy :  0.9686  class accuracy :  0.07722419928825622  car_class_accuracy :  0.07722419928825622
saved prediction of 6 accuracy :  0.9906  class accuracy :  0.07583892617449664  car_class_accuracy :  0.07583892617449664
saved prediction of 7 accuracy :  0.97075  class accuracy :  0.09568345323741008  car_class_accuracy :  0.09568345323741008
saved prediction of 8 accuracy :  0.95465  class accuracy :  0.07970065481758652  car_class_accuracy :  0.07970065481758652
saved prediction of 9 accuracy :  0.9593  class accuracy :  0.06676036542515812  car_class_accuracy :  0.06676036542515812
saved prediction of 10 accuracy :  0.9496  class accuracy :  0.017706237424547282  car_class_accuracy :  0.017706237424547282
saved prediction of 11 accuracy :  0.9453  class accuracy :  0.06551006245662734  car_class_accuracy :  0.06551006245662734
saved prediction of 12 accuracy :  0.96155  class accuracy :  0.10955555555555556  car_class_accuracy :  0.10955555555555556
saved prediction of 13 accuracy :  0.95995  class accuracy :  0.09393680614859094  car_class_accuracy :  0.09393680614859094
saved prediction of 14 accuracy :  0.99125  class accuracy :  0.03762376237623762  car_class_accuracy :  0.03762376237623762
saved prediction of 15 accuracy :  0.9521  class accuracy :  0.07084656084656085  car_class_accuracy :  0.07084656084656085
saved prediction of 16 accuracy :  0.94045  class accuracy :  0.06882821387940842  car_class_accuracy :  0.06882821387940842
saved prediction of 17 accuracy :  0.98975  class accuracy :  0.04  car_class_accuracy :  0.04
saved prediction of 18 accuracy :  0.96175  class accuracy :  0.08321110529072813  car_class_accuracy :  0.08321110529072813
saved prediction of 19 accuracy :  0.9795  class accuracy :  0.08612565445026178  car_class_accuracy :  0.08612565445026178
saved prediction of 20 accuracy :  0.88295  class accuracy :  0.030320247933884298  car_class_accuracy :  0.030320247933884298
saved prediction of 21 accuracy :  0.9907  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 22 accuracy :  0.9632  class accuracy :  0.0783008658008658  car_class_accuracy :  0.0783008658008658
saved prediction of 23 accuracy :  0.99035  class accuracy :  0.07829457364341084  car_class_accuracy :  0.07829457364341084
saved prediction of 24 accuracy :  0.97135  class accuracy :  0.1077922077922078  car_class_accuracy :  0.1077922077922078
saved prediction of 25 accuracy :  0.9536  class accuracy :  0.08043875685557586  car_class_accuracy :  0.08043875685557586
saved prediction of 26 accuracy :  0.9593  class accuracy :  0.05785180149558124  car_class_accuracy :  0.05785180149558124
saved prediction of 27 accuracy :  0.94995  class accuracy :  0.01873706004140787  car_class_accuracy :  0.01873706004140787
saved prediction of 28 accuracy :  0.95055  class accuracy :  0.06377331420373027  car_class_accuracy :  0.06377331420373027
saved prediction of 29 accuracy :  0.95415  class accuracy :  0.11362637362637362  car_class_accuracy :  0.11362637362637362
saved prediction of 30 accuracy :  0.9615  class accuracy :  0.09240506329113925  car_class_accuracy :  0.09240506329113925
saved prediction of 31 accuracy :  0.9917  class accuracy :  0.035751295336787565  car_class_accuracy :  0.035751295336787565
saved prediction of 32 accuracy :  0.96155  class accuracy :  0.07471798274717982  car_class_accuracy :  0.07471798274717982
saved prediction of 33 accuracy :  0.9418  class accuracy :  0.06451068616422947  car_class_accuracy :  0.06451068616422947
saved prediction of 34 accuracy :  0.98485  class accuracy :  0.07142857142857142  car_class_accuracy :  0.07142857142857142
saved prediction of 35 accuracy :  0.96125  class accuracy :  0.08307530831802676  car_class_accuracy :  0.08307530831802676
saved prediction of 36 accuracy :  0.9778  class accuracy :  0.08973684210526316  car_class_accuracy :  0.08973684210526316
saved prediction of 37 accuracy :  0.883  class accuracy :  0.03115423901940756  car_class_accuracy :  0.03115423901940756
saved prediction of 38 accuracy :  0.992  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 39 accuracy :  0.9698  class accuracy :  0.0801591813530415  car_class_accuracy :  0.0801591813530415
saved prediction of 40 accuracy :  0.99035  class accuracy :  0.08846153846153845  car_class_accuracy :  0.08846153846153845
saved prediction of 41 accuracy :  0.96955  class accuracy :  0.10833333333333332  car_class_accuracy :  0.10833333333333332
saved prediction of 42 accuracy :  0.9531  class accuracy :  0.07724444444444445  car_class_accuracy :  0.07724444444444445
saved prediction of 43 accuracy :  0.96315  class accuracy :  0.06363636363636363  car_class_accuracy :  0.06363636363636363
saved prediction of 44 accuracy :  0.9483  class accuracy :  0.018032786885245903  car_class_accuracy :  0.018032786885245903
saved prediction of 45 accuracy :  0.9568  class accuracy :  0.06589506172839507  car_class_accuracy :  0.06589506172839507
saved prediction of 46 accuracy :  0.94785  class accuracy :  0.11900647948164148  car_class_accuracy :  0.11900647948164148
saved prediction of 47 accuracy :  0.96435  class accuracy :  0.08421354764638347  car_class_accuracy :  0.08421354764638347
saved prediction of 48 accuracy :  0.99055  class accuracy :  0.023737373737373738  car_class_accuracy :  0.023737373737373738
saved prediction of 49 accuracy :  0.95825  class accuracy :  0.06940667490729295  car_class_accuracy :  0.06940667490729295
saved prediction of 50 accuracy :  0.9338  class accuracy :  0.06609464378575143  car_class_accuracy :  0.06609464378575143
saved prediction of 51 accuracy :  0.9907  class accuracy :  0.034999999999999996  car_class_accuracy :  0.034999999999999996
saved prediction of 52 accuracy :  0.96105  class accuracy :  0.08267008985879333  car_class_accuracy :  0.08267008985879333
saved prediction of 53 accuracy :  0.9797  class accuracy :  0.0849740932642487  car_class_accuracy :  0.0849740932642487
saved prediction of 54 accuracy :  0.8879  class accuracy :  0.04227330779054917  car_class_accuracy :  0.04227330779054917
saved prediction of 55 accuracy :  0.99125  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 56 accuracy :  0.96775  class accuracy :  0.07614213197969542  car_class_accuracy :  0.07614213197969542
saved prediction of 57 accuracy :  0.98955  class accuracy :  0.0825503355704698  car_class_accuracy :  0.0825503355704698
saved prediction of 58 accuracy :  0.9702  class accuracy :  0.09801324503311258  car_class_accuracy :  0.09801324503311258
saved prediction of 59 accuracy :  0.9604  class accuracy :  0.08181818181818182  car_class_accuracy :  0.08181818181818182
saved prediction of 60 accuracy :  0.9618  class accuracy :  0.06542776998597476  car_class_accuracy :  0.06542776998597476
saved prediction of 61 accuracy :  0.9501  class accuracy :  0.019747899159663865  car_class_accuracy :  0.019747899159663865
saved prediction of 62 accuracy :  0.9459  class accuracy :  0.06549963530269876  car_class_accuracy :  0.06549963530269876
saved prediction of 63 accuracy :  0.96015  class accuracy :  0.11355932203389832  car_class_accuracy :  0.11355932203389832
saved prediction of 64 accuracy :  0.9586  class accuracy :  0.08812476512589253  car_class_accuracy :  0.08812476512589253
saved prediction of 65 accuracy :  0.9911  class accuracy :  0.031791907514450865  car_class_accuracy :  0.031791907514450865
saved prediction of 66 accuracy :  0.951  class accuracy :  0.07802251590797846  car_class_accuracy :  0.07802251590797846
saved prediction of 67 accuracy :  0.94265  class accuracy :  0.06636466591166477  car_class_accuracy :  0.06636466591166477
saved prediction of 68 accuracy :  0.9904  class accuracy :  0.03333333333333333  car_class_accuracy :  0.03333333333333333
saved prediction of 69 accuracy :  0.96115  class accuracy :  0.08310291858678956  car_class_accuracy :  0.08310291858678956
saved prediction of 70 accuracy :  0.9811  class accuracy :  0.08235294117647059  car_class_accuracy :  0.08235294117647059
saved prediction of 71 accuracy :  0.87195  class accuracy :  0.03326612903225806  car_class_accuracy :  0.03326612903225806
saved prediction of 72 accuracy :  0.99185  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 73 accuracy :  0.9627  class accuracy :  0.07716115261472786  car_class_accuracy :  0.07716115261472786
saved prediction of 74 accuracy :  0.99035  class accuracy :  0.07412587412587412  car_class_accuracy :  0.07412587412587412
saved prediction of 75 accuracy :  0.9734  class accuracy :  0.09794520547945205  car_class_accuracy :  0.09794520547945205
saved prediction of 76 accuracy :  0.9515  class accuracy :  0.07992831541218638  car_class_accuracy :  0.07992831541218638
saved prediction of 77 accuracy :  0.96435  class accuracy :  0.06721423682409308  car_class_accuracy :  0.06721423682409308
saved prediction of 78 accuracy :  0.95145  class accuracy :  0.023132036847492324  car_class_accuracy :  0.023132036847492324
saved prediction of 79 accuracy :  0.947  class accuracy :  0.06630669546436285  car_class_accuracy :  0.06630669546436285
saved prediction of 80 accuracy :  0.9764  class accuracy :  0.09805615550755939  car_class_accuracy :  0.09805615550755939
saved prediction of 81 accuracy :  0.96365  class accuracy :  0.09092881944444445  car_class_accuracy :  0.09092881944444445
saved prediction of 82 accuracy :  0.99175  class accuracy :  0.03016759776536313  car_class_accuracy :  0.03016759776536313
saved prediction of 83 accuracy :  0.95305  class accuracy :  0.07662013958125623  car_class_accuracy :  0.07662013958125623
saved prediction of 84 accuracy :  0.941  class accuracy :  0.07087004405286343  car_class_accuracy :  0.07087004405286343
saved prediction of 85 accuracy :  0.99095  class accuracy :  0.06923076923076923  car_class_accuracy :  0.06923076923076923
saved prediction of 86 accuracy :  0.96165  class accuracy :  0.08280170122275385  car_class_accuracy :  0.08280170122275385
saved prediction of 87 accuracy :  0.9796  class accuracy :  0.08663101604278076  car_class_accuracy :  0.08663101604278076
saved prediction of 88 accuracy :  0.91205  class accuracy :  0.02565528196981732  car_class_accuracy :  0.02565528196981732
saved prediction of 89 accuracy :  0.9932  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 90 accuracy :  0.96345  class accuracy :  0.07706725468577728  car_class_accuracy :  0.07706725468577728
saved prediction of 91 accuracy :  0.9927  class accuracy :  0.08840579710144927  car_class_accuracy :  0.08840579710144927
saved prediction of 92 accuracy :  0.9725  class accuracy :  0.09929078014184398  car_class_accuracy :  0.09929078014184398
saved prediction of 93 accuracy :  0.9551  class accuracy :  0.08041329739442947  car_class_accuracy :  0.08041329739442947
saved prediction of 94 accuracy :  0.9629  class accuracy :  0.0643598615916955  car_class_accuracy :  0.0643598615916955
saved prediction of 95 accuracy :  0.94855  class accuracy :  0.01840744570837642  car_class_accuracy :  0.01840744570837642
saved prediction of 96 accuracy :  0.94775  class accuracy :  0.06442166910688141  car_class_accuracy :  0.06442166910688141
saved prediction of 97 accuracy :  0.95345  class accuracy :  0.1094758064516129  car_class_accuracy :  0.1094758064516129
saved prediction of 98 accuracy :  0.96565  class accuracy :  0.08568955568378535  car_class_accuracy :  0.08568955568378535
saved prediction of 99 accuracy :  0.9909  class accuracy :  0.024615384615384615  car_class_accuracy :  0.024615384615384615
Iter :  90 Batch :  0   Loss :  0.21706684  Accuracy :  95.825  Class Accuracy :  12.188139059304703  Car class accuracy  12.188139059304703
Iter :  90 Batch :  1   Loss :  0.350377  Accuracy :  96.83  Class Accuracy :  10.508595988538683  Car class accuracy  10.508595988538683
Iter :  90 Batch :  2   Loss :  0.049407393  Accuracy :  99.625  Class Accuracy :  9.032258064516128  Car class accuracy  9.032258064516128
Iter :  90 Batch :  3   Loss :  0.1330488  Accuracy :  98.58  Class Accuracy :  9.533333333333333  Car class accuracy  9.533333333333333
Iter :  90 Batch :  4   Loss :  0.19033493  Accuracy :  95.125  Class Accuracy :  17.5  Car class accuracy  17.5
Iter :  90 Batch :  5   Loss :  0.23968448  Accuracy :  97.03  Class Accuracy :  11.107824684054854  Car class accuracy  11.107824684054854
Iter :  90 Batch :  6   Loss :  0.1549047  Accuracy :  95.745  Class Accuracy :  15.355191256830599  Car class accuracy  15.355191256830599
Iter :  90 Batch :  7   Loss :  0.25823593  Accuracy :  94.555  Class Accuracy :  12.871476349737218  Car class accuracy  12.871476349737218
Iter :  90 Batch :  8   Loss :  0.6080662  Accuracy :  96.885  Class Accuracy :  10.158662092624358  Car class accuracy  10.158662092624358
Iter :  90 Batch :  9   Loss :  0.4522338  Accuracy :  92.805  Class Accuracy :  13.170731707317074  Car class accuracy  13.170731707317074
Iter :  90 Batch :  10   Loss :  0.0645468  Accuracy :  99.075  Class Accuracy :  9.58041958041958  Car class accuracy  9.58041958041958
Iter :  90 Batch :  11   Loss :  0.23236045  Accuracy :  97.085  Class Accuracy :  6.623376623376623  Car class accuracy  6.623376623376623
Iter :  90 Batch :  12   Loss :  0.28412536  Accuracy :  89.805  Class Accuracy :  18.939393939393938  Car class accuracy  18.939393939393938
Iter :  90 Batch :  13   Loss :  0.34915102  Accuracy :  91.88  Class Accuracy :  14.571263035921206  Car class accuracy  14.571263035921206
Iter :  90 Batch :  14   Loss :  0.27868238  Accuracy :  91.69  Class Accuracy :  17.521008403361343  Car class accuracy  17.521008403361343
Iter :  90 Batch :  15   Loss :  0.46350327  Accuracy :  88.465  Class Accuracy :  15.827290705339486  Car class accuracy  15.827290705339486
Iter :  90 Batch :  16   Loss :  0.060048524  Accuracy :  99.155  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 91 loss : 0.45124447 Accuracy: 91.6570213454075 Class Accuracy : 14.036088652101721
Iter :  91 Batch :  0   Loss :  0.27623534  Accuracy :  92.645  Class Accuracy :  16.750261233019852  Car class accuracy  16.750261233019852
Iter :  91 Batch :  1   Loss :  0.33976132  Accuracy :  91.88499999999999  Class Accuracy :  16.708160442600278  Car class accuracy  16.708160442600278
Iter :  91 Batch :  2   Loss :  0.06694202  Accuracy :  98.78  Class Accuracy :  12.146341463414634  Car class accuracy  12.146341463414634
Iter :  91 Batch :  3   Loss :  0.13728201  Accuracy :  97.94  Class Accuracy :  9.05511811023622  Car class accuracy  9.05511811023622
Iter :  91 Batch :  4   Loss :  0.3771708  Accuracy :  88.685  Class Accuracy :  21.578947368421055  Car class accuracy  21.578947368421055
Iter :  91 Batch :  5   Loss :  0.28338498  Accuracy :  95.375  Class Accuracy :  12.193318031114512  Car class accuracy  12.193318031114512
Iter :  91 Batch :  6   Loss :  0.17825043  Accuracy :  97.57000000000001  Class Accuracy :  9.04191616766467  Car class accuracy  9.04191616766467
Iter :  91 Batch :  7   Loss :  0.27091804  Accuracy :  93.795  Class Accuracy :  13.547595682041216  Car class accuracy  13.547595682041216
Iter :  91 Batch :  8   Loss :  0.41606396  Accuracy :  91.865  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  91 Batch :  9   Loss :  0.30862382  Accuracy :  94.78999999999999  Class Accuracy :  11.578947368421053  Car class accuracy  11.578947368421053
Iter :  91 Batch :  10   Loss :  0.09146269  Accuracy :  98.98  Class Accuracy :  8.429752066115702  Car class accuracy  8.429752066115702
Iter :  91 Batch :  11   Loss :  0.11953345  Accuracy :  98.81  Class Accuracy :  9.45945945945946  Car class accuracy  9.45945945945946
Iter :  91 Batch :  12   Loss :  0.1633423  Accuracy :  97.285  Class Accuracy :  11.469933184855234  Car class accuracy  11.469933184855234
Iter :  91 Batch :  13   Loss :  0.33343232  Accuracy :  96.77  Class Accuracy :  10.162162162162163  Car class accuracy  10.162162162162163
Iter :  91 Batch :  14   Loss :  0.115101956  Accuracy :  98.355  Class Accuracy :  10.534979423868315  Car class accuracy  10.534979423868315
Iter :  91 Batch :  15   Loss :  0.45827022  Accuracy :  92.5  Class Accuracy :  11.75462645647704  Car class accuracy  11.75462645647704
Iter :  91 Batch :  16   Loss :  0.033261962  Accuracy :  99.655  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 92 loss : 0.4488759 Accuracy: 91.70021753039028 Class Accuracy : 14.011007405482491
Iter :  92 Batch :  0   Loss :  0.19916166  Accuracy :  95.955  Class Accuracy :  12.616525423728813  Car class accuracy  12.616525423728813
Iter :  92 Batch :  1   Loss :  0.27180353  Accuracy :  96.55  Class Accuracy :  11.115760111576012  Car class accuracy  11.115760111576012
Iter :  92 Batch :  2   Loss :  0.05612765  Accuracy :  99.25500000000001  Class Accuracy :  10.051020408163264  Car class accuracy  10.051020408163264
Iter :  92 Batch :  3   Loss :  0.11877506  Accuracy :  99.175  Class Accuracy :  8.289473684210527  Car class accuracy  8.289473684210527
Iter :  92 Batch :  4   Loss :  0.1904832  Accuracy :  95.44  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  92 Batch :  5   Loss :  1.2768377  Accuracy :  93.34  Class Accuracy :  6.614705118212523  Car class accuracy  6.614705118212523
Iter :  92 Batch :  6   Loss :  0.1588039  Accuracy :  96.765  Class Accuracy :  11.472081218274113  Car class accuracy  11.472081218274113
Iter :  92 Batch :  7   Loss :  0.2695246  Accuracy :  92.465  Class Accuracy :  14.332659251769464  Car class accuracy  14.332659251769464
Iter :  92 Batch :  8   Loss :  0.37172678  Accuracy :  91.5  Class Accuracy :  15.702127659574467  Car class accuracy  15.702127659574467
Iter :  92 Batch :  9   Loss :  0.56761134  Accuracy :  85.94500000000001  Class Accuracy :  19.808529155787642  Car class accuracy  19.808529155787642
Iter :  92 Batch :  10   Loss :  0.34144774  Accuracy :  90.305  Class Accuracy :  18.796992481203006  Car class accuracy  18.796992481203006
Iter :  92 Batch :  11   Loss :  0.4774522  Accuracy :  87.53999999999999  Class Accuracy :  20.46666666666667  Car class accuracy  20.46666666666667
Iter :  92 Batch :  12   Loss :  0.36684746  Accuracy :  88.6  Class Accuracy :  18.972162740899357  Car class accuracy  18.972162740899357
Iter :  92 Batch :  13   Loss :  0.33015826  Accuracy :  92.19500000000001  Class Accuracy :  13.859649122807019  Car class accuracy  13.859649122807019
Iter :  92 Batch :  14   Loss :  0.28712085  Accuracy :  91.635  Class Accuracy :  17.34375  Car class accuracy  17.34375
Iter :  92 Batch :  15   Loss :  0.37815434  Accuracy :  91.05499999999999  Class Accuracy :  14.661383285302593  Car class accuracy  14.661383285302593
Iter :  92 Batch :  16   Loss :  0.3752986  Accuracy :  91.39  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 93 loss : 0.44786727 Accuracy: 91.71300632911392 Class Accuracy : 14.00420341419661
Iter :  93 Batch :  0   Loss :  0.27172238  Accuracy :  93.37  Class Accuracy :  14.374999999999998  Car class accuracy  14.374999999999998
Iter :  93 Batch :  1   Loss :  0.3146243  Accuracy :  93.765  Class Accuracy :  15.533910533910532  Car class accuracy  15.533910533910532
Iter :  93 Batch :  2   Loss :  0.2368159  Accuracy :  90.505  Class Accuracy :  19.842105263157894  Car class accuracy  19.842105263157894
Iter :  93 Batch :  3   Loss :  0.34172446  Accuracy :  90.845  Class Accuracy :  17.727272727272727  Car class accuracy  17.727272727272727
Iter :  93 Batch :  4   Loss :  0.33848658  Accuracy :  88.07000000000001  Class Accuracy :  18.125  Car class accuracy  18.125
Iter :  93 Batch :  5   Loss :  0.72439075  Accuracy :  96.69  Class Accuracy :  9.563997960224375  Car class accuracy  9.563997960224375
Iter :  93 Batch :  6   Loss :  0.15053205  Accuracy :  97.28999999999999  Class Accuracy :  12.804232804232804  Car class accuracy  12.804232804232804
Iter :  93 Batch :  7   Loss :  0.35457835  Accuracy :  95.635  Class Accuracy :  11.121651785714286  Car class accuracy  11.121651785714286
Iter :  93 Batch :  8   Loss :  0.41019648  Accuracy :  94.31  Class Accuracy :  13.53090601185436  Car class accuracy  13.53090601185436
Iter :  93 Batch :  9   Loss :  0.44467968  Accuracy :  90.24  Class Accuracy :  15.580395528804816  Car class accuracy  15.580395528804816
Iter :  93 Batch :  10   Loss :  0.12100181  Accuracy :  97.695  Class Accuracy :  11.946308724832216  Car class accuracy  11.946308724832216
Iter :  93 Batch :  11   Loss :  0.22858584  Accuracy :  94.095  Class Accuracy :  14.054054054054054  Car class accuracy  14.054054054054054
Iter :  93 Batch :  12   Loss :  0.25672334  Accuracy :  95.545  Class Accuracy :  12.036659877800407  Car class accuracy  12.036659877800407
Iter :  93 Batch :  13   Loss :  0.39055714  Accuracy :  94.08999999999999  Class Accuracy :  12.635281385281386  Car class accuracy  12.635281385281386
Iter :  93 Batch :  14   Loss :  0.13438027  Accuracy :  97.94500000000001  Class Accuracy :  11.380753138075313  Car class accuracy  11.380753138075313
Iter :  93 Batch :  15   Loss :  0.35451388  Accuracy :  93.52000000000001  Class Accuracy :  13.096989966555183  Car class accuracy  13.096989966555183
Iter :  93 Batch :  16   Loss :  0.18020523  Accuracy :  96.34  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 94 loss : 0.4463895 Accuracy: 91.73857232310583 Class Accuracy : 13.994988048962062
Iter :  94 Batch :  0   Loss :  0.35817534  Accuracy :  95.045  Class Accuracy :  10.084299262381453  Car class accuracy  10.084299262381453
Iter :  94 Batch :  1   Loss :  0.32986093  Accuracy :  94.525  Class Accuracy :  14.158911954187545  Car class accuracy  14.158911954187545
Iter :  94 Batch :  2   Loss :  0.102538705  Accuracy :  98.44000000000001  Class Accuracy :  10.495049504950495  Car class accuracy  10.495049504950495
Iter :  94 Batch :  3   Loss :  0.22995847  Accuracy :  93.96  Class Accuracy :  13.333333333333334  Car class accuracy  13.333333333333334
Iter :  94 Batch :  4   Loss :  0.2516276  Accuracy :  92.75  Class Accuracy :  17.857142857142858  Car class accuracy  17.857142857142858
Iter :  94 Batch :  5   Loss :  0.27226603  Accuracy :  94.76  Class Accuracy :  13.257601069161376  Car class accuracy  13.257601069161376
Iter :  94 Batch :  6   Loss :  0.161215  Accuracy :  97.0  Class Accuracy :  12.937853107344633  Car class accuracy  12.937853107344633
Iter :  94 Batch :  7   Loss :  0.3347976  Accuracy :  96.53500000000001  Class Accuracy :  10.812468063362287  Car class accuracy  10.812468063362287
Iter :  94 Batch :  8   Loss :  0.5700868  Accuracy :  93.83500000000001  Class Accuracy :  12.605746209098164  Car class accuracy  12.605746209098164
Iter :  94 Batch :  9   Loss :  0.3729273  Accuracy :  93.08999999999999  Class Accuracy :  12.989795918367347  Car class accuracy  12.989795918367347
Iter :  94 Batch :  10   Loss :  0.10991764  Accuracy :  98.015  Class Accuracy :  11.390728476821192  Car class accuracy  11.390728476821192
Iter :  94 Batch :  11   Loss :  0.2462008  Accuracy :  94.22  Class Accuracy :  13.854748603351958  Car class accuracy  13.854748603351958
Iter :  94 Batch :  12   Loss :  0.2673818  Accuracy :  90.515  Class Accuracy :  19.27631578947368  Car class accuracy  19.27631578947368
Iter :  94 Batch :  13   Loss : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.28144762  Accuracy :  96.35000000000001  Class Accuracy :  11.34189031505251  Car class accuracy  11.34189031505251
Iter :  94 Batch :  14   Loss :  0.14896461  Accuracy :  96.285  Class Accuracy :  12.434782608695652  Car class accuracy  12.434782608695652
Iter :  94 Batch :  15   Loss :  0.4293978  Accuracy :  92.995  Class Accuracy :  12.660300136425647  Car class accuracy  12.660300136425647
Iter :  94 Batch :  16   Loss :  0.15037216  Accuracy :  96.67999999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 95 loss : 0.44454846 Accuracy: 91.77292441140025 Class Accuracy : 13.977377249939012
Iter :  95 Batch :  0   Loss :  0.5073045  Accuracy :  93.38  Class Accuracy :  12.415841584158416  Car class accuracy  12.415841584158416
Iter :  95 Batch :  1   Loss :  0.35817924  Accuracy :  94.765  Class Accuracy :  13.677510608203677  Car class accuracy  13.677510608203677
Iter :  95 Batch :  2   Loss :  0.07573763  Accuracy :  98.355  Class Accuracy :  12.029702970297029  Car class accuracy  12.029702970297029
Iter :  95 Batch :  3   Loss :  0.1941536  Accuracy :  96.125  Class Accuracy :  11.615384615384617  Car class accuracy  11.615384615384617
Iter :  95 Batch :  4   Loss :  0.36009687  Accuracy :  86.565  Class Accuracy :  17.391304347826086  Car class accuracy  17.391304347826086
Iter :  95 Batch :  5   Loss :  0.30860436  Accuracy :  92.575  Class Accuracy :  13.68572927597062  Car class accuracy  13.68572927597062
Iter :  95 Batch :  6   Loss :  0.22242895  Accuracy :  93.33  Class Accuracy :  16.49214659685864  Car class accuracy  16.49214659685864
Iter :  95 Batch :  7   Loss :  0.29289126  Accuracy :  93.795  Class Accuracy :  13.34255672385169  Car class accuracy  13.34255672385169
Iter :  95 Batch :  8   Loss :  0.57788384  Accuracy :  92.41  Class Accuracy :  13.105460608586911  Car class accuracy  13.105460608586911
Iter :  95 Batch :  9   Loss :  0.5129239  Accuracy :  91.725  Class Accuracy :  13.56842105263158  Car class accuracy  13.56842105263158
Iter :  95 Batch :  10   Loss :  0.096146084  Accuracy :  96.94500000000001  Class Accuracy :  14.67153284671533  Car class accuracy  14.67153284671533
Iter :  95 Batch :  11   Loss :  0.21275096  Accuracy :  93.685  Class Accuracy :  16.18705035971223  Car class accuracy  16.18705035971223
Iter :  95 Batch :  12   Loss :  0.2018319  Accuracy :  95.015  Class Accuracy :  14.633620689655174  Car class accuracy  14.633620689655174
Iter :  95 Batch :  13   Loss :  0.32694024  Accuracy :  93.04  Class Accuracy :  13.37912087912088  Car class accuracy  13.37912087912088
Iter :  95 Batch :  14   Loss :  0.18765143  Accuracy :  94.20500000000001  Class Accuracy :  14.631147540983608  Car class accuracy  14.631147540983608
Iter :  95 Batch :  15   Loss :  0.4508631  Accuracy :  94.655  Class Accuracy :  10.32371569317382  Car class accuracy  10.32371569317382
Iter :  95 Batch :  16   Loss :  0.10937343  Accuracy :  98.13  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 96 loss : 0.4429779 Accuracy: 91.79656652360515 Class Accuracy : 13.96728211391459
Iter :  96 Batch :  0   Loss :  0.23712075  Accuracy :  92.39500000000001  Class Accuracy :  17.010416666666668  Car class accuracy  17.010416666666668
Iter :  96 Batch :  1   Loss :  0.2803099  Accuracy :  92.585  Class Accuracy :  17.259430331023864  Car class accuracy  17.259430331023864
Iter :  96 Batch :  2   Loss :  0.103170656  Accuracy :  98.42999999999999  Class Accuracy :  9.782608695652174  Car class accuracy  9.782608695652174
Iter :  96 Batch :  3   Loss :  0.18070178  Accuracy :  96.96000000000001  Class Accuracy :  9.453125  Car class accuracy  9.453125
Iter :  96 Batch :  4   Loss :  0.29208735  Accuracy :  89.96  Class Accuracy :  16.0  Car class accuracy  16.0
Iter :  96 Batch :  5   Loss :  0.31426474  Accuracy :  95.41  Class Accuracy :  11.868919610855096  Car class accuracy  11.868919610855096
Iter :  96 Batch :  6   Loss :  0.2112459  Accuracy :  94.93  Class Accuracy :  13.608247422680414  Car class accuracy  13.608247422680414
Iter :  96 Batch :  7   Loss :  0.2642619  Accuracy :  92.955  Class Accuracy :  15.211090107120354  Car class accuracy  15.211090107120354
Iter :  96 Batch :  8   Loss :  0.43605387  Accuracy :  94.145  Class Accuracy :  12.854722575180007  Car class accuracy  12.854722575180007
Iter :  96 Batch :  9   Loss :  0.40421566  Accuracy :  89.605  Class Accuracy :  16.657633242999097  Car class accuracy  16.657633242999097
Iter :  96 Batch :  10   Loss :  0.08176951  Accuracy :  98.97  Class Accuracy :  9.090909090909092  Car class accuracy  9.090909090909092
Iter :  96 Batch :  11   Loss :  0.16846868  Accuracy :  96.095  Class Accuracy :  13.750000000000002  Car class accuracy  13.750000000000002
Iter :  96 Batch :  12   Loss :  0.20621528  Accuracy :  94.855  Class Accuracy :  14.909819639278558  Car class accuracy  14.909819639278558
Iter :  96 Batch :  13   Loss :  0.24161255  Accuracy :  96.52  Class Accuracy :  11.211778029445075  Car class accuracy  11.211778029445075
Iter :  96 Batch :  14   Loss :  0.12689061  Accuracy :  98.02  Class Accuracy :  10.18939393939394  Car class accuracy  10.18939393939394
Iter :  96 Batch :  15   Loss :  0.2710669  Accuracy :  96.005  Class Accuracy :  10.963270963270963  Car class accuracy  10.963270963270963
Iter :  96 Batch :  16   Loss :  0.064102285  Accuracy :  98.61999999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 97 loss : 0.4407649 Accuracy: 91.83049757281552 Class Accuracy : 13.950520930284691
Iter :  97 Batch :  0   Loss :  0.17442292  Accuracy :  96.295  Class Accuracy :  13.297872340425531  Car class accuracy  13.297872340425531
Iter :  97 Batch :  1   Loss :  0.3916215  Accuracy :  95.96000000000001  Class Accuracy :  12.720746590093324  Car class accuracy  12.720746590093324
Iter :  97 Batch :  2   Loss :  0.07617162  Accuracy :  99.18  Class Accuracy :  8.59375  Car class accuracy  8.59375
Iter :  97 Batch :  3   Loss :  0.1541715  Accuracy :  97.52499999999999  Class Accuracy :  9.936708860759493  Car class accuracy  9.936708860759493
Iter :  97 Batch :  4   Loss :  0.22487876  Accuracy :  93.255  Class Accuracy :  11.578947368421053  Car class accuracy  11.578947368421053
Iter :  97 Batch :  5   Loss :  0.25684348  Accuracy :  96.345  Class Accuracy :  11.602796478508544  Car class accuracy  11.602796478508544
Iter :  97 Batch :  6   Loss :  0.14302595  Accuracy :  96.91499999999999  Class Accuracy :  10.923076923076922  Car class accuracy  10.923076923076922
Iter :  97 Batch :  7   Loss :  0.243967  Accuracy :  94.62  Class Accuracy :  13.027295285359802  Car class accuracy  13.027295285359802
Iter :  97 Batch :  8   Loss :  0.2778352  Accuracy :  95.265  Class Accuracy :  13.506097560975611  Car class accuracy  13.506097560975611
Iter :  97 Batch :  9   Loss :  0.3662681  Accuracy :  91.85  Class Accuracy :  15.244755244755243  Car class accuracy  15.244755244755243
Iter :  97 Batch :  10   Loss :  0.05007598  Accuracy :  99.15  Class Accuracy :  10.291970802919707  Car class accuracy  10.291970802919707
Iter :  97 Batch :  11   Loss :  0.19061229  Accuracy :  96.21  Class Accuracy :  11.866666666666667  Car class accuracy  11.866666666666667
Iter :  97 Batch :  12   Loss :  0.16577928  Accuracy :  95.72  Class Accuracy :  13.906581740976645  Car class accuracy  13.906581740976645
Iter :  97 Batch :  13   Loss :  0.24499421  Accuracy :  95.83500000000001  Class Accuracy :  12.093425605536332  Car class accuracy  12.093425605536332
Iter :  97 Batch :  14   Loss :  0.08565141  Accuracy :  98.45  Class Accuracy :  11.317829457364342  Car class accuracy  11.317829457364342
Iter :  97 Batch :  15   Loss :  0.27635884  Accuracy :  95.98  Class Accuracy :  11.401000714796282  Car class accuracy  11.401000714796282
Iter :  97 Batch :  16   Loss :  0.049612626  Accuracy :  99.05000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 98 loss : 0.43828997 Accuracy: 91.87643543543544 Class Accuracy : 13.922983792642524
Iter :  98 Batch :  0   Loss :  0.16012576  Accuracy :  96.94500000000001  Class Accuracy :  12.010526315789475  Car class accuracy  12.010526315789475
Iter :  98 Batch :  1   Loss :  0.23409407  Accuracy :  95.98  Class Accuracy :  13.04576144036009  Car class accuracy  13.04576144036009
Iter :  98 Batch :  2   Loss :  0.058987316  Accuracy :  99.35000000000001  Class Accuracy :  7.849462365591398  Car class accuracy  7.849462365591398
Iter :  98 Batch :  3   Loss :  0.191228  Accuracy :  96.82  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  98 Batch :  4   Loss :  0.14228778  Accuracy :  96.73  Class Accuracy :  10.714285714285714  Car class accuracy  10.714285714285714
Iter :  98 Batch :  5   Loss :  0.18419251  Accuracy :  96.77  Class Accuracy :  11.831699898614396  Car class accuracy  11.831699898614396
Iter :  98 Batch :  6   Loss :  0.12918068  Accuracy :  97.46000000000001  Class Accuracy :  12.085308056872037  Car class accuracy  12.085308056872037
Iter :  98 Batch :  7   Loss :  0.35499448  Accuracy :  94.78  Class Accuracy :  12.538497433504434  Car class accuracy  12.538497433504434
Iter :  98 Batch :  8   Loss :  0.32703078  Accuracy :  96.085  Class Accuracy :  11.613990729034978  Car class accuracy  11.613990729034978
Iter :  98 Batch :  9   Loss :  0.34502378  Accuracy :  93.54  Class Accuracy :  12.943722943722943  Car class accuracy  12.943722943722943
Iter :  98 Batch :  10   Loss :  0.08947964  Accuracy :  98.6  Class Accuracy :  9.935897435897436  Car class accuracy  9.935897435897436
Iter :  98 Batch :  11   Loss :  0.14872003  Accuracy :  96.89  Class Accuracy :  11.958041958041958  Car class accuracy  11.958041958041958
Iter :  98 Batch :  12   Loss :  0.19587389  Accuracy :  95.275  Class Accuracy :  17.253218884120173  Car class accuracy  17.253218884120173
Iter :  98 Batch :  13   Loss :  0.2521541  Accuracy :  96.28  Class Accuracy :  11.403308613804905  Car class accuracy  11.403308613804905
Iter :  98 Batch :  14   Loss :  0.10648843  Accuracy :  97.21  Class Accuracy :  13.502109704641349  Car class accuracy  13.502109704641349
Iter :  98 Batch :  15   Loss :  0.20704243  Accuracy :  96.21499999999999  Class Accuracy :  11.699931176875431  Car class accuracy  11.699931176875431
Iter :  98 Batch :  16   Loss :  0.12523985  Accuracy :  96.785  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 99 loss : 0.43579367 Accuracy: 91.92388822829965 Class Accuracy : 13.895454088835294
Iter :  99 Batch :  0   Loss :  0.20185874  Accuracy :  96.065  Class Accuracy :  11.155555555555557  Car class accuracy  11.155555555555557
Iter :  99 Batch :  1   Loss :  0.20696864  Accuracy :  95.59  Class Accuracy :  13.583273251622204  Car class accuracy  13.583273251622204
Iter :  99 Batch :  2   Loss :  0.07748942  Accuracy :  99.35000000000001  Class Accuracy :  8.0  Car class accuracy  8.0
Iter :  99 Batch :  3   Loss :  0.12857503  Accuracy :  98.13  Class Accuracy :  9.2  Car class accuracy  9.2
Iter :  99 Batch :  4   Loss :  0.21466304  Accuracy :  94.3  Class Accuracy :  12.0  Car class accuracy  12.0
Iter :  99 Batch :  5   Loss :  0.36024567  Accuracy :  95.23  Class Accuracy :  11.415048543689322  Car class accuracy  11.415048543689322
Iter :  99 Batch :  6   Loss :  0.13969202  Accuracy :  95.785  Class Accuracy :  12.643678160919542  Car class accuracy  12.643678160919542
Iter :  99 Batch :  7   Loss :  0.26831636  Accuracy :  91.935  Class Accuracy :  15.175345377258237  Car class accuracy  15.175345377258237
Iter :  99 Batch :  8   Loss :  0.2552646  Accuracy :  93.62  Class Accuracy :  15.403973509933774  Car class accuracy  15.403973509933774
Iter :  99 Batch :  9   Loss :  0.33064893  Accuracy :  91.845  Class Accuracy :  15.421792618629174  Car class accuracy  15.421792618629174
Iter :  99 Batch :  10   Loss :  0.06396705  Accuracy :  98.57000000000001  Class Accuracy :  10.077519379844961  Car class accuracy  10.077519379844961
Iter :  99 Batch :  11   Loss :  0.12511185  Accuracy :  98.15  Class Accuracy :  9.261744966442953  Car class accuracy  9.261744966442953
Iter :  99 Batch :  12   Loss :  0.18462285  Accuracy :  97.635  Class Accuracy :  10.704845814977974  Car class accuracy  10.704845814977974
Iter :  99 Batch :  13   Loss :  0.22490743  Accuracy :  96.375  Class Accuracy :  11.26984126984127  Car class accuracy  11.26984126984127
Iter :  99 Batch :  14   Loss :  0.07535337  Accuracy :  98.985  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  99 Batch :  15   Loss :  0.2582689  Accuracy :  96.125  Class Accuracy :  11.199432221433641  Car class accuracy  11.199432221433641
Iter :  99 Batch :  16   Loss :  0.037617505  Accuracy :  99.24  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 100 loss : 0.4332893 Accuracy: 91.96757504414362 Class Accuracy : 13.86619530788176
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__100_0.ckpt
saved prediction of 0 accuracy :  0.93585  class accuracy :  0.07581989994441356  car_class_accuracy :  0.07581989994441356
saved prediction of 1 accuracy :  0.9738  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 2 accuracy :  0.9701  class accuracy :  0.0832593098735907  car_class_accuracy :  0.0832593098735907
saved prediction of 3 accuracy :  0.9769  class accuracy :  0.09738903394255874  car_class_accuracy :  0.09738903394255874
saved prediction of 4 accuracy :  0.87135  class accuracy :  0.03444558521560575  car_class_accuracy :  0.03444558521560575
saved prediction of 5 accuracy :  0.9889  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 6 accuracy :  0.9759  class accuracy :  0.0852233676975945  car_class_accuracy :  0.0852233676975945
saved prediction of 7 accuracy :  0.98115  class accuracy :  0.09264705882352942  car_class_accuracy :  0.09264705882352942
saved prediction of 8 accuracy :  0.9608  class accuracy :  0.11267605633802817  car_class_accuracy :  0.11267605633802817
saved prediction of 9 accuracy :  0.95175  class accuracy :  0.0802608695652174  car_class_accuracy :  0.0802608695652174
saved prediction of 10 accuracy :  0.9617  class accuracy :  0.07311906501095691  car_class_accuracy :  0.07311906501095691
saved prediction of 11 accuracy :  0.95095  class accuracy :  0.037152034261241966  car_class_accuracy :  0.037152034261241966
saved prediction of 12 accuracy :  0.9315  class accuracy :  0.06464047442550037  car_class_accuracy :  0.06464047442550037
saved prediction of 13 accuracy :  0.9683  class accuracy :  0.11848552338530068  car_class_accuracy :  0.11848552338530068
saved prediction of 14 accuracy :  0.9358  class accuracy :  0.10377682403433477  car_class_accuracy :  0.10377682403433477
saved prediction of 15 accuracy :  0.99115  class accuracy :  0.0505  car_class_accuracy :  0.0505
saved prediction of 16 accuracy :  0.96055  class accuracy :  0.07860289490245438  car_class_accuracy :  0.07860289490245438
saved prediction of 17 accuracy :  0.94085  class accuracy :  0.07825124515771997  car_class_accuracy :  0.07825124515771997
saved prediction of 18 accuracy :  0.97985  class accuracy :  0.10588235294117647  car_class_accuracy :  0.10588235294117647
saved prediction of 19 accuracy :  0.9732  class accuracy :  0.08670230537921818  car_class_accuracy :  0.08670230537921818
saved prediction of 20 accuracy :  0.97515  class accuracy :  0.09860335195530726  car_class_accuracy :  0.09860335195530726
saved prediction of 21 accuracy :  0.91185  class accuracy :  0.044126984126984126  car_class_accuracy :  0.044126984126984126
saved prediction of 22 accuracy :  0.9912  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 23 accuracy :  0.9722  class accuracy :  0.07959738846572362  car_class_accuracy :  0.07959738846572362
saved prediction of 24 accuracy :  0.98  class accuracy :  0.09787234042553192  car_class_accuracy :  0.09787234042553192
saved prediction of 25 accuracy :  0.96365  class accuracy :  0.1264705882352941  car_class_accuracy :  0.1264705882352941
saved prediction of 26 accuracy :  0.95035  class accuracy :  0.07875210792580101  car_class_accuracy :  0.07875210792580101
saved prediction of 27 accuracy :  0.95925  class accuracy :  0.06782178217821783  car_class_accuracy :  0.06782178217821783
saved prediction of 28 accuracy :  0.94805  class accuracy :  0.0412796697626419  car_class_accuracy :  0.0412796697626419
saved prediction of 29 accuracy :  0.9356  class accuracy :  0.06152716593245228  car_class_accuracy :  0.06152716593245228
saved prediction of 30 accuracy :  0.9762  class accuracy :  0.11791044776119404  car_class_accuracy :  0.11791044776119404
saved prediction of 31 accuracy :  0.9336  class accuracy :  0.1069818824569156  car_class_accuracy :  0.1069818824569156
saved prediction of 32 accuracy :  0.9907  class accuracy :  0.04476190476190477  car_class_accuracy :  0.04476190476190477
saved prediction of 33 accuracy :  0.9651  class accuracy :  0.0894790085988872  car_class_accuracy :  0.0894790085988872
saved prediction of 34 accuracy :  0.9378  class accuracy :  0.07788248337028825  car_class_accuracy :  0.07788248337028825
saved prediction of 35 accuracy :  0.981  class accuracy :  0.09473684210526315  car_class_accuracy :  0.09473684210526315
saved prediction of 36 accuracy :  0.9682  class accuracy :  0.0875609130546294  car_class_accuracy :  0.0875609130546294
saved prediction of 37 accuracy :  0.974  class accuracy :  0.11447368421052631  car_class_accuracy :  0.11447368421052631
saved prediction of 38 accuracy :  0.9091  class accuracy :  0.035328345802161265  car_class_accuracy :  0.035328345802161265
saved prediction of 39 accuracy :  0.9891  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 40 accuracy :  0.97095  class accuracy :  0.08115863562533839  car_class_accuracy :  0.08115863562533839
saved prediction of 41 accuracy :  0.9803  class accuracy :  0.09859154929577466  car_class_accuracy :  0.09859154929577466
saved prediction of 42 accuracy :  0.9627  class accuracy :  0.10696202531645568  car_class_accuracy :  0.10696202531645568
saved prediction of 43 accuracy :  0.9488  class accuracy :  0.07967332123411978  car_class_accuracy :  0.07967332123411978
saved prediction of 44 accuracy :  0.9599  class accuracy :  0.07388114453411591  car_class_accuracy :  0.07388114453411591
saved prediction of 45 accuracy :  0.9489  class accuracy :  0.037183718371837184  car_class_accuracy :  0.037183718371837184
saved prediction of 46 accuracy :  0.9343  class accuracy :  0.0577063550036523  car_class_accuracy :  0.0577063550036523
saved prediction of 47 accuracy :  0.97915  class accuracy :  0.10997732426303855  car_class_accuracy :  0.10997732426303855
saved prediction of 48 accuracy :  0.9372  class accuracy :  0.09412751677852349  car_class_accuracy :  0.09412751677852349
saved prediction of 49 accuracy :  0.99075  class accuracy :  0.04514563106796117  car_class_accuracy :  0.04514563106796117
saved prediction of 50 accuracy :  0.96215  class accuracy :  0.0862895493767977  car_class_accuracy :  0.0862895493767977
saved prediction of 51 accuracy :  0.93855  class accuracy :  0.07638190954773869  car_class_accuracy :  0.07638190954773869
saved prediction of 52 accuracy :  0.9808  class accuracy :  0.09166666666666666  car_class_accuracy :  0.09166666666666666
saved prediction of 53 accuracy :  0.97015  class accuracy :  0.08668206312548113  car_class_accuracy :  0.08668206312548113
saved prediction of 54 accuracy :  0.9761  class accuracy :  0.09801699716713881  car_class_accuracy :  0.09801699716713881
saved prediction of 55 accuracy :  0.8954  class accuracy :  0.038450604122245914  car_class_accuracy :  0.038450604122245914
saved prediction of 56 accuracy :  0.98765  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 57 accuracy :  0.97395  class accuracy :  0.08381006864988558  car_class_accuracy :  0.08381006864988558
saved prediction of 58 accuracy :  0.97955  class accuracy :  0.09791666666666667  car_class_accuracy :  0.09791666666666667
saved prediction of 59 accuracy :  0.96135  class accuracy :  0.10943396226415095  car_class_accuracy :  0.10943396226415095
saved prediction of 60 accuracy :  0.9493  class accuracy :  0.07879890809827116  car_class_accuracy :  0.07879890809827116
saved prediction of 61 accuracy :  0.9574  class accuracy :  0.06542699724517906  car_class_accuracy :  0.06542699724517906
saved prediction of 62 accuracy :  0.9468  class accuracy :  0.03428571428571429  car_class_accuracy :  0.03428571428571429
saved prediction of 63 accuracy :  0.9291  class accuracy :  0.06813902968863142  car_class_accuracy :  0.06813902968863142
saved prediction of 64 accuracy :  0.96495  class accuracy :  0.12702127659574466  car_class_accuracy :  0.12702127659574466
saved prediction of 65 accuracy :  0.9345  class accuracy :  0.09573560767590619  car_class_accuracy :  0.09573560767590619
saved prediction of 66 accuracy :  0.99125  class accuracy :  0.042408376963350786  car_class_accuracy :  0.042408376963350786
saved prediction of 67 accuracy :  0.96555  class accuracy :  0.08616960728514514  car_class_accuracy :  0.08616960728514514
saved prediction of 68 accuracy :  0.9355  class accuracy :  0.07563342318059299  car_class_accuracy :  0.07563342318059299
saved prediction of 69 accuracy :  0.9814  class accuracy :  0.10526315789473684  car_class_accuracy :  0.10526315789473684
saved prediction of 70 accuracy :  0.96725  class accuracy :  0.0872629420809841  car_class_accuracy :  0.0872629420809841
saved prediction of 71 accuracy :  0.97595  class accuracy :  0.10438356164383562  car_class_accuracy :  0.10438356164383562
saved prediction of 72 accuracy :  0.87275  class accuracy :  0.025759109311740892  car_class_accuracy :  0.025759109311740892
saved prediction of 73 accuracy :  0.9899  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 74 accuracy :  0.97305  class accuracy :  0.08271468144044322  car_class_accuracy :  0.08271468144044322
saved prediction of 75 accuracy :  0.9787  class accuracy :  0.09925925925925926  car_class_accuracy :  0.09925925925925926
saved prediction of 76 accuracy :  0.96005  class accuracy :  0.1264516129032258  car_class_accuracy :  0.1264516129032258
saved prediction of 77 accuracy :  0.94775  class accuracy :  0.07971781305114638  car_class_accuracy :  0.07971781305114638
saved prediction of 78 accuracy :  0.95465  class accuracy :  0.0695852534562212  car_class_accuracy :  0.0695852534562212
saved prediction of 79 accuracy :  0.9525  class accuracy :  0.029068577277379732  car_class_accuracy :  0.029068577277379732
saved prediction of 80 accuracy :  0.9285  class accuracy :  0.06885593220338984  car_class_accuracy :  0.06885593220338984
saved prediction of 81 accuracy :  0.9693  class accuracy :  0.11094736842105264  car_class_accuracy :  0.11094736842105264
saved prediction of 82 accuracy :  0.9286  class accuracy :  0.09599411980889379  car_class_accuracy :  0.09599411980889379
saved prediction of 83 accuracy :  0.99245  class accuracy :  0.04468085106382978  car_class_accuracy :  0.04468085106382978
saved prediction of 84 accuracy :  0.96375  class accuracy :  0.08450082735797021  car_class_accuracy :  0.08450082735797021
saved prediction of 85 accuracy :  0.9289  class accuracy :  0.07384140061791968  car_class_accuracy :  0.07384140061791968
saved prediction of 86 accuracy :  0.98125  class accuracy :  0.13999999999999999  car_class_accuracy :  0.13999999999999999
saved prediction of 87 accuracy :  0.973  class accuracy :  0.08845033112582781  car_class_accuracy :  0.08845033112582781
saved prediction of 88 accuracy :  0.97805  class accuracy :  0.10630372492836677  car_class_accuracy :  0.10630372492836677
saved prediction of 89 accuracy :  0.91495  class accuracy :  0.04924812030075188  car_class_accuracy :  0.04924812030075188
saved prediction of 90 accuracy :  0.9884  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 91 accuracy :  0.97625  class accuracy :  0.08319719953325554  car_class_accuracy :  0.08319719953325554
saved prediction of 92 accuracy :  0.9793  class accuracy :  0.14539473684210527  car_class_accuracy :  0.14539473684210527
saved prediction of 93 accuracy :  0.9597  class accuracy :  0.12877697841726618  car_class_accuracy :  0.12877697841726618
saved prediction of 94 accuracy :  0.94885  class accuracy :  0.0785  car_class_accuracy :  0.0785
saved prediction of 95 accuracy :  0.9544  class accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.073806275579809  car_class_accuracy :  0.073806275579809
saved prediction of 96 accuracy :  0.94855  class accuracy :  0.03411167512690355  car_class_accuracy :  0.03411167512690355
saved prediction of 97 accuracy :  0.93245  class accuracy :  0.06177325581395349  car_class_accuracy :  0.06177325581395349
saved prediction of 98 accuracy :  0.96205  class accuracy :  0.12109704641350212  car_class_accuracy :  0.12109704641350212
saved prediction of 99 accuracy :  0.9366  class accuracy :  0.10072094995759118  car_class_accuracy :  0.10072094995759118
Iter :  100 Batch :  0   Loss :  0.1630596  Accuracy :  96.035  Class Accuracy :  12.936507936507939  Car class accuracy  12.936507936507939
Iter :  100 Batch :  1   Loss :  0.95247597  Accuracy :  94.095  Class Accuracy :  9.81936416184971  Car class accuracy  9.81936416184971
Iter :  100 Batch :  2   Loss :  0.05510012  Accuracy :  99.36500000000001  Class Accuracy :  9.66183574879227  Car class accuracy  9.66183574879227
Iter :  100 Batch :  3   Loss :  0.1423935  Accuracy :  97.61999999999999  Class Accuracy :  10.23076923076923  Car class accuracy  10.23076923076923
Iter :  100 Batch :  4   Loss :  0.40600824  Accuracy :  89.63499999999999  Class Accuracy :  11.875  Car class accuracy  11.875
Iter :  100 Batch :  5   Loss :  0.23634622  Accuracy :  96.595  Class Accuracy :  11.245764920510817  Car class accuracy  11.245764920510817
Iter :  100 Batch :  6   Loss :  0.3521922  Accuracy :  94.32000000000001  Class Accuracy :  12.5  Car class accuracy  12.5
Iter :  100 Batch :  7   Loss :  0.35304448  Accuracy :  92.69  Class Accuracy :  13.032422123331214  Car class accuracy  13.032422123331214
Iter :  100 Batch :  8   Loss :  0.4362581  Accuracy :  90.83  Class Accuracy :  16.251638269986895  Car class accuracy  16.251638269986895
Iter :  100 Batch :  9   Loss :  0.74471766  Accuracy :  82.87  Class Accuracy :  20.503089143865843  Car class accuracy  20.503089143865843
Iter :  100 Batch :  10   Loss :  0.23953466  Accuracy :  92.855  Class Accuracy :  16.842105263157894  Car class accuracy  16.842105263157894
Iter :  100 Batch :  11   Loss :  0.32660985  Accuracy :  91.19  Class Accuracy :  19.28104575163399  Car class accuracy  19.28104575163399
Iter :  100 Batch :  12   Loss :  0.3896066  Accuracy :  86.555  Class Accuracy :  22.652631578947368  Car class accuracy  22.652631578947368
Iter :  100 Batch :  13   Loss :  0.5634277  Accuracy :  84.64  Class Accuracy :  19.54756380510441  Car class accuracy  19.54756380510441
Iter :  100 Batch :  14   Loss :  0.30784655  Accuracy :  91.07499999999999  Class Accuracy :  21.41732283464567  Car class accuracy  21.41732283464567
Iter :  100 Batch :  15   Loss :  0.84371907  Accuracy :  84.405  Class Accuracy :  17.128969539857422  Car class accuracy  17.128969539857422
Iter :  100 Batch :  16   Loss :  0.1374799  Accuracy :  95.535  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 101 loss : 0.432872 Accuracy: 91.96574592074592 Class Accuracy : 13.871557027039668
Iter :  101 Batch :  0   Loss :  0.37743634  Accuracy :  90.77499999999999  Class Accuracy :  15.329896907216495  Car class accuracy  15.329896907216495
Iter :  101 Batch :  1   Loss :  0.5967089  Accuracy :  88.785  Class Accuracy :  16.997245179063363  Car class accuracy  16.997245179063363
Iter :  101 Batch :  2   Loss :  0.10222576  Accuracy :  98.5  Class Accuracy :  9.83695652173913  Car class accuracy  9.83695652173913
Iter :  101 Batch :  3   Loss :  0.21123117  Accuracy :  96.905  Class Accuracy :  11.402439024390244  Car class accuracy  11.402439024390244
Iter :  101 Batch :  4   Loss :  0.41694352  Accuracy :  84.42  Class Accuracy :  26.47058823529412  Car class accuracy  26.47058823529412
Iter :  101 Batch :  5   Loss :  0.5677623  Accuracy :  96.3  Class Accuracy :  10.062078272604587  Car class accuracy  10.062078272604587
Iter :  101 Batch :  6   Loss :  0.22808409  Accuracy :  92.49000000000001  Class Accuracy :  16.53179190751445  Car class accuracy  16.53179190751445
Iter :  101 Batch :  7   Loss :  0.35416436  Accuracy :  94.26  Class Accuracy :  12.419811320754718  Car class accuracy  12.419811320754718
Iter :  101 Batch :  8   Loss :  0.4793949  Accuracy :  92.38499999999999  Class Accuracy :  15.076314301865462  Car class accuracy  15.076314301865462
Iter :  101 Batch :  9   Loss :  0.6985865  Accuracy :  92.375  Class Accuracy :  8.699788583509513  Car class accuracy  8.699788583509513
Iter :  101 Batch :  10   Loss :  0.099157825  Accuracy :  98.65  Class Accuracy :  8.382352941176471  Car class accuracy  8.382352941176471
Iter :  101 Batch :  11   Loss :  0.23007046  Accuracy :  94.625  Class Accuracy :  13.552631578947368  Car class accuracy  13.552631578947368
Iter :  101 Batch :  12   Loss :  0.27483925  Accuracy :  92.49000000000001  Class Accuracy :  17.050209205020924  Car class accuracy  17.050209205020924
Iter :  101 Batch :  13   Loss :  0.40018454  Accuracy :  89.55499999999999  Class Accuracy :  16.233480176211454  Car class accuracy  16.233480176211454
Iter :  101 Batch :  14   Loss :  0.20701177  Accuracy :  93.2  Class Accuracy :  18.770491803278688  Car class accuracy  18.770491803278688
Iter :  101 Batch :  15   Loss :  0.56946003  Accuracy :  91.495  Class Accuracy :  12.862345229424616  Car class accuracy  12.862345229424616
Iter :  101 Batch :  16   Loss :  0.10873444  Accuracy :  98.045  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 102 loss : 0.4320429 Accuracy: 91.97834679746107 Class Accuracy : 13.868015164217013
Iter :  102 Batch :  0   Loss :  0.5220864  Accuracy :  92.685  Class Accuracy :  11.41213389121339  Car class accuracy  11.41213389121339
Iter :  102 Batch :  1   Loss :  0.3353851  Accuracy :  90.185  Class Accuracy :  17.4625748502994  Car class accuracy  17.4625748502994
Iter :  102 Batch :  2   Loss :  0.10240036  Accuracy :  97.78999999999999  Class Accuracy :  11.473684210526317  Car class accuracy  11.473684210526317
Iter :  102 Batch :  3   Loss :  0.27960685  Accuracy :  91.73  Class Accuracy :  16.19047619047619  Car class accuracy  16.19047619047619
Iter :  102 Batch :  4   Loss :  0.40543023  Accuracy :  85.83  Class Accuracy :  20.588235294117645  Car class accuracy  20.588235294117645
Iter :  102 Batch :  5   Loss :  0.32806394  Accuracy :  94.685  Class Accuracy :  12.5748031496063  Car class accuracy  12.5748031496063
Iter :  102 Batch :  6   Loss :  0.1696833  Accuracy :  96.09  Class Accuracy :  13.415841584158416  Car class accuracy  13.415841584158416
Iter :  102 Batch :  7   Loss :  0.30032465  Accuracy :  95.61  Class Accuracy :  12.032171581769438  Car class accuracy  12.032171581769438
Iter :  102 Batch :  8   Loss :  0.6363117  Accuracy :  94.41000000000001  Class Accuracy :  10.219490781387181  Car class accuracy  10.219490781387181
Iter :  102 Batch :  9   Loss :  0.46854258  Accuracy :  89.06500000000001  Class Accuracy :  16.3903743315508  Car class accuracy  16.3903743315508
Iter :  102 Batch :  10   Loss :  0.113562144  Accuracy :  96.995  Class Accuracy :  11.258741258741258  Car class accuracy  11.258741258741258
Iter :  102 Batch :  11   Loss :  0.1814824  Accuracy :  96.37  Class Accuracy :  13.066666666666665  Car class accuracy  13.066666666666665
Iter :  102 Batch :  12   Loss :  0.1945005  Accuracy :  96.09  Class Accuracy :  13.18181818181818  Car class accuracy  13.18181818181818
Iter :  102 Batch :  13   Loss :  0.3912843  Accuracy :  90.305  Class Accuracy :  15.620991253644315  Car class accuracy  15.620991253644315
Iter :  102 Batch :  14   Loss :  0.21461682  Accuracy :  94.285  Class Accuracy :  15.672268907563025  Car class accuracy  15.672268907563025
Iter :  102 Batch :  15   Loss :  0.58211577  Accuracy :  91.14999999999999  Class Accuracy :  12.771739130434783  Car class accuracy  12.771739130434783
Iter :  102 Batch :  16   Loss :  0.103958815  Accuracy :  97.995  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 103 loss : 0.43089125 Accuracy: 91.99414000000002 Class Accuracy : 13.860915594772605
Iter :  103 Batch :  0   Loss :  0.3898828  Accuracy :  91.23  Class Accuracy :  14.72885032537961  Car class accuracy  14.72885032537961
Iter :  103 Batch :  1   Loss :  0.34512022  Accuracy :  93.395  Class Accuracy :  15.717423133235725  Car class accuracy  15.717423133235725
Iter :  103 Batch :  2   Loss :  0.07368517  Accuracy :  99.22  Class Accuracy :  10.34825870646766  Car class accuracy  10.34825870646766
Iter :  103 Batch :  3   Loss :  0.15498292  Accuracy :  97.315  Class Accuracy :  10.895522388059701  Car class accuracy  10.895522388059701
Iter :  103 Batch :  4   Loss :  0.39320984  Accuracy :  85.28999999999999  Class Accuracy :  23.63636363636364  Car class accuracy  23.63636363636364
Iter :  103 Batch :  5   Loss :  0.27200326  Accuracy :  93.35  Class Accuracy :  14.428121720881427  Car class accuracy  14.428121720881427
Iter :  103 Batch :  6   Loss :  0.20077133  Accuracy :  94.28999999999999  Class Accuracy :  14.034090909090907  Car class accuracy  14.034090909090907
Iter :  103 Batch :  7   Loss :  0.3053714  Accuracy :  91.79  Class Accuracy :  15.240196078431373  Car class accuracy  15.240196078431373
Iter :  103 Batch :  8   Loss :  0.41126278  Accuracy :  89.67  Class Accuracy :  16.673989455184536  Car class accuracy  16.673989455184536
Iter :  103 Batch :  9   Loss :  0.41958848  Accuracy :  87.58500000000001  Class Accuracy :  18.18428184281843  Car class accuracy  18.18428184281843
Iter :  103 Batch :  10   Loss :  0.07809515  Accuracy :  99.005  Class Accuracy :  9.403973509933774  Car class accuracy  9.403973509933774
Iter :  103 Batch :  11   Loss :  0.16287866  Accuracy :  98.6  Class Accuracy :  8.756756756756758  Car class accuracy  8.756756756756758
Iter :  103 Batch :  12   Loss :  0.18403664  Accuracy :  97.975  Class Accuracy :  10.44776119402985  Car class accuracy  10.44776119402985
Iter :  103 Batch :  13   Loss :  0.43009955  Accuracy :  95.175  Class Accuracy :  11.673728813559322  Car class accuracy  11.673728813559322
Iter :  103 Batch :  14   Loss :  0.10260685  Accuracy :  98.685  Class Accuracy :  10.274509803921568  Car class accuracy  10.274509803921568
Iter :  103 Batch :  15   Loss :  0.34583175  Accuracy :  95.72  Class Accuracy :  10.775924583031182  Car class accuracy  10.775924583031182
Iter :  103 Batch :  16   Loss :  0.042551726  Accuracy :  99.425  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 104 loss : 0.42918602 Accuracy: 92.0189388794567 Class Accuracy : 13.849361654617546
Iter :  104 Batch :  0   Loss :  0.21887757  Accuracy :  95.59  Class Accuracy :  13.16782522343595  Car class accuracy  13.16782522343595
Iter :  104 Batch :  1   Loss :  0.37691227  Accuracy :  94.35  Class Accuracy :  13.467916366258109  Car class accuracy  13.467916366258109
Iter :  104 Batch :  2   Loss :  0.064237006  Accuracy :  99.17  Class Accuracy :  10.51643192488263  Car class accuracy  10.51643192488263
Iter :  104 Batch :  3   Loss :  0.17215896  Accuracy :  97.735  Class Accuracy :  9.6  Car class accuracy  9.6
Iter :  104 Batch :  4   Loss :  0.14963816  Accuracy :  96.775  Class Accuracy :  8.095238095238095  Car class accuracy  8.095238095238095
Iter :  104 Batch :  5   Loss :  0.35563868  Accuracy :  97.615  Class Accuracy :  9.85748218527316  Car class accuracy  9.85748218527316
Iter :  104 Batch :  6   Loss :  0.14465757  Accuracy :  96.405  Class Accuracy :  13.934426229508196  Car class accuracy  13.934426229508196
Iter :  104 Batch :  7   Loss :  0.26915675  Accuracy :  94.195  Class Accuracy :  13.226116178588573  Car class accuracy  13.226116178588573
Iter :  104 Batch :  8   Loss :  0.3227125  Accuracy :  95.125  Class Accuracy :  12.517894736842106  Car class accuracy  12.517894736842106
Iter :  104 Batch :  9   Loss :  0.354829  Accuracy :  92.61  Class Accuracy :  14.063116370808679  Car class accuracy  14.063116370808679
Iter :  104 Batch :  10   Loss :  0.06611636  Accuracy :  98.705  Class Accuracy :  9.736842105263158  Car class accuracy  9.736842105263158
Iter :  104 Batch :  11   Loss :  0.16024911  Accuracy :  96.53500000000001  Class Accuracy :  12.173913043478262  Car class accuracy  12.173913043478262
Iter :  104 Batch :  12   Loss :  0.22088657  Accuracy :  94.355  Class Accuracy :  13.991769547325102  Car class accuracy  13.991769547325102
Iter :  104 Batch :  13   Loss :  0.23954912  Accuracy :  95.955  Class Accuracy :  11.602422907488988  Car class accuracy  11.602422907488988
Iter :  104 Batch :  14   Loss :  0.09853879  Accuracy :  98.39  Class Accuracy :  9.876543209876543  Car class accuracy  9.876543209876543
Iter :  104 Batch :  15   Loss :  0.2498297  Accuracy :  96.34  Class Accuracy :  11.350267379679144  Car class accuracy  11.350267379679144
Iter :  104 Batch :  16   Loss :  0.03945136  Accuracy :  99.21  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 105 loss : 0.42706004 Accuracy: 92.06083239910315 Class Accuracy : 13.822309556733826
Iter :  105 Batch :  0   Loss :  0.21250471  Accuracy :  95.015  Class Accuracy :  13.67261280167891  Car class accuracy  13.67261280167891
Iter :  105 Batch :  1   Loss :  0.27041414  Accuracy :  95.58  Class Accuracy :  13.028169014084506  Car class accuracy  13.028169014084506
Iter :  105 Batch :  2   Loss :  0.055827692  Accuracy :  99.005  Class Accuracy :  11.51685393258427  Car class accuracy  11.51685393258427
Iter :  105 Batch :  3   Loss :  0.11371638  Accuracy :  98.355  Class Accuracy :  9.420289855072465  Car class accuracy  9.420289855072465
Iter :  105 Batch :  4   Loss :  0.27432474  Accuracy :  91.42  Class Accuracy :  23.157894736842106  Car class accuracy  23.157894736842106
Iter :  105 Batch :  5   Loss :  0.2194136  Accuracy :  96.55  Class Accuracy :  11.42051282051282  Car class accuracy  11.42051282051282
Iter :  105 Batch :  6   Loss :  0.15025575  Accuracy :  96.57  Class Accuracy :  12.736318407960198  Car class accuracy  12.736318407960198
Iter :  105 Batch :  7   Loss :  0.21779677  Accuracy :  96.11  Class Accuracy :  11.922518159806295  Car class accuracy  11.922518159806295
Iter :  105 Batch :  8   Loss :  0.31344765  Accuracy :  95.015  Class Accuracy :  13.271631510977183  Car class accuracy  13.271631510977183
Iter :  105 Batch :  9   Loss :  0.52676845  Accuracy :  92.97999999999999  Class Accuracy :  11.661341853035143  Car class accuracy  11.661341853035143
Iter :  105 Batch :  10   Loss :  0.069444016  Accuracy :  99.48  Class Accuracy :  8.671875  Car class accuracy  8.671875
Iter :  105 Batch :  11   Loss :  0.13196805  Accuracy :  98.99  Class Accuracy :  7.083333333333333  Car class accuracy  7.083333333333333
Iter :  105 Batch :  12   Loss :  0.1463936  Accuracy :  96.94  Class Accuracy :  11.978260869565219  Car class accuracy  11.978260869565219
Iter :  105 Batch :  13   Loss :  0.2588712  Accuracy :  95.81  Class Accuracy :  11.866509155345542  Car class accuracy  11.866509155345542
Iter :  105 Batch :  14   Loss :  0.13017476  Accuracy :  97.16  Class Accuracy :  11.297071129707112  Car class accuracy  11.297071129707112
Iter :  105 Batch :  15   Loss :  0.54605997  Accuracy :  92.86  Class Accuracy :  12.821428571428573  Car class accuracy  12.821428571428573
Iter :  105 Batch :  16   Loss :  0.033736162  Accuracy :  99.42  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 106 loss : 0.42506734 Accuracy: 92.10093559133816 Class Accuracy : 13.80040359265135
Iter :  106 Batch :  0   Loss :  0.3301334  Accuracy :  95.955  Class Accuracy :  11.537698412698411  Car class accuracy  11.537698412698411
Iter :  106 Batch :  1   Loss :  0.48425302  Accuracy :  89.96  Class Accuracy :  17.857627118644068  Car class accuracy  17.857627118644068
Iter :  106 Batch :  2   Loss :  0.06484431  Accuracy :  98.375  Class Accuracy :  12.914572864321608  Car class accuracy  12.914572864321608
Iter :  106 Batch :  3   Loss :  0.2097116  Accuracy :  94.845  Class Accuracy :  12.63888888888889  Car class accuracy  12.63888888888889
Iter :  106 Batch :  4   Loss :  0.39963117  Accuracy :  86.875  Class Accuracy :  21.052631578947366  Car class accuracy  21.052631578947366
Iter :  106 Batch :  5   Loss :  0.30659574  Accuracy :  91.78500000000001  Class Accuracy :  14.089702760084927  Car class accuracy  14.089702760084927
Iter :  106 Batch :  6   Loss :  0.30256233  Accuracy :  91.545  Class Accuracy :  18.914285714285715  Car class accuracy  18.914285714285715
Iter :  106 Batch :  7   Loss :  0.41434526  Accuracy :  87.265  Class Accuracy :  17.762404580152673  Car class accuracy  17.762404580152673
Iter :  106 Batch :  8   Loss :  0.710884  Accuracy :  85.58  Class Accuracy :  19.66111111111111  Car class accuracy  19.66111111111111
Iter :  106 Batch :  9   Loss :  0.4049129  Accuracy :  92.23  Class Accuracy :  13.159366262814537  Car class accuracy  13.159366262814537
Iter :  106 Batch :  10   Loss :  0.111825  Accuracy :  97.845  Class Accuracy :  11.333333333333332  Car class accuracy  11.333333333333332
Iter :  106 Batch :  11   Loss :  0.15452352  Accuracy :  97.735  Class Accuracy :  8.855421686746988  Car class accuracy  8.855421686746988
Iter :  106 Batch :  12   Loss :  0.14272553  Accuracy :  97.78  Class Accuracy :  11.899791231732777  Car class accuracy  11.899791231732777
Iter :  106 Batch :  13   Loss :  0.40322733  Accuracy :  92.15  Class Accuracy :  13.906976744186045  Car class accuracy  13.906976744186045
Iter :  106 Batch :  14   Loss :  0.30576655  Accuracy :  91.45  Class Accuracy :  16.923076923076923  Car class accuracy  16.923076923076923
Iter :  106 Batch :  15   Loss :  0.37961766  Accuracy :  93.22  Class Accuracy :  12.558970693352395  Car class accuracy  12.558970693352395
Iter :  106 Batch :  16   Loss :  0.04403698  Accuracy :  99.895  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 107 loss : 0.4239361 Accuracy: 92.11126237623763 Class Accuracy : 13.800656067254927
Iter :  107 Batch :  0   Loss :  0.24404827  Accuracy :  93.895  Class Accuracy :  15.447236180904522  Car class accuracy  15.447236180904522
Iter :  107 Batch :  1   Loss :  0.4595582  Accuracy :  93.2  Class Accuracy :  13.14487632508834  Car class accuracy  13.14487632508834
Iter :  107 Batch :  2   Loss :  0.12759261  Accuracy :  99.315  Class Accuracy :  3.8461538461538463  Car class accuracy  3.8461538461538463
Iter :  107 Batch :  3   Loss :  0.12394418  Accuracy :  99.52499999999999  Class Accuracy :  7.006802721088436  Car class accuracy  7.006802721088436
Iter :  107 Batch :  4   Loss :  0.20720372  Accuracy :  95.92500000000001  Class Accuracy :  11.176470588235295  Car class accuracy  11.176470588235295
Iter :  107 Batch :  5   Loss :  0.49885088  Accuracy :  96.80499999999999  Class Accuracy :  9.511258955987717  Car class accuracy  9.511258955987717
Iter :  107 Batch :  6   Loss :  0.35791996  Accuracy :  98.53  Class Accuracy :  1.6500000000000001  Car class accuracy  1.6500000000000001
Iter :  107 Batch :  7   Loss :  0.36043602  Accuracy :  94.895  Class Accuracy :  11.08610567514677  Car class accuracy  11.08610567514677
Iter :  107 Batch :  8   Loss :  0.39228612  Accuracy :  95.085  Class Accuracy :  12.114210985178726  Car class accuracy  12.114210985178726
Iter :  107 Batch :  9   Loss :  0.33259884  Accuracy :  93.975  Class Accuracy :  11.792746113989638  Car class accuracy  11.792746113989638
Iter :  107 Batch :  10   Loss :  0.061908446  Accuracy :  98.54  Class Accuracy :  10.327868852459018  Car class accuracy  10.327868852459018
Iter :  107 Batch :  11   Loss :  0.21703511  Accuracy :  95.475  Class Accuracy :  13.061224489795917  Car class accuracy  13.061224489795917
Iter :  107 Batch :  12   Loss :  0.13648705  Accuracy :  97.635  Class Accuracy :  12.372881355932204  Car class accuracy  12.372881355932204
Iter :  107 Batch :  13   Loss :  0.26704597  Accuracy :  93.78  Class Accuracy :  13.53266888150609  Car class accuracy  13.53266888150609
Iter :  107 Batch :  14   Loss :  0.23867266  Accuracy :  93.185  Class Accuracy :  15.592417061611375  Car class accuracy  15.592417061611375
Iter :  107 Batch :  15   Loss :  0.4002538  Accuracy :  89.185  Class Accuracy :  16.869506423258958  Car class accuracy  16.869506423258958
Iter :  107 Batch :  16   Loss :  0.08957913  Accuracy :  97.265  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 108 loss : 0.42246935 Accuracy: 92.14413623978203 Class Accuracy : 13.770095454346484
Iter :  108 Batch :  0   Loss :  0.2208608  Accuracy :  94.025  Class Accuracy :  13.947078280044101  Car class accuracy  13.947078280044101
Iter :  108 Batch :  1   Loss :  0.31489566  Accuracy :  93.03  Class Accuracy :  16.315007429420504  Car class accuracy  16.315007429420504
Iter :  108 Batch :  2   Loss :  0.067119144  Accuracy :  97.985  Class Accuracy :  12.105263157894736  Car class accuracy  12.105263157894736
Iter :  108 Batch :  3   Loss :  0.16555376  Accuracy :  96.785  Class Accuracy :  12.086330935251798  Car class accuracy  12.086330935251798
Iter :  108 Batch :  4   Loss :  0.24287046  Accuracy :  93.0  Class Accuracy :  12.222222222222223  Car class accuracy  12.222222222222223
Iter :  108 Batch :  5   Loss :  0.28091168  Accuracy :  96.405  Class Accuracy :  11.06958762886598  Car class accuracy  11.06958762886598
Iter :  108 Batch :  6   Loss :  0.12203081  Accuracy :  97.635  Class Accuracy :  11.512195121951219  Car class accuracy  11.512195121951219
Iter :  108 Batch :  7   Loss :  0.27983186  Accuracy :  95.685  Class Accuracy :  11.795620437956204  Car class accuracy  11.795620437956204
Iter :  108 Batch :  8   Loss :  1.1447589  Accuracy :  94.915  Class Accuracy :  7.440958759252732  Car class accuracy  7.440958759252732
Iter :  108 Batch :  9   Loss :  0.35085067  Accuracy :  91.62  Class Accuracy :  14.508928571428573  Car class accuracy  14.508928571428573
Iter :  108 Batch :  10   Loss :  0.078377634  Accuracy :  98.7  Class Accuracy :  9.926470588235295  Car class accuracy  9.926470588235295
Iter :  108 Batch :  11   Loss :  0.1667333  Accuracy :  96.04  Class Accuracy :  12.148148148148149  Car class accuracy  12.148148148148149
Iter :  108 Batch :  12   Loss :  0.3261483  Accuracy :  89.185  Class Accuracy :  19.2827868852459  Car class accuracy  19.2827868852459
Iter :  108 Batch :  13   Loss :  0.34084776  Accuracy :  90.39500000000001  Class Accuracy :  16.1136712749616  Car class accuracy  16.1136712749616
Iter :  108 Batch :  14   Loss :  0.22731145  Accuracy :  93.175  Class Accuracy :  16.30350194552529  Car class accuracy  16.30350194552529
Iter :  108 Batch :  15   Loss :  0.7350105  Accuracy :  89.2  Class Accuracy :  13.108108108108107  Car class accuracy  13.108108108108107
Iter :  108 Batch :  16   Loss :  0.21116284  Accuracy :  92.9  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 109 loss : 0.4214398 Accuracy: 92.16261879049677 Class Accuracy : 13.757025398607077
Iter :  109 Batch :  0   Loss :  0.28580758  Accuracy :  92.61  Class Accuracy :  15.393374741200827  Car class accuracy  15.393374741200827
Iter :  109 Batch :  1   Loss :  0.2900389  Accuracy :  91.47999999999999  Class Accuracy :  17.87218045112782  Car class accuracy  17.87218045112782
Iter :  109 Batch :  2   Loss :  0.10509267  Accuracy :  96.975  Class Accuracy :  13.14009661835749  Car class accuracy  13.14009661835749
Iter :  109 Batch :  3   Loss :  0.22879434  Accuracy :  94.36  Class Accuracy :  13.432835820895523  Car class accuracy  13.432835820895523
Iter :  109 Batch :  4   Loss :  0.53188664  Accuracy :  81.82000000000001  Class Accuracy :  26.666666666666668  Car class accuracy  26.666666666666668
Iter :  109 Batch :  5   Loss :  0.2589226  Accuracy :  93.075  Class Accuracy :  13.611185086551265  Car class accuracy  13.611185086551265
Iter :  109 Batch :  6   Loss :  0.13837856  Accuracy :  97.345  Class Accuracy :  11.5  Car class accuracy  11.5
Iter :  109 Batch :  7   Loss :  0.32981095  Accuracy :  89.645  Class Accuracy :  16.668235294117647  Car class accuracy  16.668235294117647
Iter :  109 Batch :  8   Loss :  0.4692678  Accuracy :  92.02  Class Accuracy :  14.30355427473583  Car class accuracy  14.30355427473583
Iter :  109 Batch :  9   Loss :  0.39960223  Accuracy :  87.345  Class Accuracy :  18.709016393442624  Car class accuracy  18.709016393442624
Iter :  109 Batch :  10   Loss :  0.057569798  Accuracy :  98.775  Class Accuracy :  9.694656488549617  Car class accuracy  9.694656488549617
Iter :  109 Batch :  11   Loss :  0.15958339  Accuracy :  97.08  Class Accuracy :  10.522875816993464/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  Car class accuracy  10.522875816993464
Iter :  109 Batch :  12   Loss :  0.2527569  Accuracy :  93.84  Class Accuracy :  14.251012145748987  Car class accuracy  14.251012145748987
Iter :  109 Batch :  13   Loss :  0.29227015  Accuracy :  96.25  Class Accuracy :  11.60847166571265  Car class accuracy  11.60847166571265
Iter :  109 Batch :  14   Loss :  0.11251865  Accuracy :  97.92  Class Accuracy :  10.612244897959185  Car class accuracy  10.612244897959185
Iter :  109 Batch :  15   Loss :  0.27131534  Accuracy :  96.52  Class Accuracy :  10.970524802300503  Car class accuracy  10.970524802300503
Iter :  109 Batch :  16   Loss :  0.034120236  Accuracy :  99.58  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 110 loss : 0.4198632 Accuracy: 92.17860353130015 Class Accuracy : 13.754396987364725
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__110_0.ckpt
saved prediction of 0 accuracy :  0.9527  class accuracy :  0.07806241266884024  car_class_accuracy :  0.07806241266884024
saved prediction of 1 accuracy :  0.93885  class accuracy :  0.07404371584699454  car_class_accuracy :  0.07404371584699454
saved prediction of 2 accuracy :  0.9518  class accuracy :  0.08461538461538462  car_class_accuracy :  0.08461538461538462
saved prediction of 3 accuracy :  0.9625  class accuracy :  0.08450223272918309  car_class_accuracy :  0.08450223272918309
saved prediction of 4 accuracy :  0.9729  class accuracy :  0.09111747851002865  car_class_accuracy :  0.09111747851002865
saved prediction of 5 accuracy :  0.84415  class accuracy :  0.04587759231158321  car_class_accuracy :  0.04587759231158321
saved prediction of 6 accuracy :  0.98775  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 7 accuracy :  0.96475  class accuracy :  0.0758774373259053  car_class_accuracy :  0.0758774373259053
saved prediction of 8 accuracy :  0.9862  class accuracy :  0.08043478260869566  car_class_accuracy :  0.08043478260869566
saved prediction of 9 accuracy :  0.95935  class accuracy :  0.13426573426573427  car_class_accuracy :  0.13426573426573427
saved prediction of 10 accuracy :  0.951  class accuracy :  0.08262626262626263  car_class_accuracy :  0.08262626262626263
saved prediction of 11 accuracy :  0.968  class accuracy :  0.06812008577555397  car_class_accuracy :  0.06812008577555397
saved prediction of 12 accuracy :  0.93905  class accuracy :  0.03819517313746065  car_class_accuracy :  0.03819517313746065
saved prediction of 13 accuracy :  0.9558  class accuracy :  0.08994082840236686  car_class_accuracy :  0.08994082840236686
saved prediction of 14 accuracy :  0.95935  class accuracy :  0.07787234042553191  car_class_accuracy :  0.07787234042553191
saved prediction of 15 accuracy :  0.9537  class accuracy :  0.1097770154373928  car_class_accuracy :  0.1097770154373928
saved prediction of 16 accuracy :  0.98675  class accuracy :  0.0489010989010989  car_class_accuracy :  0.0489010989010989
saved prediction of 17 accuracy :  0.95505  class accuracy :  0.07949929145016534  car_class_accuracy :  0.07949929145016534
saved prediction of 18 accuracy :  0.93705  class accuracy :  0.07402597402597402  car_class_accuracy :  0.07402597402597402
saved prediction of 19 accuracy :  0.9514  class accuracy :  0.06875  car_class_accuracy :  0.06875
saved prediction of 20 accuracy :  0.96175  class accuracy :  0.08273916388817645  car_class_accuracy :  0.08273916388817645
saved prediction of 21 accuracy :  0.9743  class accuracy :  0.0893732970027248  car_class_accuracy :  0.0893732970027248
saved prediction of 22 accuracy :  0.8606  class accuracy :  0.06177944862155389  car_class_accuracy :  0.06177944862155389
saved prediction of 23 accuracy :  0.98795  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 24 accuracy :  0.96095  class accuracy :  0.07347480106100795  car_class_accuracy :  0.07347480106100795
saved prediction of 25 accuracy :  0.98395  class accuracy :  0.08482758620689655  car_class_accuracy :  0.08482758620689655
saved prediction of 26 accuracy :  0.9695  class accuracy :  0.10921052631578947  car_class_accuracy :  0.10921052631578947
saved prediction of 27 accuracy :  0.93985  class accuracy :  0.08097928436911488  car_class_accuracy :  0.08097928436911488
saved prediction of 28 accuracy :  0.96425  class accuracy :  0.06618852459016393  car_class_accuracy :  0.06618852459016393
saved prediction of 29 accuracy :  0.9358  class accuracy :  0.04195223260643821  car_class_accuracy :  0.04195223260643821
saved prediction of 30 accuracy :  0.96185  class accuracy :  0.07957384276267451  car_class_accuracy :  0.07957384276267451
saved prediction of 31 accuracy :  0.9493  class accuracy :  0.09371069182389938  car_class_accuracy :  0.09371069182389938
saved prediction of 32 accuracy :  0.95525  class accuracy :  0.10921560222888985  car_class_accuracy :  0.10921560222888985
saved prediction of 33 accuracy :  0.98855  class accuracy :  0.05148514851485149  car_class_accuracy :  0.05148514851485149
saved prediction of 34 accuracy :  0.95825  class accuracy :  0.08  car_class_accuracy :  0.08
saved prediction of 35 accuracy :  0.9365  class accuracy :  0.07681159420289854  car_class_accuracy :  0.07681159420289854
saved prediction of 36 accuracy :  0.9487  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 37 accuracy :  0.96835  class accuracy :  0.08293637846655791  car_class_accuracy :  0.08293637846655791
saved prediction of 38 accuracy :  0.9656  class accuracy :  0.10179028132992327  car_class_accuracy :  0.10179028132992327
saved prediction of 39 accuracy :  0.86215  class accuracy :  0.07731629392971247  car_class_accuracy :  0.07731629392971247
saved prediction of 40 accuracy :  0.98835  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 41 accuracy :  0.96675  class accuracy :  0.07575083426028921  car_class_accuracy :  0.07575083426028921
saved prediction of 42 accuracy :  0.9851  class accuracy :  0.0773972602739726  car_class_accuracy :  0.0773972602739726
saved prediction of 43 accuracy :  0.9601  class accuracy :  0.1474285714285714  car_class_accuracy :  0.1474285714285714
saved prediction of 44 accuracy :  0.94335  class accuracy :  0.07988980716253444  car_class_accuracy :  0.07988980716253444
saved prediction of 45 accuracy :  0.96645  class accuracy :  0.07334235453315291  car_class_accuracy :  0.07334235453315291
saved prediction of 46 accuracy :  0.944  class accuracy :  0.03783783783783784  car_class_accuracy :  0.03783783783783784
saved prediction of 47 accuracy :  0.9531  class accuracy :  0.09311568488289566  car_class_accuracy :  0.09311568488289566
saved prediction of 48 accuracy :  0.9607  class accuracy :  0.08711111111111111  car_class_accuracy :  0.08711111111111111
saved prediction of 49 accuracy :  0.95435  class accuracy :  0.10705980066445182  car_class_accuracy :  0.10705980066445182
saved prediction of 50 accuracy :  0.98705  class accuracy :  0.04182692307692308  car_class_accuracy :  0.04182692307692308
saved prediction of 51 accuracy :  0.9651  class accuracy :  0.07212160413971538  car_class_accuracy :  0.07212160413971538
saved prediction of 52 accuracy :  0.9363  class accuracy :  0.07807775377969763  car_class_accuracy :  0.07807775377969763
saved prediction of 53 accuracy :  0.95025  class accuracy :  0.07727272727272727  car_class_accuracy :  0.07727272727272727
saved prediction of 54 accuracy :  0.95705  class accuracy :  0.08225195657662207  car_class_accuracy :  0.08225195657662207
saved prediction of 55 accuracy :  0.97435  class accuracy :  0.08767908309455588  car_class_accuracy :  0.08767908309455588
saved prediction of 56 accuracy :  0.82205  class accuracy :  0.07069422363540011  car_class_accuracy :  0.07069422363540011
saved prediction of 57 accuracy :  0.98875  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 58 accuracy :  0.96595  class accuracy :  0.07889960294951787  car_class_accuracy :  0.07889960294951787
saved prediction of 59 accuracy :  0.9836  class accuracy :  0.08028169014084507  car_class_accuracy :  0.08028169014084507
saved prediction of 60 accuracy :  0.97135  class accuracy :  0.1083969465648855  car_class_accuracy :  0.1083969465648855
saved prediction of 61 accuracy :  0.95315  class accuracy :  0.08030150753768844  car_class_accuracy :  0.08030150753768844
saved prediction of 62 accuracy :  0.9698  class accuracy :  0.070906432748538  car_class_accuracy :  0.070906432748538
saved prediction of 63 accuracy :  0.9345  class accuracy :  0.040831556503198294  car_class_accuracy :  0.040831556503198294
saved prediction of 64 accuracy :  0.9568  class accuracy :  0.0833922261484099  car_class_accuracy :  0.0833922261484099
saved prediction of 65 accuracy :  0.95195  class accuracy :  0.09850427350427352  car_class_accuracy :  0.09850427350427352
saved prediction of 66 accuracy :  0.9515  class accuracy :  0.11278969957081546  car_class_accuracy :  0.11278969957081546
saved prediction of 67 accuracy :  0.98885  class accuracy :  0.041999999999999996  car_class_accuracy :  0.041999999999999996
saved prediction of 68 accuracy :  0.96095  class accuracy :  0.07518656716417911  car_class_accuracy :  0.07518656716417911
saved prediction of 69 accuracy :  0.9398  class accuracy :  0.07802454704850964  car_class_accuracy :  0.07802454704850964
saved prediction of 70 accuracy :  0.9531  class accuracy :  0.14615384615384613  car_class_accuracy :  0.14615384615384613
saved prediction of 71 accuracy :  0.9657  class accuracy :  0.08457067371202114  car_class_accuracy :  0.08457067371202114
saved prediction of 72 accuracy :  0.9699  class accuracy :  0.09685230024213075  car_class_accuracy :  0.09685230024213075
saved prediction of 73 accuracy :  0.84345  class accuracy :  0.05971731448763251  car_class_accuracy :  0.05971731448763251
saved prediction of 74 accuracy :  0.9899  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 75 accuracy :  0.9678  class accuracy :  0.07547937245787333  car_class_accuracy :  0.07547937245787333
saved prediction of 76 accuracy :  0.984  class accuracy :  0.08181818181818182  car_class_accuracy :  0.08181818181818182
saved prediction of 77 accuracy :  0.9651  class accuracy :  0.11402439024390243  car_class_accuracy :  0.11402439024390243
saved prediction of 78 accuracy :  0.94095  class accuracy :  0.09002123142250532  car_class_accuracy :  0.09002123142250532
saved prediction of 79 accuracy :  0.9653  class accuracy :  0.06893073301950235  car_class_accuracy :  0.06893073301950235
saved prediction of 80 accuracy :  0.94005  class accuracy :  0.043191056910569105  car_class_accuracy :  0.043191056910569105
saved prediction of 81 accuracy :  0.96135  class accuracy :  0.07930780559646539  car_class_accuracy :  0.07930780559646539
saved prediction of 82 accuracy :  0.9493  class accuracy :  0.09761904761904762  car_class_accuracy :  0.09761904761904762
saved prediction of 83 accuracy :  0.95375  class accuracy :  0.10933004521167282  car_class_accuracy :  0.10933004521167282
saved prediction of 84 accuracy :  0.9874  class accuracy :  0.047549019607843135  car_class_accuracy :  0.047549019607843135
saved prediction of 85 accuracy :  0.96345  class accuracy :  0.07745314222712238  car_class_accuracy :  0.07745314222712238
saved prediction of 86 accuracy :  0.9402  class accuracy :  0.08021788990825687  car_class_accuracy :  0.08021788990825687
saved prediction of 87 accuracy :  0.94985  class accuracy :  0.06875  car_class_accuracy :  0.06875
saved prediction of 88 accuracy :  0.96535  class accuracy :  0.08417570785922202  car_class_accuracy :  0.08417570785922202
saved prediction of 89 accuracy :  0.97  class accuracy :  0.08933333333333333  car_class_accuracy :  0.08933333333333333
saved prediction of 90 accuracy :  0.8461  class accuracy :  0.046980552712384854  car_class_accuracy :  0.046980552712384854
saved prediction of 91 accuracy :  0.9907  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 92 accuracy :  0.96475  class accuracy :  0.07795849691531127  car_class_accuracy :  0.07795849691531127
saved prediction of 93 accuracy :  0.98325  class accuracy :  0.07364864864864865  car_class_accuracy :  0.07364864864864865
saved prediction of 94 accuracy :  0.9604  class accuracy :  0.14701986754966886  car_class_accuracy :  0.14701986754966886
saved prediction of 95 accuracy :  0.94905  class accuracy :  0.08011583011583011  car_class_accuracy :  0.08011583011583011
saved prediction of 96 accuracy :  0.9682  class accuracy :  0.07011412268188302  car_class_accuracy :  0.07011412268188302
saved prediction of 97 accuracy :  0.92915  class accuracy :  0.05005005005005005  car_class_accuracy :  0.05005005005005005
saved prediction of 98 accuracy :  0.9586  class accuracy :  0.08820058997050148  car_class_accuracy :  0.08820058997050148
saved prediction of 99 accuracy :  0.96205  class accuracy :  0.07604166666666666  car_class_accuracy :  0.07604166666666666
Iter :  110 Batch :  0   Loss :  0.4118123  Accuracy :  93.705  Class Accuracy :  9.327309236947793  Car class accuracy  9.327309236947793
Iter :  110 Batch :  1   Loss :  0.3045697  Accuracy :  94.675  Class Accuracy :  14.269005847953215  Car class accuracy  14.269005847953215
Iter :  110 Batch :  2   Loss :  0.06363182  Accuracy :  98.99  Class Accuracy :  11.739130434782611  Car class accuracy  11.739130434782611
Iter :  110 Batch :  3   Loss :  0.17893615  Accuracy :  98.57000000000001  Class Accuracy :  9.5  Car class accuracy  9.5
Iter :  110 Batch :  4   Loss :  0.26506442  Accuracy :  90.53  Class Accuracy :  16.842105263157894  Car class accuracy  16.842105263157894
Iter :  110 Batch :  5   Loss :  0.24847011  Accuracy :  97.685  Class Accuracy :  10.78239608801956  Car class accuracy  10.78239608801956
Iter :  110 Batch :  6   Loss :  0.14410025  Accuracy :  96.375  Class Accuracy :  12.623762376237623  Car class accuracy  12.623762376237623
Iter :  110 Batch :  7   Loss :  0.28879204  Accuracy :  95.84  Class Accuracy :  11.722134178552562  Car class accuracy  11.722134178552562
Iter :  110 Batch :  8   Loss :  0.6035502  Accuracy :  95.96000000000001  Class Accuracy :  9.497098646034816  Car class accuracy  9.497098646034816
Iter :  110 Batch :  9   Loss :  0.40291244  Accuracy :  93.515  Class Accuracy :  13.019197207678884  Car class accuracy  13.019197207678884
Iter :  110 Batch :  10   Loss :  0.05371  Accuracy :  99.035  Class Accuracy :  10.378787878787879  Car class accuracy  10.378787878787879
Iter :  110 Batch :  11   Loss :  0.19409625  Accuracy :  95.675  Class Accuracy :  12.5  Car class accuracy  12.5
Iter :  110 Batch :  12   Loss :  0.24536467  Accuracy :  92.495  Class Accuracy :  17.69230769230769  Car class accuracy  17.69230769230769
Iter :  110 Batch :  13   Loss :  0.27888584  Accuracy :  92.425  Class Accuracy :  14.704618689581094  Car class accuracy  14.704618689581094
Iter :  110 Batch :  14   Loss :  0.16805366  Accuracy :  96.1  Class Accuracy :  11.591836734693876  Car class accuracy  11.591836734693876
Iter :  110 Batch :  15   Loss :  0.3212551  Accuracy :  92.025  Class Accuracy :  14.573643410852712  Car class accuracy  14.573643410852712
Iter :  110 Batch :  16   Loss :  0.083611265  Accuracy :  97.94  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 111 loss : 0.41833568 Accuracy: 92.20750265111346 Class Accuracy : 13.736867074798651
Iter :  111 Batch :  0   Loss :  0.20857368  Accuracy :  94.08  Class Accuracy :  14.096916299559473  Car class accuracy  14.096916299559473
Iter :  111 Batch :  1   Loss :  0.24471495  Accuracy :  95.545  Class Accuracy :  14.024297646165525  Car class accuracy  14.024297646165525
Iter :  111 Batch :  2   Loss :  0.0726118  Accuracy :  98.815  Class Accuracy :  10.382513661202186  Car class accuracy  10.382513661202186
Iter :  111 Batch :  3   Loss :  0.19726467  Accuracy :  95.31500000000001  Class Accuracy :  12.622950819672132  Car class accuracy  12.622950819672132
Iter :  111 Batch :  4   Loss :  0.36072665  Accuracy :  88.145  Class Accuracy :  19.411764705882355  Car class accuracy  19.411764705882355
Iter :  111 Batch :  5   Loss :  0.24546175  Accuracy :  95.61500000000001  Class Accuracy :  12.074776197998945  Car class accuracy  12.074776197998945
Iter :  111 Batch :  6   Loss :  0.22953989  Accuracy :  98.315  Class Accuracy :  6.79144385026738  Car class accuracy  6.79144385026738
Iter :  111 Batch :  7   Loss :  0.28804073  Accuracy :  94.88499999999999  Class Accuracy :  12.257189365165491  Car class accuracy  12.257189365165491
Iter :  111 Batch :  8   Loss :  0.27773649  Accuracy :  95.555  Class Accuracy :  12.7872582480091  Car class accuracy  12.7872582480091
Iter :  111 Batch :  9   Loss :  0.40136427  Accuracy :  89.85  Class Accuracy :  16.51873767258383  Car class accuracy  16.51873767258383
Iter :  111 Batch :  10   Loss :  0.06938843  Accuracy :  98.29  Class Accuracy :  11.05263157894737  Car class accuracy  11.05263157894737
Iter :  111 Batch :  11   Loss :  0.13552678  Accuracy :  97.725  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  111 Batch :  12   Loss :  0.22255024  Accuracy :  92.755  Class Accuracy :  16.356435643564353  Car class accuracy  16.356435643564353
Iter :  111 Batch :  13   Loss :  0.5339167  Accuracy :  95.88499999999999  Class Accuracy :  10.298071303331383  Car class accuracy  10.298071303331383
Iter :  111 Batch :  14   Loss :  0.093328945  Accuracy :  97.955  Class Accuracy :  11.548117154811715  Car class accuracy  11.548117154811715
Iter :  111 Batch :  15   Loss :  0.28144625  Accuracy :  94.765  Class Accuracy :  12.589041095890414  Car class accuracy  12.589041095890414
Iter :  111 Batch :  16   Loss :  0.03761168  Accuracy :  99.54499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 112 loss : 0.41664785 Accuracy: 92.23667367314766 Class Accuracy : 13.720726982823598
Iter :  112 Batch :  0   Loss :  0.17022154  Accuracy :  95.705  Class Accuracy :  13.61855670103093  Car class accuracy  13.61855670103093
Iter :  112 Batch :  1   Loss :  0.38928026  Accuracy :  94.66499999999999  Class Accuracy :  12.405329593267881  Car class accuracy  12.405329593267881
Iter :  112 Batch :  2   Loss :  0.074971214  Accuracy :  98.115  Class Accuracy :  12.512820512820513  Car class accuracy  12.512820512820513
Iter :  112 Batch :  3   Loss :  0.2083373  Accuracy :  94.705  Class Accuracy :  14.374999999999998  Car class accuracy  14.374999999999998
Iter :  112 Batch :  4   Loss :  0.28728667  Accuracy :  91.325  Class Accuracy :  7.894736842105263  Car class accuracy  7.894736842105263
Iter :  112 Batch :  5   Loss :  0.29286015  Accuracy :  94.195  Class Accuracy :  12.683239364428497  Car class accuracy  12.683239364428497
Iter :  112 Batch :  6   Loss :  0.20879629  Accuracy :  93.395  Class Accuracy :  14.413407821229049  Car class accuracy  14.413407821229049
Iter :  112 Batch :  7   Loss :  0.3556553  Accuracy :  91.7  Class Accuracy :  14.469885515181682  Car class accuracy  14.469885515181682
Iter :  112 Batch :  8   Loss :  0.35258183  Accuracy :  92.39500000000001  Class Accuracy :  16.129881526985518  Car class accuracy  16.129881526985518
Iter :  112 Batch :  9   Loss :  0.4553336  Accuracy :  86.61999999999999  Class Accuracy :  18.682581786030063  Car class accuracy  18.682581786030063
Iter :  112 Batch :  10   Loss :  0.09280016  Accuracy :  98.33  Class Accuracy :  12.727272727272727  Car class accuracy  12.727272727272727
Iter :  112 Batch :  11   Loss :  0.19250104  Accuracy :  95.39  Class Accuracy :  13.433734939759038  Car class accuracy  13.433734939759038
Iter :  112 Batch :  12   Loss :  0.18424456  Accuracy :  94.87  Class Accuracy :  14.499999999999998  Car class accuracy  14.499999999999998
Iter :  112 Batch :  13   Loss :  0.3254195  Accuracy :  93.05  Class Accuracy :  13.387349712493466  Car class accuracy  13.387349712493466
Iter :  112 Batch :  14   Loss :  0.10971077  Accuracy :  98.33  Class Accuracy :  11.369294605809129  Car class accuracy  11.369294605809129
Iter :  112 Batch :  15   Loss :  0.30041617  Accuracy :  94.28  Class Accuracy :  12.396345748418833  Car class accuracy  12.396345748418833
Iter :  112 Batch :  16   Loss :  0.025308056  Accuracy :  99.895  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 113 loss : 0.41505554 Accuracy: 92.25695572916666 Class Accuracy : 13.711220252974032
Iter :  113 Batch :  0   Loss :  0.18972278  Accuracy :  95.59  Class Accuracy :  13.436213991769547  Car class accuracy  13.436213991769547
Iter :  113 Batch :  1   Loss :  0.2478052  Accuracy :  98.005  Class Accuracy :  10.276595744680852  Car class accuracy  10.276595744680852
Iter :  113 Batch :  2   Loss :  0.055233087  Accuracy :  98.85000000000001  Class Accuracy :  10.555555555555555  Car class accuracy  10.555555555555555
Iter :  113 Batch :  3   Loss :  0.15262258  Accuracy :  97.595  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  113 Batch :  4   Loss :  0.28275135  Accuracy :  91.03  Class Accuracy :  17.142857142857142  Car class accuracy  17.142857142857142
Iter :  113 Batch :  5   Loss :  0.67188865  Accuracy :  97.30499999999999  Class Accuracy :  8.833766233766234  Car class accuracy  8.833766233766234
Iter :  113 Batch :  6   Loss :  0.138111  Accuracy :  96.31  Class Accuracy :  13.497267759562842  Car class accuracy  13.497267759562842
Iter :  113 Batch :  7   Loss :  0.28609076  Accuracy :  93.015  Class Accuracy :  14.143209876543212  Car class accuracy  14.143209876543212
Iter :  113 Batch :  8   Loss :  0.3196138  Accuracy :  94.905  Class Accuracy :  12.574816487859966  Car class accuracy  12.574816487859966
Iter :  113 Batch :  9   Loss :  0.33454776  Accuracy :  91.49000000000001  Class Accuracy :  15.56663644605621  Car class accuracy  15.56663644605621
Iter :  113 Batch :  10   Loss :  0.08682949  Accuracy :  98.50999999999999  Class Accuracy :  11.134751773049645  Car class accuracy  11.134751773049645
Iter :  113 Batch :  11   Loss :  0.14852989  Accuracy :  97.43  Class Accuracy :  9.382716049382715  Car class accuracy  9.382716049382715
Iter :  113 Batch :  12   Loss :  0.27045262  Accuracy :  91.41  Class Accuracy :  18.451882845188287  Car class accuracy  18.451882845188287
Iter :  113 Batch :  13   Loss :  0.21698238  Accuracy :  94.415  Class Accuracy :  13.384700055035776  Car class accuracy  13.384700055035776
Iter :  113 Batch :  14   Loss :  0.089206494  Accuracy :  98.35000000000001  Class Accuracy :  11.610169491525424  Car class accuracy  11.610169491525424
Iter :  113 Batch :  15   Loss :  0.26065665  Accuracy :  95.5  Class Accuracy :  12.05626255860683  Car class accuracy  12.05626255860683
Iter :  113 Batch :  16   Loss :  0.082366325  Accuracy :  99.05000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 114 loss : 0.41339183 Accuracy: 92.28813371192565 Class Accuracy : 13.695193746887755
Iter :  114 Batch :  0   Loss :  0.17281546  Accuracy :  97.13000000000001  Class Accuracy :  11.410916580844491  Car class accuracy  11.410916580844491
Iter :  114 Batch :  1   Loss :  0.1998312  Accuracy :  96.13000000000001  Class Accuracy :  13.137398971344599  Car class accuracy  13.137398971344599
Iter :  114 Batch :  2   Loss :  0.04224567  Accuracy :  99.46000000000001  Class Accuracy :  10.471204188481675  Car class accuracy  10.471204188481675
Iter :  114 Batch :  3   Loss :  0.12785925  Accuracy :  98.30499999999999  Class Accuracy :  9.54248366013072  Car class accuracy  9.54248366013072
Iter :  114 Batch :  4   Loss :  0.15325047  Accuracy :  96.55  Class Accuracy :  8.125  Car class accuracy  8.125
Iter :  114 Batch :  5   Loss :  0.3476756  Accuracy :  97.38  Class Accuracy :  10.420831141504472  Car class accuracy  10.420831141504472
Iter :  114 Batch :  6   Loss :  0.1273506  Accuracy :  97.345  Class Accuracy :  11.07981220657277  Car class accuracy  11.07981220657277
Iter :  114 Batch :  7   Loss :  0.27251664  Accuracy :  95.465  Class Accuracy :  11.795681937862032  Car class accuracy  11.795681937862032
Iter :  114 Batch :  8   Loss :  0.24891207  Accuracy :  97.17  Class Accuracy :  11.453798767967145  Car class accuracy  11.453798767967145
Iter :  114 Batch :  9   Loss :  0.32569918  Accuracy :  93.925  Class Accuracy :  13.302667893284267  Car class accuracy  13.302667893284267
Iter :  114 Batch :  10   Loss :  0.06253428  Accuracy :  99.055  Class Accuracy :  9.854014598540147  Car class accuracy  9.854014598540147/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  114 Batch :  11   Loss :  0.11936406  Accuracy :  97.84  Class Accuracy :  10.728476821192052  Car class accuracy  10.728476821192052
Iter :  114 Batch :  12   Loss :  0.16388927  Accuracy :  96.625  Class Accuracy :  13.071895424836603  Car class accuracy  13.071895424836603
Iter :  114 Batch :  13   Loss :  0.19771703  Accuracy :  95.78999999999999  Class Accuracy :  12.067815453029459  Car class accuracy  12.067815453029459
Iter :  114 Batch :  14   Loss :  0.088127255  Accuracy :  98.91  Class Accuracy :  9.652509652509652  Car class accuracy  9.652509652509652
Iter :  114 Batch :  15   Loss :  0.27316368  Accuracy :  97.46000000000001  Class Accuracy :  9.96376811594203  Car class accuracy  9.96376811594203
Iter :  114 Batch :  16   Loss :  0.050294936  Accuracy :  99.45  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 115 loss : 0.41131693 Accuracy: 92.33168116683726 Class Accuracy : 13.666155866497249
Iter :  115 Batch :  0   Loss :  0.14469582  Accuracy :  96.635  Class Accuracy :  12.198952879581151  Car class accuracy  12.198952879581151
Iter :  115 Batch :  1   Loss :  0.21265735  Accuracy :  96.63000000000001  Class Accuracy :  12.411807055435563  Car class accuracy  12.411807055435563
Iter :  115 Batch :  2   Loss :  0.039267648  Accuracy :  99.08500000000001  Class Accuracy :  10.604395604395604  Car class accuracy  10.604395604395604
Iter :  115 Batch :  3   Loss :  0.11491694  Accuracy :  98.26  Class Accuracy :  10.075757575757576  Car class accuracy  10.075757575757576
Iter :  115 Batch :  4   Loss :  0.17329268  Accuracy :  95.12  Class Accuracy :  14.210526315789473  Car class accuracy  14.210526315789473
Iter :  115 Batch :  5   Loss :  0.18242119  Accuracy :  96.61  Class Accuracy :  12.05446397793864  Car class accuracy  12.05446397793864
Iter :  115 Batch :  6   Loss :  0.102670826  Accuracy :  97.28999999999999  Class Accuracy :  12.808988764044942  Car class accuracy  12.808988764044942
Iter :  115 Batch :  7   Loss :  0.2886135  Accuracy :  93.61500000000001  Class Accuracy :  13.308020882771714  Car class accuracy  13.308020882771714
Iter :  115 Batch :  8   Loss :  0.40959242  Accuracy :  96.885  Class Accuracy :  10.286202477573687  Car class accuracy  10.286202477573687
Iter :  115 Batch :  9   Loss :  0.2568727  Accuracy :  95.54  Class Accuracy :  11.893048128342246  Car class accuracy  11.893048128342246
Iter :  115 Batch :  10   Loss :  0.0857582  Accuracy :  99.11  Class Accuracy :  8.692307692307692  Car class accuracy  8.692307692307692
Iter :  115 Batch :  11   Loss :  0.10842986  Accuracy :  98.545  Class Accuracy :  8.03030303030303  Car class accuracy  8.03030303030303
Iter :  115 Batch :  12   Loss :  0.2621065  Accuracy :  92.89500000000001  Class Accuracy :  17.417943107221006  Car class accuracy  17.417943107221006
Iter :  115 Batch :  13   Loss :  0.24998808  Accuracy :  95.7  Class Accuracy :  11.934976402726797  Car class accuracy  11.934976402726797
Iter :  115 Batch :  14   Loss :  0.12706463  Accuracy :  97.41  Class Accuracy :  11.3671875  Car class accuracy  11.3671875
Iter :  115 Batch :  15   Loss :  0.3008777  Accuracy :  95.1  Class Accuracy :  12.273032952252857  Car class accuracy  12.273032952252857
Iter :  115 Batch :  16   Loss :  0.061317433  Accuracy :  98.835  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 116 loss : 0.40935248 Accuracy: 92.3690360223237 Class Accuracy : 13.644462951538337
Iter :  116 Batch :  0   Loss :  0.18700244  Accuracy :  94.89999999999999  Class Accuracy :  12.910848549946294  Car class accuracy  12.910848549946294
Iter :  116 Batch :  1   Loss :  0.21992049  Accuracy :  96.64  Class Accuracy :  11.719557195571955  Car class accuracy  11.719557195571955
Iter :  116 Batch :  2   Loss :  0.05259917  Accuracy :  99.015  Class Accuracy :  10.105820105820108  Car class accuracy  10.105820105820108
Iter :  116 Batch :  3   Loss :  0.20617025  Accuracy :  97.575  Class Accuracy :  10.133333333333335  Car class accuracy  10.133333333333335
Iter :  116 Batch :  4   Loss :  0.28644338  Accuracy :  90.86  Class Accuracy :  8.666666666666668  Car class accuracy  8.666666666666668
Iter :  116 Batch :  5   Loss :  0.18814163  Accuracy :  95.87  Class Accuracy :  11.93632567849687  Car class accuracy  11.93632567849687
Iter :  116 Batch :  6   Loss :  0.13691202  Accuracy :  97.14500000000001  Class Accuracy :  11.584699453551913  Car class accuracy  11.584699453551913
Iter :  116 Batch :  7   Loss :  0.23286064  Accuracy :  93.12  Class Accuracy :  14.47878787878788  Car class accuracy  14.47878787878788
Iter :  116 Batch :  8   Loss :  0.38278085  Accuracy :  96.365  Class Accuracy :  10.557809330628801  Car class accuracy  10.557809330628801
Iter :  116 Batch :  9   Loss :  0.29687318  Accuracy :  94.33500000000001  Class Accuracy :  12.971652003910068  Car class accuracy  12.971652003910068
Iter :  116 Batch :  10   Loss :  0.05536208  Accuracy :  98.94  Class Accuracy :  10.352112676056338  Car class accuracy  10.352112676056338
Iter :  116 Batch :  11   Loss :  0.115654886  Accuracy :  98.11  Class Accuracy :  10.357142857142858  Car class accuracy  10.357142857142858
Iter :  116 Batch :  12   Loss :  0.18379249  Accuracy :  95.075  Class Accuracy :  14.603854389721626  Car class accuracy  14.603854389721626
Iter :  116 Batch :  13   Loss :  0.22650322  Accuracy :  92.69500000000001  Class Accuracy :  14.83102493074792  Car class accuracy  14.83102493074792
Iter :  116 Batch :  14   Loss :  0.10478573  Accuracy :  96.5  Class Accuracy :  13.775933609958507  Car class accuracy  13.775933609958507
Iter :  116 Batch :  15   Loss :  0.40639618  Accuracy :  93.04  Class Accuracy :  12.267206477732792  Car class accuracy  12.267206477732792
Iter :  116 Batch :  16   Loss :  0.03412043  Accuracy :  99.935  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 117 loss : 0.4075202 Accuracy: 92.39913983903422 Class Accuracy : 13.623988557656006
Iter :  117 Batch :  0   Loss :  0.20756294  Accuracy :  96.395  Class Accuracy :  11.144708423326133  Car class accuracy  11.144708423326133
Iter :  117 Batch :  1   Loss :  0.22063996  Accuracy :  95.155  Class Accuracy :  13.943452380952381  Car class accuracy  13.943452380952381
Iter :  117 Batch :  2   Loss :  0.045088414  Accuracy :  98.98  Class Accuracy :  10.631067961165048  Car class accuracy  10.631067961165048
Iter :  117 Batch :  3   Loss :  0.10793324  Accuracy :  98.52499999999999  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  117 Batch :  4   Loss :  0.142622  Accuracy :  96.855  Class Accuracy :  8.421052631578947  Car class accuracy  8.421052631578947
Iter :  117 Batch :  5   Loss :  0.20961948  Accuracy :  96.955  Class Accuracy :  11.174358974358974  Car class accuracy  11.174358974358974
Iter :  117 Batch :  6   Loss :  0.15619186  Accuracy :  97.82499999999999  Class Accuracy :  10.47872340425532  Car class accuracy  10.47872340425532
Iter :  117 Batch :  7   Loss :  0.22692084  Accuracy :  96.015  Class Accuracy :  11.761177753544166  Car class accuracy  11.761177753544166
Iter :  117 Batch :  8   Loss :  0.27892905  Accuracy :  95.56  Class Accuracy :  12.591489361702129  Car class accuracy  12.591489361702129
Iter :  117 Batch :  9   Loss :  0.39248165  Accuracy :  95.58  Class Accuracy :  10.291777188328913  Car class accuracy  10.291777188328913
Iter :  117 Batch :  10   Loss :  0.05178296  Accuracy :  99.02499999999999  Class Accuracy :  9.333333333333334  Car class accuracy  9.333333333333334
Iter :  117 Batch :  11   Loss :  0.11101388  Accuracy :  98.64  Class Accuracy :  8.831168831168831  Car class accuracy  8.831168831168831
Iter :  117 Batch :  12   Loss :  0.13452803  Accuracy :  97.44500000000001  Class Accuracy :  11.99134199134199  Car class accuracy  11.99134199134199
Iter :  117 Batch :  13   Loss :  0.2019794  Accuracy :  95.86  Class Accuracy :  11.844396082698585  Car class accuracy  11.844396082698585
Iter :  117 Batch :  14   Loss :  0.13790286  Accuracy :  96.31  Class Accuracy :  13.999999999999998  Car class accuracy  13.999999999999998
Iter :  117 Batch :  15   Loss :  0.28237516  Accuracy :  93.83500000000001  Class Accuracy :  13.28175370728562  Car class accuracy  13.28175370728562
Iter :  117 Batch :  16   Loss :  0.033144057  Accuracy :  99.88  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 118 loss : 0.4055316 Accuracy: 92.43806982543641 Class Accuracy : 13.598109254187122
Iter :  118 Batch :  0   Loss :  0.23632808  Accuracy :  96.465  Class Accuracy :  11.77889447236181  Car class accuracy  11.77889447236181
Iter :  118 Batch :  1   Loss :  0.37558466  Accuracy :  92.525  Class Accuracy :  17.137883008356546  Car class accuracy  17.137883008356546
Iter :  118 Batch :  2   Loss :  0.049148723  Accuracy :  99.055  Class Accuracy :  10.738916256157635  Car class accuracy  10.738916256157635
Iter :  118 Batch :  3   Loss :  0.22006328  Accuracy :  94.93  Class Accuracy :  12.411347517730494  Car class accuracy  12.411347517730494
Iter :  118 Batch :  4   Loss :  0.28204918  Accuracy :  92.55  Class Accuracy :  17.727272727272727  Car class accuracy  17.727272727272727
Iter :  118 Batch :  5   Loss :  0.18118468  Accuracy :  97.585  Class Accuracy :  11.125588128845457  Car class accuracy  11.125588128845457
Iter :  118 Batch :  6   Loss :  0.10041728  Accuracy :  97.8  Class Accuracy :  10.726256983240223  Car class accuracy  10.726256983240223
Iter :  118 Batch :  7   Loss :  0.29914242  Accuracy :  91.73  Class Accuracy :  14.966996699669968  Car class accuracy  14.966996699669968
Iter :  118 Batch :  8   Loss :  0.23303384  Accuracy :  95.935  Class Accuracy :  13.080985915492956  Car class accuracy  13.080985915492956
Iter :  118 Batch :  9   Loss :  0.36669734  Accuracy :  91.29  Class Accuracy :  15.195729537366548  Car class accuracy  15.195729537366548
Iter :  118 Batch :  10   Loss :  0.059638936  Accuracy :  99.37  Class Accuracy :  9.295774647887324  Car class accuracy  9.295774647887324
Iter :  118 Batch :  11   Loss :  0.11865674  Accuracy :  98.345  Class Accuracy :  10.422535211267606  Car class accuracy  10.422535211267606
Iter :  118 Batch :  12   Loss :  0.17712836  Accuracy :  95.33500000000001  Class Accuracy :  13.679653679653681  Car class accuracy  13.679653679653681
Iter :  118 Batch :  13   Loss :  0.3013138  Accuracy :  94.23  Class Accuracy :  13.065735892961023  Car class accuracy  13.065735892961023
Iter :  118 Batch :  14   Loss :  0.096309535  Accuracy :  97.98  Class Accuracy :  10.47808764940239  Car class accuracy  10.47808764940239
Iter :  118 Batch :  15   Loss :  0.3001886  Accuracy :  94.795  Class Accuracy :  12.581072137657182  Car class accuracy  12.581072137657182
Iter :  118 Batch :  16   Loss :  0.022447355  Accuracy :  99.86  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 119 loss : 0.40381315 Accuracy: 92.46691889218594 Class Accuracy : 13.584877242883534
Iter :  119 Batch :  0   Loss :  0.16819187  Accuracy :  95.78999999999999  Class Accuracy :  12.166666666666666  Car class accuracy  12.166666666666666
Iter :  119 Batch :  1   Loss :  0.26850206  Accuracy :  93.465  Class Accuracy :  15.501412429378531  Car class accuracy  15.501412429378531
Iter :  119 Batch :  2   Loss :  0.05429497  Accuracy :  99.285  Class Accuracy :  9.365079365079366  Car class accuracy  9.365079365079366
Iter :  119 Batch :  3   Loss :  0.107662745  Accuracy :  98.82  Class Accuracy :  8.823529411764705  Car class accuracy  8.823529411764705
Iter :  119 Batch :  4   Loss :  0.07142765  Accuracy :  99.22999999999999  Class Accuracy :  4.705882352941177  Car class accuracy  4.705882352941177
Iter :  119 Batch :  5   Loss :  0.27070123  Accuracy :  96.37  Class Accuracy :  11.421725239616613  Car class accuracy  11.421725239616613
Iter :  119 Batch :  6   Loss :  0.12077698  Accuracy :  98.83999999999999  Class Accuracy :  6.972972972972973  Car class accuracy  6.972972972972973
Iter :  119 Batch :  7   Loss :  0.25519615  Accuracy :  93.14  Class Accuracy :  14.40552016985138  Car class accuracy  14.40552016985138
Iter :  119 Batch :  8   Loss :  0.30889764  Accuracy :  93.16499999999999  Class Accuracy :  14.601719197707736  Car class accuracy  14.601719197707736
Iter :  119 Batch :  9   Loss :  0.24327466  Accuracy :  95.77  Class Accuracy :  11.807017543859647  Car class accuracy  11.807017543859647
Iter :  119 Batch :  10   Loss :  0.038533647  Accuracy :  99.55000000000001  Class Accuracy :  10.615384615384615  Car class accuracy  10.615384615384615
Iter :  119 Batch :  11   Loss :  0.11251343  Accuracy :  98.09  Class Accuracy :  11.275167785234899  Car class accuracy  11.275167785234899
Iter :  119 Batch :  12   Loss :  0.1564438  Accuracy :  94.895  Class Accuracy :  14.449064449064448  Car class accuracy  14.449064449064448
Iter :  119 Batch :  13   Loss :  0.21148708  Accuracy :  94.59  Class Accuracy :  13.171953255425711  Car class accuracy  13.171953255425711
Iter :  119 Batch :  14   Loss :  0.10748717  Accuracy :  96.89  Class Accuracy :  12.958333333333332  Car class accuracy  12.958333333333332
Iter :  119 Batch :  15   Loss :  0.2550352  Accuracy :  95.685  Class Accuracy :  11.712931618144887  Car class accuracy  11.712931618144887
Iter :  119 Batch :  16   Loss :  0.031840388  Accuracy :  99.375  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 120 loss : 0.40181088 Accuracy: 92.50174595389898 Class Accuracy : 13.561832342087756
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__120_0.ckpt
saved prediction of 0 accuracy :  0.99375  class accuracy :  0.04883720930232558  car_class_accuracy :  0.04883720930232558
saved prediction of 1 accuracy :  0.94335  class accuracy :  0.08624239588207769  car_class_accuracy :  0.08624239588207769
saved prediction of 2 accuracy :  0.9397  class accuracy :  0.08325499412455935  car_class_accuracy :  0.08325499412455935
saved prediction of 3 accuracy :  0.96335  class accuracy :  0.06470588235294118  car_class_accuracy :  0.06470588235294118
saved prediction of 4 accuracy :  0.95325  class accuracy :  0.08229064039408866  car_class_accuracy :  0.08229064039408866
saved prediction of 5 accuracy :  0.97895  class accuracy :  0.07862796833773086  car_class_accuracy :  0.07862796833773086
saved prediction of 6 accuracy :  0.85565  class accuracy :  0.05084055017829853  car_class_accuracy :  0.05084055017829853
saved prediction of 7 accuracy :  0.9918  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 8 accuracy :  0.9608  class accuracy :  0.08594900849858357  car_class_accuracy :  0.08594900849858357
saved prediction of 9 accuracy :  0.9904  class accuracy :  0.0896551724137931  car_class_accuracy :  0.0896551724137931
saved prediction of 10 accuracy :  0.9474  class accuracy :  0.12481203007518797  car_class_accuracy :  0.12481203007518797
saved prediction of 11 accuracy :  0.94315  class accuracy :  0.11288888888888889  car_class_accuracy :  0.11288888888888889
saved prediction of 12 accuracy :  0.95905  class accuracy :  0.08636688079942897  car_class_accuracy :  0.08636688079942897
saved prediction of 13 accuracy :  0.95175  class accuracy :  0.05254237288135594  car_class_accuracy :  0.05254237288135594
saved prediction of 14 accuracy :  0.9516  class accuracy :  0.09697885196374623  car_class_accuracy :  0.09697885196374623
saved prediction of 15 accuracy :  0.9819  class accuracy :  0.09253731343283582  car_class_accuracy :  0.09253731343283582
saved prediction of 16 accuracy :  0.96035  class accuracy :  0.10693196405648267  car_class_accuracy :  0.10693196405648267
saved prediction of 17 accuracy :  0.99285  class accuracy :  0.05153061224489795  car_class_accuracy :  0.05153061224489795
saved prediction of 18 accuracy :  0.9458  class accuracy :  0.0890748031496063  car_class_accuracy :  0.0890748031496063
saved prediction of 19 accuracy :  0.93825  class accuracy :  0.0827818283791363  car_class_accuracy :  0.0827818283791363
saved prediction of 20 accuracy :  0.96965  class accuracy :  0.058823529411764705  car_class_accuracy :  0.058823529411764705
saved prediction of 21 accuracy :  0.9666  class accuracy :  0.08707379134860051  car_class_accuracy :  0.08707379134860051
saved prediction of 22 accuracy :  0.9771  class accuracy :  0.0874331550802139  car_class_accuracy :  0.0874331550802139
saved prediction of 23 accuracy :  0.8617  class accuracy :  0.07698675496688742  car_class_accuracy :  0.07698675496688742
saved prediction of 24 accuracy :  0.99215  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 25 accuracy :  0.96205  class accuracy :  0.0872716894977169  car_class_accuracy :  0.0872716894977169
saved prediction of 26 accuracy :  0.9899  class accuracy :  0.09444444444444444  car_class_accuracy :  0.09444444444444444
saved prediction of 27 accuracy :  0.9564  class accuracy :  0.11296296296296296  car_class_accuracy :  0.11296296296296296
saved prediction of 28 accuracy :  0.95245  class accuracy :  0.10942100098135428  car_class_accuracy :  0.10942100098135428
saved prediction of 29 accuracy :  0.9554  class accuracy :  0.09053583855254002  car_class_accuracy :  0.09053583855254002
saved prediction of 30 accuracy :  0.94625  class accuracy :  0.06362715298885512  car_class_accuracy :  0.06362715298885512
saved prediction of 31 accuracy :  0.95555  class accuracy :  0.08299651567944251  car_class_accuracy :  0.08299651567944251
saved prediction of 32 accuracy :  0.98045  class accuracy :  0.0856573705179283  car_class_accuracy :  0.0856573705179283
saved prediction of 33 accuracy :  0.9634  class accuracy :  0.10205128205128204  car_class_accuracy :  0.10205128205128204
saved prediction of 34 accuracy :  0.99295  class accuracy :  0.045410628019323676  car_class_accuracy :  0.045410628019323676
saved prediction of 35 accuracy :  0.95265  class accuracy :  0.0793040293040293  car_class_accuracy :  0.0793040293040293
saved prediction of 36 accuracy :  0.9396  class accuracy :  0.07856334841628959  car_class_accuracy :  0.07856334841628959
saved prediction of 37 accuracy :  0.96795  class accuracy :  0.10500000000000001  car_class_accuracy :  0.10500000000000001
saved prediction of 38 accuracy :  0.9672  class accuracy :  0.08804091266719119  car_class_accuracy :  0.08804091266719119
saved prediction of 39 accuracy :  0.97925  class accuracy :  0.08530927835051547  car_class_accuracy :  0.08530927835051547
saved prediction of 40 accuracy :  0.8519  class accuracy :  0.05530071355759429  car_class_accuracy :  0.05530071355759429
saved prediction of 41 accuracy :  0.9926  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 42 accuracy :  0.9608  class accuracy :  0.08501628664495114  car_class_accuracy :  0.08501628664495114
saved prediction of 43 accuracy :  0.99095  class accuracy :  0.09338842975206611  car_class_accuracy :  0.09338842975206611
saved prediction of 44 accuracy :  0.96435  class accuracy :  0.11946308724832215  car_class_accuracy :  0.11946308724832215
saved prediction of 45 accuracy :  0.94465  class accuracy :  0.11614906832298137  car_class_accuracy :  0.11614906832298137
saved prediction of 46 accuracy :  0.9561  class accuracy :  0.07934173669467787  car_class_accuracy :  0.07934173669467787
saved prediction of 47 accuracy :  0.94995  class accuracy :  0.05864661654135338  car_class_accuracy :  0.05864661654135338
saved prediction of 48 accuracy :  0.94735  class accuracy :  0.09720327421555253  car_class_accuracy :  0.09720327421555253
saved prediction of 49 accuracy :  0.9692  class accuracy :  0.09457013574660633  car_class_accuracy :  0.09457013574660633
saved prediction of 50 accuracy :  0.9624  class accuracy :  0.09682264586943963  car_class_accuracy :  0.09682264586943963
saved prediction of 51 accuracy :  0.99445  class accuracy :  0.059162303664921465  car_class_accuracy :  0.059162303664921465
saved prediction of 52 accuracy :  0.93995  class accuracy :  0.08586803930744033  car_class_accuracy :  0.08586803930744033
saved prediction of 53 accuracy :  0.93305  class accuracy :  0.07518557794273595  car_class_accuracy :  0.07518557794273595
saved prediction of 54 accuracy :  0.96715  class accuracy :  0.06956521739130435  car_class_accuracy :  0.06956521739130435
saved prediction of 55 accuracy :  0.96445  class accuracy :  0.08661377015613002  car_class_accuracy :  0.08661377015613002
saved prediction of 56 accuracy :  0.9762  class accuracy :  0.08563829787234042  car_class_accuracy :  0.08563829787234042
saved prediction of 57 accuracy :  0.85495  class accuracy :  0.05033011681056374  car_class_accuracy :  0.05033011681056374
saved prediction of 58 accuracy :  0.99125  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 59 accuracy :  0.96495  class accuracy :  0.0887594641817123  car_class_accuracy :  0.0887594641817123
saved prediction of 60 accuracy :  0.99045  class accuracy :  0.08972602739726028  car_class_accuracy :  0.08972602739726028
saved prediction of 61 accuracy :  0.9575  class accuracy :  0.14113475177304963  car_class_accuracy :  0.14113475177304963
saved prediction of 62 accuracy :  0.94695  class accuracy :  0.11218323586744638  car_class_accuracy :  0.11218323586744638
saved prediction of 63 accuracy :  0.9522  class accuracy :  0.08050231328486451  car_class_accuracy :  0.08050231328486451
saved prediction of 64 accuracy :  0.9465  class accuracy :  0.061180124223602486  car_class_accuracy :  0.061180124223602486
saved prediction of 65 accuracy :  0.9559  class accuracy :  0.0943222143364088  car_class_accuracy :  0.0943222143364088
saved prediction of 66 accuracy :  0.97965  class accuracy :  0.08657024793388429  car_class_accuracy :  0.08657024793388429
saved prediction of 67 accuracy :  0.9609  class accuracy :  0.10297752808988765  car_class_accuracy :  0.10297752808988765
saved prediction of 68 accuracy :  0.9933  class accuracy :  0.04522613065326633  car_class_accuracy :  0.04522613065326633
saved prediction of 69 accuracy :  0.9539  class accuracy :  0.0748925721301412  car_class_accuracy :  0.0748925721301412
saved prediction of 70 accuracy :  0.9373  class accuracy :  0.08084507042253522  car_class_accuracy :  0.08084507042253522
saved prediction of 71 accuracy :  0.9692  class accuracy :  0.06923076923076923  car_class_accuracy :  0.06923076923076923
saved prediction of 72 accuracy :  0.9673  class accuracy :  0.0879439979258491  car_class_accuracy :  0.0879439979258491
saved prediction of 73 accuracy :  0.9808  class accuracy :  0.0872972972972973  car_class_accuracy :  0.0872972972972973
saved prediction of 74 accuracy :  0.8504  class accuracy :  0.058029758850692656  car_class_accuracy :  0.058029758850692656
saved prediction of 75 accuracy :  0.9913  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 76 accuracy :  0.95745  class accuracy :  0.08309022150189087  car_class_accuracy :  0.08309022150189087
saved prediction of 77 accuracy :  0.99065  class accuracy :  0.10148148148148148  car_class_accuracy :  0.10148148148148148
saved prediction of 78 accuracy :  0.94885  class accuracy :  0.15857142857142856  car_class_accuracy :  0.15857142857142856
saved prediction of 79 accuracy :  0.93515  class accuracy :  0.11692589204025619  car_class_accuracy :  0.11692589204025619
saved prediction of 80 accuracy :  0.95495  class accuracy :  0.08789938817131203  car_class_accuracy :  0.08789938817131203
saved prediction of 81 accuracy :  0.9477  class accuracy :  0.055327868852459015  car_class_accuracy :  0.055327868852459015
saved prediction of 82 accuracy :  0.9616  class accuracy :  0.085621387283237  car_class_accuracy :  0.085621387283237
saved prediction of 83 accuracy :  0.9669  class accuracy :  0.11069767441860465  car_class_accuracy :  0.11069767441860465
saved prediction of 84 accuracy :  0.9608  class accuracy :  0.10785087719298245  car_class_accuracy :  0.10785087719298245
saved prediction of 85 accuracy :  0.9933  class accuracy :  0.052551020408163264  car_class_accuracy :  0.052551020408163264
saved prediction of 86 accuracy :  0.94835  class accuracy :  0.0793518034500784  car_class_accuracy :  0.0793518034500784
saved prediction of 87 accuracy :  0.94025  class accuracy :  0.08152476349471341  car_class_accuracy :  0.08152476349471341
saved prediction of 88 accuracy :  0.968  class accuracy :  0.02222222222222222  car_class_accuracy :  0.02222222222222222
saved prediction of 89 accuracy :  0.96545  class accuracy :  0.08672427336999214/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  car_class_accuracy :  0.08672427336999214
saved prediction of 90 accuracy :  0.97985  class accuracy :  0.09549071618037135  car_class_accuracy :  0.09549071618037135
saved prediction of 91 accuracy :  0.8562  class accuracy :  0.0501773948302078  car_class_accuracy :  0.0501773948302078
saved prediction of 92 accuracy :  0.99155  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 93 accuracy :  0.966  class accuracy :  0.09337670017740982  car_class_accuracy :  0.09337670017740982
saved prediction of 94 accuracy :  0.9896  class accuracy :  0.09705882352941177  car_class_accuracy :  0.09705882352941177
saved prediction of 95 accuracy :  0.95435  class accuracy :  0.11959459459459461  car_class_accuracy :  0.11959459459459461
saved prediction of 96 accuracy :  0.94135  class accuracy :  0.11541774332472007  car_class_accuracy :  0.11541774332472007
saved prediction of 97 accuracy :  0.9577  class accuracy :  0.08142957252978275  car_class_accuracy :  0.08142957252978275
saved prediction of 98 accuracy :  0.95085  class accuracy :  0.06146288209606987  car_class_accuracy :  0.06146288209606987
saved prediction of 99 accuracy :  0.9612  class accuracy :  0.08804841149773071  car_class_accuracy :  0.08804841149773071
Iter :  120 Batch :  0   Loss :  0.20112121  Accuracy :  94.83  Class Accuracy :  13.343915343915343  Car class accuracy  13.343915343915343
Iter :  120 Batch :  1   Loss :  0.24296007  Accuracy :  96.925  Class Accuracy :  11.762589928057555  Car class accuracy  11.762589928057555
Iter :  120 Batch :  2   Loss :  0.040331706  Accuracy :  99.075  Class Accuracy :  10.823529411764705  Car class accuracy  10.823529411764705
Iter :  120 Batch :  3   Loss :  0.12355288  Accuracy :  98.50999999999999  Class Accuracy :  9.390243902439025  Car class accuracy  9.390243902439025
Iter :  120 Batch :  4   Loss :  0.22323766  Accuracy :  93.145  Class Accuracy :  8.095238095238095  Car class accuracy  8.095238095238095
Iter :  120 Batch :  5   Loss :  0.15636496  Accuracy :  97.405  Class Accuracy :  11.158940397350994  Car class accuracy  11.158940397350994
Iter :  120 Batch :  6   Loss :  0.109891556  Accuracy :  97.00999999999999  Class Accuracy :  15.490196078431373  Car class accuracy  15.490196078431373
Iter :  120 Batch :  7   Loss :  0.21731782  Accuracy :  94.82000000000001  Class Accuracy :  12.814814814814815  Car class accuracy  12.814814814814815
Iter :  120 Batch :  8   Loss :  0.33015016  Accuracy :  97.99  Class Accuracy :  9.824418129848917  Car class accuracy  9.824418129848917
Iter :  120 Batch :  9   Loss :  0.21381047  Accuracy :  97.0  Class Accuracy :  11.009090909090908  Car class accuracy  11.009090909090908
Iter :  120 Batch :  10   Loss :  0.042081993  Accuracy :  99.64  Class Accuracy :  9.705882352941178  Car class accuracy  9.705882352941178
Iter :  120 Batch :  11   Loss :  0.10271616  Accuracy :  98.97  Class Accuracy :  8.441558441558442  Car class accuracy  8.441558441558442
Iter :  120 Batch :  12   Loss :  0.17582004  Accuracy :  94.905  Class Accuracy :  14.551422319474835  Car class accuracy  14.551422319474835
Iter :  120 Batch :  13   Loss :  0.20989034  Accuracy :  93.93  Class Accuracy :  13.965424095083739  Car class accuracy  13.965424095083739
Iter :  120 Batch :  14   Loss :  0.10132395  Accuracy :  99.33999999999999  Class Accuracy :  6.932773109243698  Car class accuracy  6.932773109243698
Iter :  120 Batch :  15   Loss :  0.3205701  Accuracy :  92.28  Class Accuracy :  14.226027397260275  Car class accuracy  14.226027397260275
Iter :  120 Batch :  16   Loss :  0.025835156  Accuracy :  99.845  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 121 loss : 0.39986837 Accuracy: 92.53729571984435 Class Accuracy : 13.537992320157318
Iter :  121 Batch :  0   Loss :  0.18450621  Accuracy :  95.57  Class Accuracy :  12.518597236981934  Car class accuracy  12.518597236981934
Iter :  121 Batch :  1   Loss :  0.23396909  Accuracy :  94.855  Class Accuracy :  13.87997208653175  Car class accuracy  13.87997208653175
Iter :  121 Batch :  2   Loss :  0.037057307  Accuracy :  99.11999999999999  Class Accuracy :  12.333333333333334  Car class accuracy  12.333333333333334
Iter :  121 Batch :  3   Loss :  0.13136888  Accuracy :  97.405  Class Accuracy :  10.296296296296296  Car class accuracy  10.296296296296296
Iter :  121 Batch :  4   Loss :  0.14532158  Accuracy :  95.98  Class Accuracy :  13.684210526315791  Car class accuracy  13.684210526315791
Iter :  121 Batch :  5   Loss :  0.18770285  Accuracy :  96.33500000000001  Class Accuracy :  11.64754953076121  Car class accuracy  11.64754953076121
Iter :  121 Batch :  6   Loss :  0.1023938  Accuracy :  98.35000000000001  Class Accuracy :  9.947916666666666  Car class accuracy  9.947916666666666
Iter :  121 Batch :  7   Loss :  0.21294446  Accuracy :  94.83  Class Accuracy :  13.059338521400779  Car class accuracy  13.059338521400779
Iter :  121 Batch :  8   Loss :  0.5991488  Accuracy :  94.365  Class Accuracy :  12.287655719139298  Car class accuracy  12.287655719139298
Iter :  121 Batch :  9   Loss :  0.3487181  Accuracy :  94.89  Class Accuracy :  12.014242115971516  Car class accuracy  12.014242115971516
Iter :  121 Batch :  10   Loss :  0.04380258  Accuracy :  99.615  Class Accuracy :  8.968253968253968  Car class accuracy  8.968253968253968
Iter :  121 Batch :  11   Loss :  0.12258816  Accuracy :  98.06  Class Accuracy :  10.06578947368421  Car class accuracy  10.06578947368421
Iter :  121 Batch :  12   Loss :  0.16633347  Accuracy :  94.58  Class Accuracy :  16.215139442231074  Car class accuracy  16.215139442231074
Iter :  121 Batch :  13   Loss :  0.27386594  Accuracy :  94.78999999999999  Class Accuracy :  12.661987041036719  Car class accuracy  12.661987041036719
Iter :  121 Batch :  14   Loss :  0.11973843  Accuracy :  96.30499999999999  Class Accuracy :  13.227091633466134  Car class accuracy  13.227091633466134
Iter :  121 Batch :  15   Loss :  0.39586613  Accuracy :  91.75  Class Accuracy :  13.322281167108754  Car class accuracy  13.322281167108754
Iter :  121 Batch :  16   Loss :  0.05174042  Accuracy :  99.27  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 122 loss : 0.39820862 Accuracy: 92.56765557163531 Class Accuracy : 13.521583147613422
Iter :  122 Batch :  0   Loss :  0.16755305  Accuracy :  96.67999999999999  Class Accuracy :  12.158273381294963  Car class accuracy  12.158273381294963
Iter :  122 Batch :  1   Loss :  0.29163203  Accuracy :  96.25  Class Accuracy :  12.315412186379929  Car class accuracy  12.315412186379929
Iter :  122 Batch :  2   Loss :  0.06790706  Accuracy :  98.88  Class Accuracy :  9.855072463768117  Car class accuracy  9.855072463768117
Iter :  122 Batch :  3   Loss :  0.1794092  Accuracy :  97.92999999999999  Class Accuracy :  10.076335877862594  Car class accuracy  10.076335877862594
Iter :  122 Batch :  4   Loss :  0.23188892  Accuracy :  93.27499999999999  Class Accuracy :  12.85714285714286  Car class accuracy  12.85714285714286
Iter :  122 Batch :  5   Loss :  0.29390603  Accuracy :  97.255  Class Accuracy :  10.149200710479574  Car class accuracy  10.149200710479574
Iter :  122 Batch :  6   Loss :  0.16345903  Accuracy :  96.505  Class Accuracy :  10.82901554404145  Car class accuracy  10.82901554404145
Iter :  122 Batch :  7   Loss :  0.30859333  Accuracy :  94.98  Class Accuracy :  12.169287696577243  Car class accuracy  12.169287696577243
Iter :  122 Batch :  8   Loss :  0.4078979  Accuracy :  93.405  Class Accuracy :  13.471323846485555  Car class accuracy  13.471323846485555
Iter :  122 Batch :  9   Loss :  0.32334077  Accuracy :  94.135  Class Accuracy :  13.170731707317074  Car class accuracy  13.170731707317074
Iter :  122 Batch :  10   Loss :  0.06498277  Accuracy :  98.795  Class Accuracy :  10.073529411764707  Car class accuracy  10.073529411764707
Iter :  122 Batch :  11   Loss :  0.16398135  Accuracy :  96.54  Class Accuracy :  12.043795620437955  Car class accuracy  12.043795620437955
Iter :  122 Batch :  12   Loss :  0.19990493  Accuracy :  94.5  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  122 Batch :  13   Loss :  0.23398657  Accuracy :  92.97999999999999  Class Accuracy :  14.605626034197464  Car class accuracy  14.605626034197464
Iter :  122 Batch :  14   Loss :  0.18628882  Accuracy :  94.8  Class Accuracy :  15.665236051502147  Car class accuracy  15.665236051502147
Iter :  122 Batch :  15   Loss :  0.45101273  Accuracy :  91.93  Class Accuracy :  14.667110519307588  Car class accuracy  14.667110519307588
Iter :  122 Batch :  16   Loss :  0.05486153  Accuracy :  99.38  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 123 loss : 0.3967833 Accuracy: 92.59376555023924 Class Accuracy : 13.506865530579514
Iter :  123 Batch :  0   Loss :  0.225525  Accuracy :  95.52000000000001  Class Accuracy :  12.183316168898044  Car class accuracy  12.183316168898044
Iter :  123 Batch :  1   Loss :  0.22443266  Accuracy :  95.555  Class Accuracy :  12.512896094325718  Car class accuracy  12.512896094325718
Iter :  123 Batch :  2   Loss :  0.051084124  Accuracy :  99.335  Class Accuracy :  10.052631578947368  Car class accuracy  10.052631578947368
Iter :  123 Batch :  3   Loss :  0.11281665  Accuracy :  98.45  Class Accuracy :  8.666666666666668  Car class accuracy  8.666666666666668
Iter :  123 Batch :  4   Loss :  0.17701265  Accuracy :  95.5  Class Accuracy :  6.923076923076923  Car class accuracy  6.923076923076923
Iter :  123 Batch :  5   Loss :  0.21088122  Accuracy :  95.46  Class Accuracy :  12.599018003273324  Car class accuracy  12.599018003273324
Iter :  123 Batch :  6   Loss :  0.1087292  Accuracy :  97.875  Class Accuracy :  9.481865284974093  Car class accuracy  9.481865284974093
Iter :  123 Batch :  7   Loss :  0.26625836  Accuracy :  93.585  Class Accuracy :  13.185714285714283  Car class accuracy  13.185714285714283
Iter :  123 Batch :  8   Loss :  0.6919886  Accuracy :  94.38499999999999  Class Accuracy :  9.983586376692655  Car class accuracy  9.983586376692655
Iter :  123 Batch :  9   Loss :  0.292845  Accuracy :  95.375  Class Accuracy :  12.050761421319796  Car class accuracy  12.050761421319796
Iter :  123 Batch :  10   Loss :  0.056293428  Accuracy :  98.75500000000001  Class Accuracy :  9.621212121212123  Car class accuracy  9.621212121212123
Iter :  123 Batch :  11   Loss :  0.14976865  Accuracy :  97.33000000000001  Class Accuracy :  9.866666666666667  Car class accuracy  9.866666666666667
Iter :  123 Batch :  12   Loss :  0.2541445  Accuracy :  91.445  Class Accuracy :  16.488222698072803  Car class accuracy  16.488222698072803
Iter :  123 Batch :  13   Loss :  0.33386153  Accuracy :  92.73  Class Accuracy :  13.963027151935298  Car class accuracy  13.963027151935298
Iter :  123 Batch :  14   Loss :  0.09918784  Accuracy :  98.07000000000001  Class Accuracy :  11.023622047244094  Car class accuracy  11.023622047244094
Iter :  123 Batch :  15   Loss :  0.4026949  Accuracy :  92.435  Class Accuracy :  13.844647519582246  Car class accuracy  13.844647519582246
Iter :  123 Batch :  16   Loss :  0.17024386  Accuracy :  95.265  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 124 loss : 0.39539862 Accuracy: 92.61890840056954 Class Accuracy : 13.484478353070614
Iter :  124 Batch :  0   Loss :  0.21279612  Accuracy :  94.66499999999999  Class Accuracy :  13.71308016877637  Car class accuracy  13.71308016877637
Iter :  124 Batch :  1   Loss :  0.6042087  Accuracy :  91.61  Class Accuracy :  14.739195230998508  Car class accuracy  14.739195230998508
Iter :  124 Batch :  2   Loss :  0.068714134  Accuracy :  98.245  Class Accuracy :  11.683673469387754  Car class accuracy  11.683673469387754
Iter :  124 Batch :  3   Loss :  0.18975691  Accuracy :  95.61500000000001  Class Accuracy :  10.965517241379311  Car class accuracy  10.965517241379311
Iter :  124 Batch :  4   Loss :  0.40182036  Accuracy :  87.97500000000001  Class Accuracy :  22.30769230769231  Car class accuracy  22.30769230769231
Iter :  124 Batch :  5   Loss :  0.2957847  Accuracy :  95.695  Class Accuracy :  11.596531497067076  Car class accuracy  11.596531497067076
Iter :  124 Batch :  6   Loss :  0.19482161  Accuracy :  95.91  Class Accuracy :  10.320855614973262  Car class accuracy  10.320855614973262
Iter :  124 Batch :  7   Loss :  0.3188754  Accuracy :  92.89500000000001  Class Accuracy :  13.706847764572721  Car class accuracy  13.706847764572721
Iter :  124 Batch :  8   Loss :  0.3166597  Accuracy :  93.14  Class Accuracy :  15.39845758354756  Car class accuracy  15.39845758354756
Iter :  124 Batch :  9   Loss :  0.5804626  Accuracy :  81.5  Class Accuracy :  22.260034904013963  Car class accuracy  22.260034904013963
Iter :  124 Batch :  10   Loss :  0.0659355  Accuracy :  99.53  Class Accuracy :  5.214285714285714  Car class accuracy  5.214285714285714
Iter :  124 Batch :  11   Loss :  0.16385986  Accuracy :  95.71  Class Accuracy :  11.328671328671328  Car class accuracy  11.328671328671328
Iter :  124 Batch :  12   Loss :  0.5769909  Accuracy :  86.36  Class Accuracy :  18.98230088495575  Car class accuracy  18.98230088495575
Iter :  124 Batch :  13   Loss :  0.3997906  Accuracy :  94.20500000000001  Class Accuracy :  11.855726872246697  Car class accuracy  11.855726872246697
Iter :  124 Batch :  14   Loss :  0.112219214  Accuracy :  98.96000000000001  Class Accuracy :  9.087301587301587  Car class accuracy  9.087301587301587
Iter :  124 Batch :  15   Loss :  0.5933528  Accuracy :  94.07  Class Accuracy :  10.910335386721423  Car class accuracy  10.910335386721423
Iter :  124 Batch :  16   Loss :  0.042538375  Accuracy :  99.8  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 125 loss : 0.3946532 Accuracy: 92.62896657250471 Class Accuracy : 13.477338228567032
Iter :  125 Batch :  0   Loss :  0.22859229  Accuracy :  94.94500000000001  Class Accuracy :  13.548057259713703  Car class accuracy  13.548057259713703
Iter :  125 Batch :  1   Loss :  0.29723763  Accuracy :  93.2  Class Accuracy :  15.366739288307915  Car class accuracy  15.366739288307915
Iter :  125 Batch :  2   Loss :  0.074721046  Accuracy :  98.725  Class Accuracy :  10.373831775700934  Car class accuracy  10.373831775700934
Iter :  125 Batch :  3   Loss :  0.15994851  Accuracy :  96.135  Class Accuracy :  12.781954887218044  Car class accuracy  12.781954887218044
Iter :  125 Batch :  4   Loss :  0.38434985  Accuracy :  85.435  Class Accuracy :  18.125  Car class accuracy  18.125
Iter :  125 Batch :  5   Loss :  0.32134935  Accuracy :  96.035  Class Accuracy :  11.50889121338912  Car class accuracy  11.50889121338912
Iter :  125 Batch :  6   Loss :  0.10811648  Accuracy :  97.76  Class Accuracy :  13.014354066985645  Car class accuracy  13.014354066985645
Iter :  125 Batch :  7   Loss :  0.62924355  Accuracy :  89.685  Class Accuracy :  14.346368715083798  Car class accuracy  14.346368715083798
Iter :  125 Batch :  8   Loss :  0.4173  Accuracy :  89.71000000000001  Class Accuracy :  17.989464442493414  Car class accuracy  17.989464442493414
Iter :  125 Batch :  9   Loss :  0.5300955  Accuracy :  82.295  Class Accuracy :  22.584085315832652  Car class accuracy  22.584085315832652
Iter :  125 Batch :  10   Loss :  0.10790134  Accuracy :  97.385  Class Accuracy :  11.07913669064748  Car class accuracy  11.07913669064748
Iter :  125 Batch :  11   Loss :  0.18865608  Accuracy :  96.095  Class Accuracy :  10.500000000000002  Car class accuracy  10.500000000000002
Iter :  125 Batch :  12   Loss :  0.31498292  Accuracy :  87.215  Class Accuracy :  21.519507186858316  Car class accuracy  21.519507186858316
Iter :  125 Batch :  13   Loss :  0.37299886  Accuracy :  88.395  Class Accuracy :  17.35797021511307  Car class accuracy  17.35797021511307
Iter :  125 Batch :  14   Loss :  0.34160027  Accuracy :  89.89  Class Accuracy :  22.378854625550662  Car class accuracy  22.378854625550662
Iter :  125 Batch :  15   Loss :  0.34739813  Accuracy :  93.99  Class Accuracy :  12.30880230880231  Car class accuracy  12.30880230880231
Iter :  125 Batch :  16   Loss :  0.07118066  Accuracy :  98.7  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 126 loss : 0.3938062 Accuracy: 92.62938813638486 Class Accuracy : 13.4846564294573
Iter :  126 Batch :  0   Loss :  0.33719778  Accuracy :  91.935  Class Accuracy :  14.895833333333334  Car class accuracy  14.895833333333334
Iter :  126 Batch :  1   Loss :  0.44430748  Accuracy :  92.635  Class Accuracy :  14.302325581395351  Car class accuracy  14.302325581395351
Iter :  126 Batch :  2   Loss :  0.07041216  Accuracy :  99.3  Class Accuracy :  8.96039603960396  Car class accuracy  8.96039603960396
Iter :  126 Batch :  3   Loss :  0.16072403  Accuracy :  97.76  Class Accuracy :  9.724137931034482  Car class accuracy  9.724137931034482
Iter :  126 Batch :  4   Loss :  0.2605586  Accuracy :  92.31  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  126 Batch :  5   Loss :  0.3414628  Accuracy :  98.17  Class Accuracy :  10.141028989292245  Car class accuracy  10.141028989292245
Iter :  126 Batch :  6   Loss :  0.16536082  Accuracy :  98.64500000000001  Class Accuracy :  10.379146919431278  Car class accuracy  10.379146919431278
Iter :  126 Batch :  7   Loss :  0.30979413  Accuracy :  92.07499999999999  Class Accuracy :  14.580265095729011  Car class accuracy  14.580265095729011
Iter :  126 Batch :  8   Loss :  0.3726585  Accuracy :  93.605  Class Accuracy :  13.939522998296422  Car class accuracy  13.939522998296422
Iter :  126 Batch :  9   Loss :  0.4680665  Accuracy :  91.19  Class Accuracy :  14.036617262423714  Car class accuracy  14.036617262423714
Iter :  126 Batch :  10   Loss :  0.09596053  Accuracy :  98.175  Class Accuracy :  10.416666666666668  Car class accuracy  10.416666666666668
Iter :  126 Batch :  11   Loss :  0.24764484  Accuracy :  96.085  Class Accuracy :  8.431372549019608  Car class accuracy  8.431372549019608
Iter :  126 Batch :  12   Loss :  0.39109161  Accuracy :  87.33999999999999  Class Accuracy :  22.45360824742268  Car class accuracy  22.45360824742268
Iter :  126 Batch :  13   Loss :  0.33833832  Accuracy :  94.62  Class Accuracy :  12.899728997289973  Car class accuracy  12.899728997289973
Iter :  126 Batch :  14   Loss :  0.15007776  Accuracy :  96.085  Class Accuracy :  12.655601659751037  Car class accuracy  12.655601659751037
Iter :  126 Batch :  15   Loss :  0.41195312  Accuracy :  93.62  Class Accuracy :  12.644903397734844  Car class accuracy  12.644903397734844
Iter :  126 Batch :  16   Loss :  0.056361455  Accuracy :  99.815  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 127 loss : 0.39284575 Accuracy: 92.64730537534754 Class Accuracy : 13.471320931944625
Iter :  127 Batch :  0   Loss :  0.24918139  Accuracy :  94.865  Class Accuracy :  14.291497975708504  Car class accuracy  14.291497975708504
Iter :  127 Batch :  1   Loss :  0.25173837  Accuracy :  95.67999999999999  Class Accuracy :  12.914608327452365  Car class accuracy  12.914608327452365
Iter :  127 Batch :  2   Loss :  0.047308486  Accuracy :  99.38  Class Accuracy :  10.104712041884815  Car class accuracy  10.104712041884815
Iter :  127 Batch :  3   Loss :  0.13824502  Accuracy :  97.54  Class Accuracy :  9.51388888888889  Car class accuracy  9.51388888888889
Iter :  127 Batch :  4   Loss :  0.18066528  Accuracy :  97.885  Class Accuracy :  3.4999999999999996  Car class accuracy  3.4999999999999996
Iter :  127 Batch :  5   Loss :  0.26748833  Accuracy :  95.645  Class Accuracy :  12.666225603704929  Car class accuracy  12.666225603704929
Iter :  127 Batch :  6   Loss :  0.14500149  Accuracy :  98.52499999999999  Class Accuracy :  9.390862944162437  Car class accuracy  9.390862944162437
Iter :  127 Batch :  7   Loss :  0.39817008  Accuracy :  91.29  Class Accuracy :  14.282352941176471  Car class accuracy  14.282352941176471
Iter :  127 Batch :  8   Loss :  0.3093265  Accuracy :  93.51  Class Accuracy :  14.804051078819905  Car class accuracy  14.804051078819905
Iter :  127 Batch :  9   Loss :  0.4371832  Accuracy :  93.07  Class Accuracy :  12.125  Car class accuracy  12.125
Iter :  127 Batch :  10   Loss :  0.083020225  Accuracy :  99.345  Class Accuracy :  9.044117647058822  Car class accuracy  9.044117647058822
Iter :  127 Batch :  11   Loss :  0.11350067  Accuracy :  98.85000000000001  Class Accuracy :  8.91891891891892  Car class accuracy  8.91891891891892
Iter :  127 Batch :  12   Loss :  0.22960337  Accuracy :  96.04  Class Accuracy :  12.91220556745182  Car class accuracy  12.91220556745182
Iter :  127 Batch :  13   Loss :  0.36495405  Accuracy :  95.665  Class Accuracy :  11.806116560877092  Car class accuracy  11.806116560877092
Iter :  127 Batch :  14   Loss :  0.11681391  Accuracy :  98.935  Class Accuracy :  9.642857142857144  Car class accuracy  9.642857142857144
Iter :  127 Batch :  15   Loss :  0.32620522  Accuracy :  96.93  Class Accuracy :  9.838383838383837  Car class accuracy  9.838383838383837
Iter :  127 Batch :  16   Loss :  0.026439844  Accuracy :  99.935  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 128 loss : 0.3914694 Accuracy: 92.6786091954023 Class Accuracy : 13.446835112925905
Iter :  128 Batch :  0   Loss :  0.21001837  Accuracy :  95.84  Class Accuracy :  13.138461538461538  Car class accuracy  13.138461538461538
Iter :  128 Batch :  1   Loss :  0.25281665  Accuracy :  96.775  Class Accuracy :  11.109478324761204  Car class accuracy  11.109478324761204
Iter :  128 Batch :  2   Loss :  0.046088945  Accuracy :  99.465  Class Accuracy :  10.253807106598984  Car class accuracy  10.253807106598984
Iter :  128 Batch :  3   Loss :  0.12345014  Accuracy :  98.015  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  128 Batch :  4   Loss :  0.21804407  Accuracy :  95.565  Class Accuracy :  16.25  Car class accuracy  16.25
Iter :  128 Batch :  5   Loss :  0.35140648  Accuracy :  97.355  Class Accuracy :  9.862230309331947  Car class accuracy  9.862230309331947
Iter :  128 Batch :  6   Loss :  0.15264958  Accuracy :  96.595  Class Accuracy :  14.368932038834952  Car class accuracy  14.368932038834952
Iter :  128 Batch :  7   Loss :  0.29436874  Accuracy :  94.255  Class Accuracy :  12.405812701829925  Car class accuracy  12.405812701829925
Iter :  128 Batch :  8   Loss :  0.3464095  Accuracy :  94.16499999999999  Class Accuracy :  13.146002317497102  Car class accuracy  13.146002317497102
Iter :  128 Batch :  9   Loss :  0.30108514  Accuracy :  94.69999999999999  Class Accuracy :  12.156505914467699  Car class accuracy  12.156505914467699
Iter :  128 Batch :  10   Loss :  0.060339734  Accuracy :  99.18  Class Accuracy :  9.338235294117647  Car class accuracy  9.338235294117647
Iter :  128 Batch :  11   Loss :  0.13542736  Accuracy :  99.03999999999999  Class Accuracy :  6.341463414634147  Car class accuracy  6.341463414634147
Iter :  128 Batch :  12   Loss :  0.11830162  Accuracy :  97.78  Class Accuracy :  11.789473684210524  Car class accuracy  11.789473684210524
Iter :  128 Batch :  13   Loss :  0.21684356  Accuracy :  95.19999999999999  Class Accuracy :  12.832876712328767  Car class accuracy  12.832876712328767
Iter :  128 Batch :  14   Loss :  0.087837406  Accuracy :  98.48  Class Accuracy :  10.657894736842106  Car class accuracy  10.657894736842106
Iter :  128 Batch :  15   Loss :  0.27111524  Accuracy :  96.685  Class Accuracy :  10.730563002680967  Car class accuracy  10.730563002680967
Iter :  128 Batch :  16   Loss :  0.012629561  Accuracy :  100.0  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 129 loss : 0.3898927 Accuracy: 92.71216697080293 Class Accuracy : 13.426664282714617
Iter :  129 Batch :  0   Loss :  0.17389517  Accuracy :  96.635  Class Accuracy :  12.020304568527921  Car class accuracy  12.020304568527921
Iter :  129 Batch :  1   Loss :  0.23945181  Accuracy :  94.985  Class Accuracy :  14.169741697416974  Car class accuracy  14.169741697416974
Iter :  129 Batch :  2   Loss :  0.035323277  Accuracy :  99.345  Class Accuracy :  10.54726368159204  Car class accuracy  10.54726368159204
Iter :  129 Batch :  3   Loss :  0.108692884  Accuracy :  98.99  Class Accuracy :  9.93421052631579  Car class accuracy  9.93421052631579
Iter :  129 Batch :  4   Loss :  0.1614734  Accuracy :  96.785  Class Accuracy :  10.476190476190476  Car class accuracy  10.476190476190476
Iter :  129 Batch :  5   Loss :  0.24545728  Accuracy :  97.765  Class Accuracy :  10.525456030492785  Car class accuracy  10.525456030492785/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  129 Batch :  6   Loss :  0.11334324  Accuracy :  97.375  Class Accuracy :  13.365853658536587  Car class accuracy  13.365853658536587
Iter :  129 Batch :  7   Loss :  0.2521509  Accuracy :  94.435  Class Accuracy :  12.905516111414528  Car class accuracy  12.905516111414528
Iter :  129 Batch :  8   Loss :  0.22751932  Accuracy :  95.125  Class Accuracy :  13.506261180679784  Car class accuracy  13.506261180679784
Iter :  129 Batch :  9   Loss :  0.31680778  Accuracy :  93.16  Class Accuracy :  14.339796860572484  Car class accuracy  14.339796860572484
Iter :  129 Batch :  10   Loss :  0.054342475  Accuracy :  99.2  Class Accuracy :  9.673202614379086  Car class accuracy  9.673202614379086
Iter :  129 Batch :  11   Loss :  0.11084746  Accuracy :  98.555  Class Accuracy :  9.166666666666666  Car class accuracy  9.166666666666666
Iter :  129 Batch :  12   Loss :  0.12921537  Accuracy :  95.99499999999999  Class Accuracy :  14.231578947368423  Car class accuracy  14.231578947368423
Iter :  129 Batch :  13   Loss :  0.17751384  Accuracy :  95.405  Class Accuracy :  13.04372842347526  Car class accuracy  13.04372842347526
Iter :  129 Batch :  14   Loss :  0.08612649  Accuracy :  97.995  Class Accuracy :  11.336405529953916  Car class accuracy  11.336405529953916
Iter :  129 Batch :  15   Loss :  0.26906455  Accuracy :  97.28999999999999  Class Accuracy :  10.055983205038487  Car class accuracy  10.055983205038487
Iter :  129 Batch :  16   Loss :  0.0150197325  Accuracy :  99.81  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 130 loss : 0.38812178 Accuracy: 92.74509732910819 Class Accuracy : 13.409029546350865
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__130_0.ckpt
saved prediction of 0 accuracy :  0.96  class accuracy :  0.09559698532328441  car_class_accuracy :  0.09559698532328441
saved prediction of 1 accuracy :  0.9911  class accuracy :  0.03413461538461539  car_class_accuracy :  0.03413461538461539
saved prediction of 2 accuracy :  0.953  class accuracy :  0.07777777777777778  car_class_accuracy :  0.07777777777777778
saved prediction of 3 accuracy :  0.94135  class accuracy :  0.07647058823529411  car_class_accuracy :  0.07647058823529411
saved prediction of 4 accuracy :  0.9888  class accuracy :  0.04090909090909091  car_class_accuracy :  0.04090909090909091
saved prediction of 5 accuracy :  0.96505  class accuracy :  0.08489113117365905  car_class_accuracy :  0.08489113117365905
saved prediction of 6 accuracy :  0.98195  class accuracy :  0.07974358974358975  car_class_accuracy :  0.07974358974358975
saved prediction of 7 accuracy :  0.9113  class accuracy :  0.026362297496318115  car_class_accuracy :  0.026362297496318115
saved prediction of 8 accuracy :  0.9938  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 9 accuracy :  0.9702  class accuracy :  0.0779510022271715  car_class_accuracy :  0.0779510022271715
saved prediction of 10 accuracy :  0.9911  class accuracy :  0.08450704225352113  car_class_accuracy :  0.08450704225352113
saved prediction of 11 accuracy :  0.9754  class accuracy :  0.10198675496688743  car_class_accuracy :  0.10198675496688743
saved prediction of 12 accuracy :  0.96275  class accuracy :  0.09035580524344569  car_class_accuracy :  0.09035580524344569
saved prediction of 13 accuracy :  0.96655  class accuracy :  0.07013081395348837  car_class_accuracy :  0.07013081395348837
saved prediction of 14 accuracy :  0.96305  class accuracy :  0.012957746478873239  car_class_accuracy :  0.012957746478873239
saved prediction of 15 accuracy :  0.971  class accuracy :  0.09152787834902246  car_class_accuracy :  0.09152787834902246
saved prediction of 16 accuracy :  0.9779  class accuracy :  0.0865546218487395  car_class_accuracy :  0.0865546218487395
saved prediction of 17 accuracy :  0.962  class accuracy :  0.08485023041474654  car_class_accuracy :  0.08485023041474654
saved prediction of 18 accuracy :  0.99105  class accuracy :  0.031746031746031744  car_class_accuracy :  0.031746031746031744
saved prediction of 19 accuracy :  0.9481  class accuracy :  0.08354307841239109  car_class_accuracy :  0.08354307841239109
saved prediction of 20 accuracy :  0.9439  class accuracy :  0.0780502043199066  car_class_accuracy :  0.0780502043199066
saved prediction of 21 accuracy :  0.9899  class accuracy :  0.052941176470588235  car_class_accuracy :  0.052941176470588235
saved prediction of 22 accuracy :  0.968  class accuracy :  0.08562982005141388  car_class_accuracy :  0.08562982005141388
saved prediction of 23 accuracy :  0.98235  class accuracy :  0.06905370843989769  car_class_accuracy :  0.06905370843989769
saved prediction of 24 accuracy :  0.8801  class accuracy :  0.02123589995095635  car_class_accuracy :  0.02123589995095635
saved prediction of 25 accuracy :  0.9929  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 26 accuracy :  0.9753  class accuracy :  0.08054607508532423  car_class_accuracy :  0.08054607508532423
saved prediction of 27 accuracy :  0.991  class accuracy :  0.10300751879699248  car_class_accuracy :  0.10300751879699248
saved prediction of 28 accuracy :  0.96405  class accuracy :  0.12820512820512822  car_class_accuracy :  0.12820512820512822
saved prediction of 29 accuracy :  0.9668  class accuracy :  0.08138401559454192  car_class_accuracy :  0.08138401559454192
saved prediction of 30 accuracy :  0.96195  class accuracy :  0.06722972972972972  car_class_accuracy :  0.06722972972972972
saved prediction of 31 accuracy :  0.9534  class accuracy :  0.02774327122153209  car_class_accuracy :  0.02774327122153209
saved prediction of 32 accuracy :  0.96325  class accuracy :  0.09591381872213968  car_class_accuracy :  0.09591381872213968
saved prediction of 33 accuracy :  0.97075  class accuracy :  0.10663716814159292  car_class_accuracy :  0.10663716814159292
saved prediction of 34 accuracy :  0.9611  class accuracy :  0.09484581497797356  car_class_accuracy :  0.09484581497797356
saved prediction of 35 accuracy :  0.99115  class accuracy :  0.031443298969072164  car_class_accuracy :  0.031443298969072164
saved prediction of 36 accuracy :  0.95485  class accuracy :  0.07853492333901194  car_class_accuracy :  0.07853492333901194
saved prediction of 37 accuracy :  0.93545  class accuracy :  0.07581627006087438  car_class_accuracy :  0.07581627006087438
saved prediction of 38 accuracy :  0.9895  class accuracy :  0.05  car_class_accuracy :  0.05
saved prediction of 39 accuracy :  0.96755  class accuracy :  0.08579927573719606  car_class_accuracy :  0.08579927573719606
saved prediction of 40 accuracy :  0.9806  class accuracy :  0.07739361702127659  car_class_accuracy :  0.07739361702127659
saved prediction of 41 accuracy :  0.9043  class accuracy :  0.03271162123385939  car_class_accuracy :  0.03271162123385939
saved prediction of 42 accuracy :  0.9926  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 43 accuracy :  0.9768  class accuracy :  0.07989661114302125  car_class_accuracy :  0.07989661114302125
saved prediction of 44 accuracy :  0.9906  class accuracy :  0.09022556390977443  car_class_accuracy :  0.09022556390977443
saved prediction of 45 accuracy :  0.97375  class accuracy :  0.10214285714285713  car_class_accuracy :  0.10214285714285713
saved prediction of 46 accuracy :  0.9607  class accuracy :  0.08169398907103825  car_class_accuracy :  0.08169398907103825
saved prediction of 47 accuracy :  0.9631  class accuracy :  0.06666666666666667  car_class_accuracy :  0.06666666666666667
saved prediction of 48 accuracy :  0.9507  class accuracy :  0.021058091286307055  car_class_accuracy :  0.021058091286307055
saved prediction of 49 accuracy :  0.96665  class accuracy :  0.08870262390670554  car_class_accuracy :  0.08870262390670554
saved prediction of 50 accuracy :  0.9817  class accuracy :  0.08666666666666667  car_class_accuracy :  0.08666666666666667
saved prediction of 51 accuracy :  0.9619  class accuracy :  0.08979947689625109  car_class_accuracy :  0.08979947689625109
saved prediction of 52 accuracy :  0.99185  class accuracy :  0.04153846153846154  car_class_accuracy :  0.04153846153846154
saved prediction of 53 accuracy :  0.94395  class accuracy :  0.08360881542699725  car_class_accuracy :  0.08360881542699725
saved prediction of 54 accuracy :  0.944  class accuracy :  0.07847301951779564  car_class_accuracy :  0.07847301951779564
saved prediction of 55 accuracy :  0.99075  class accuracy :  0.04285714285714286  car_class_accuracy :  0.04285714285714286
saved prediction of 56 accuracy :  0.965  class accuracy :  0.0837012320328542  car_class_accuracy :  0.0837012320328542
saved prediction of 57 accuracy :  0.98175  class accuracy :  0.07384196185286104  car_class_accuracy :  0.07384196185286104
saved prediction of 58 accuracy :  0.9205  class accuracy :  0.026627218934911247  car_class_accuracy :  0.026627218934911247
saved prediction of 59 accuracy :  0.9944  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 60 accuracy :  0.97355  class accuracy :  0.07891891891891892  car_class_accuracy :  0.07891891891891892
saved prediction of 61 accuracy :  0.9904  class accuracy :  0.09193548387096774  car_class_accuracy :  0.09193548387096774
saved prediction of 62 accuracy :  0.96765  class accuracy :  0.11655172413793105  car_class_accuracy :  0.11655172413793105
saved prediction of 63 accuracy :  0.9595  class accuracy :  0.08613953488372092  car_class_accuracy :  0.08613953488372092
saved prediction of 64 accuracy :  0.96295  class accuracy :  0.06339779005524862  car_class_accuracy :  0.06339779005524862
saved prediction of 65 accuracy :  0.9501  class accuracy :  0.02401656314699793  car_class_accuracy :  0.02401656314699793
saved prediction of 66 accuracy :  0.9713  class accuracy :  0.09145546705286026  car_class_accuracy :  0.09145546705286026
saved prediction of 67 accuracy :  0.9663  class accuracy :  0.09774127310061602  car_class_accuracy :  0.09774127310061602
saved prediction of 68 accuracy :  0.96235  class accuracy :  0.09253988788270806  car_class_accuracy :  0.09253988788270806
saved prediction of 69 accuracy :  0.9909  class accuracy :  0.0375  car_class_accuracy :  0.0375
saved prediction of 70 accuracy :  0.95485  class accuracy :  0.0732367758186398  car_class_accuracy :  0.0732367758186398
saved prediction of 71 accuracy :  0.9411  class accuracy :  0.07565266742338253  car_class_accuracy :  0.07565266742338253
saved prediction of 72 accuracy :  0.9876  class accuracy :  0.047058823529411764  car_class_accuracy :  0.047058823529411764
saved prediction of 73 accuracy :  0.96895  class accuracy :  0.08688436830835118  car_class_accuracy :  0.08688436830835118
saved prediction of 74 accuracy :  0.9816  class accuracy :  0.07657894736842105  car_class_accuracy :  0.07657894736842105
saved prediction of 75 accuracy :  0.90205  class accuracy :  0.0342485549132948  car_class_accuracy :  0.0342485549132948
saved prediction of 76 accuracy :  0.99315  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 77 accuracy :  0.97495  class accuracy :  0.08133107727016356  car_class_accuracy :  0.08133107727016356
saved prediction of 78 accuracy :  0.9906  class accuracy :  0.0875  car_class_accuracy :  0.0875
saved prediction of 79 accuracy :  0.9648  class accuracy :  0.12980132450331125  car_class_accuracy :  0.12980132450331125
saved prediction of 80 accuracy :  0.9622  class accuracy :  0.08305084745762711  car_class_accuracy :  0.08305084745762711
saved prediction of 81 accuracy :  0.9623  class accuracy :  0.07331460674157303  car_class_accuracy :  0.07331460674157303
saved prediction of 82 accuracy :  0.95585  class accuracy :  0.01868131868131868  car_class_accuracy :  0.01868131868131868
saved prediction of 83 accuracy :  0.96265  class accuracy :  0.08509189925119129  car_class_accuracy :  0.08509189925119129
saved prediction of 84 accuracy :  0.97125  class accuracy :  0.09911894273127754  car_class_accuracy :  0.09911894273127754
saved prediction of 85 accuracy :  0.96135  class accuracy :  0.09607508532423208  car_class_accuracy :  0.09607508532423208
saved prediction of 86 accuracy :  0.99315  class accuracy :  0.042134831460674156  car_class_accuracy :  0.042134831460674156
saved prediction of 87 accuracy :  0.94585  class accuracy :  0.08444767441860465  car_class_accuracy :  0.08444767441860465
saved prediction of 88 accuracy :  0.94075  class accuracy :  0.07237204182718768  car_class_accuracy :  0.07237204182718768
saved prediction of 89 accuracy :  0.98645  class accuracy :  0.06999999999999999  car_class_accuracy :  0.06999999999999999
saved prediction of 90 accuracy :  0.97  class accuracy :  0.0828437917222964  car_class_accuracy :  0.0828437917222964
saved prediction of 91 accuracy :  0.98235  class accuracy :  0.09475308641975308  car_class_accuracy :  0.09475308641975308
saved prediction of 92 accuracy :  0.8864  class accuracy :  0.023490613901572803  car_class_accuracy :  0.023490613901572803
saved prediction of 93 accuracy :  0.99315  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 94 accuracy :  0.97125  class accuracy :  0.07552854122621563  car_class_accuracy :  0.07552854122621563
saved prediction of 95 accuracy :  0.98955  class accuracy :  0.09117647058823529  car_class_accuracy :  0.09117647058823529
saved prediction of 96 accuracy :  0.97045  class accuracy :  0.11897810218978103  car_class_accuracy :  0.11897810218978103
saved prediction of 97 accuracy :  0.95235  class accuracy :  0.08565705128205128  car_class_accuracy :  0.08565705128205128
saved prediction of 98 accuracy :  0.9617  class accuracy :  0.06638946638946638  car_class_accuracy :  0.06638946638946638
saved prediction of 99 accuracy :  0.95135  class accuracy :  0.02231404958677686  car_class_accuracy :  0.02231404958677686
Iter :  130 Batch :  0   Loss :  0.41231415  Accuracy :  95.185  Class Accuracy :  11.405919661733614  Car class accuracy  11.405919661733614
Iter :  130 Batch :  1   Loss :  0.18859594  Accuracy :  95.89  Class Accuracy :  13.783382789317505  Car class accuracy  13.783382789317505
Iter :  130 Batch :  2   Loss :  0.034089237  Accuracy :  99.17  Class Accuracy :  11.649484536082474  Car class accuracy  11.649484536082474
Iter :  130 Batch :  3   Loss :  0.15022185  Accuracy :  97.44  Class Accuracy :  11.323529411764707  Car class accuracy  11.323529411764707
Iter :  130 Batch :  4   Loss :  0.22099018  Accuracy :  93.815  Class Accuracy :  14.210526315789473  Car class accuracy  14.210526315789473
Iter :  130 Batch :  5   Loss :  0.26599014  Accuracy :  95.77  Class Accuracy :  11.787365177195685  Car class accuracy  11.787365177195685
Iter :  130 Batch :  6   Loss :  0.13279726  Accuracy :  97.565  Class Accuracy :  13.21608040201005  Car class accuracy  13.21608040201005
Iter :  130 Batch :  7   Loss :  0.26446465  Accuracy :  94.375  Class Accuracy :  13.729246487867178  Car class accuracy  13.729246487867178
Iter :  130 Batch :  8   Loss :  0.6948414  Accuracy :  93.75  Class Accuracy :  11.402607664954562  Car class accuracy  11.402607664954562
Iter :  130 Batch :  9   Loss :  0.31692013  Accuracy :  94.47  Class Accuracy :  12.676950998185117  Car class accuracy  12.676950998185117
Iter :  130 Batch :  10   Loss :  0.089809604  Accuracy :  98.395  Class Accuracy :  11.493506493506493  Car class accuracy  11.493506493506493
Iter :  130 Batch :  11   Loss :  0.11104718  Accuracy :  98.375  Class Accuracy :  9.879518072289157  Car class accuracy  9.879518072289157
Iter :  130 Batch :  12   Loss :  0.27236617  Accuracy :  90.95  Class Accuracy :  19.773755656108598  Car class accuracy  19.773755656108598
Iter :  130 Batch :  13   Loss :  0.30372158  Accuracy :  91.05  Class Accuracy :  15.721153846153847  Car class accuracy  15.721153846153847
Iter :  130 Batch :  14   Loss :  0.23006946  Accuracy :  91.765  Class Accuracy :  16.008230452674894  Car class accuracy  16.008230452674894
Iter :  130 Batch :  15   Loss :  0.44794917  Accuracy :  90.735  Class Accuracy :  14.67184191954834  Car class accuracy  14.67184191954834
Iter :  130 Batch :  16   Loss :  0.052615624  Accuracy :  98.86500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 131 loss : 0.38703945 Accuracy: 92.7634703504043 Class Accuracy : 13.402191989116911
Iter :  131 Batch :  0   Loss :  0.35789254  Accuracy :  89.885  Class Accuracy :  17.397727272727273  Car class accuracy  17.397727272727273
Iter :  131 Batch :  1   Loss :  0.32807633  Accuracy :  92.39500000000001  Class Accuracy :  16.24005784526392  Car class accuracy  16.24005784526392
Iter :  131 Batch :  2   Loss :  0.09900279  Accuracy :  98.82  Class Accuracy :  6.25  Car class accuracy  6.25
Iter :  131 Batch :  3   Loss :  0.13754426  Accuracy :  98.37  Class Accuracy :  8.484848484848486  Car class accuracy  8.484848484848486
Iter :  131 Batch :  4   Loss :  0.370017  Accuracy :  88.74499999999999  Class Accuracy :  13.999999999999998  Car class accuracy  13.999999999999998
Iter :  131 Batch :  5   Loss :  1.9696305  Accuracy :  94.89  Class Accuracy :  8.267592300410223  Car class accuracy  8.267592300410223
Iter :  131 Batch :  6   Loss :  0.20926225  Accuracy :  94.69  Class Accuracy :  12.435233160621761  Car class accuracy  12.435233160621761
Iter :  131 Batch :  7   Loss :  0.33991498  Accuracy :  90.86999999999999  Class Accuracy :  15.789473684210526  Car class accuracy  15.789473684210526
Iter :  131 Batch :  8   Loss :  0.42697603  Accuracy :  87.075  Class Accuracy :  19.538028169014083  Car class accuracy  19.538028169014083
Iter :  131 Batch :  9   Loss :  0.55286103  Accuracy :  79.925  Class Accuracy :  23.656387665198235  Car class accuracy  23.656387665198235
Iter :  131 Batch :  10   Loss :  0.3480898  Accuracy :  88.115  Class Accuracy :  21.079136690647484  Car class accuracy  21.079136690647484
Iter :  131 Batch :  11   Loss :  0.37620863  Accuracy :  85.005  Class Accuracy :  22.931034482758623  Car class accuracy  22.931034482758623
Iter :  131 Batch :  12   Loss :  0.4435672  Accuracy :  86.17  Class Accuracy :  20.51020408163265  Car class accuracy  20.51020408163265
Iter :  131 Batch :  13   Loss :  0.42698553  Accuracy :  90.385  Class Accuracy :  15.909342177998894  Car class accuracy  15.909342177998894
Iter :  131 Batch :  14   Loss :  0.45169502  Accuracy :  83.12  Class Accuracy :  24.870689655172416  Car class accuracy  24.870689655172416
Iter :  131 Batch :  15   Loss :  0.75587416  Accuracy :  86.30499999999999  Class Accuracy :  16.807387862796837  Car class accuracy  16.807387862796837
Iter :  131 Batch :  16   Loss :  0.28378707  Accuracy :  89.07000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 132 loss : 0.387618 Accuracy: 92.73977708426216 Class Accuracy : 13.41838899300381
Iter :  132 Batch :  0   Loss :  0.34971705  Accuracy :  93.46  Class Accuracy :  13.344407530454042  Car class accuracy  13.344407530454042
Iter :  132 Batch :  1   Loss :  0.4668831  Accuracy :  93.675  Class Accuracy :  13.498935415188077  Car class accuracy  13.498935415188077
Iter :  132 Batch :  2   Loss :  0.18907532  Accuracy :  97.35000000000001  Class Accuracy :  13.869346733668342  Car class accuracy  13.869346733668342
Iter :  132 Batch :  3   Loss :  0.21773012  Accuracy :  94.99499999999999  Class Accuracy :  12.206896551724137  Car class accuracy  12.206896551724137
Iter :  132 Batch :  4   Loss :  0.2524164  Accuracy :  91.08500000000001  Class Accuracy :  15.714285714285714  Car class accuracy  15.714285714285714
Iter :  132 Batch :  5   Loss :  0.91145176  Accuracy :  95.295  Class Accuracy :  9.941921858500526  Car class accuracy  9.941921858500526
Iter :  132 Batch :  6   Loss :  0.33620536  Accuracy :  96.465  Class Accuracy :  12.23404255319149  Car class accuracy  12.23404255319149
Iter :  132 Batch :  7   Loss :  0.86968946  Accuracy :  93.88499999999999  Class Accuracy :  9.601748421563865  Car class accuracy  9.601748421563865
Iter :  132 Batch :  8   Loss :  0.5549099  Accuracy :  96.54  Class Accuracy :  10.318221447253705  Car class accuracy  10.318221447253705
Iter :  132 Batch :  9   Loss :  0.49119306  Accuracy :  94.055  Class Accuracy :  10.649854510184287  Car class accuracy  10.649854510184287
Iter :  132 Batch :  10   Loss :  0.21658115  Accuracy :  96.405  Class Accuracy :  11.439393939393941  Car class accuracy  11.439393939393941
Iter :  132 Batch :  11   Loss :  0.2128411  Accuracy :  96.665  Class Accuracy :  13.401360544217686  Car class accuracy  13.401360544217686
Iter :  132 Batch :  12   Loss :  0.29616177  Accuracy :  96.1  Class Accuracy :  11.761006289308176  Car class accuracy  11.761006289308176
Iter :  132 Batch :  13   Loss :  0.37335476  Accuracy :  93.89  Class Accuracy :  12.860465116279068  Car class accuracy  12.860465116279068
Iter :  132 Batch :  14   Loss :  0.2572944  Accuracy :  96.41999999999999  Class Accuracy :  13.376068376068377  Car class accuracy  13.376068376068377
Iter :  132 Batch :  15   Loss :  0.41228086  Accuracy :  94.545  Class Accuracy :  10.629865534324132  Car class accuracy  10.629865534324132
Iter :  132 Batch :  16   Loss :  0.195013  Accuracy :  97.685  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 133 loss : 0.3876239 Accuracy: 92.75833407079647 Class Accuracy : 13.403670058337678
Iter :  133 Batch :  0   Loss :  0.3588086  Accuracy :  94.825  Class Accuracy :  12.064171122994653  Car class accuracy  12.064171122994653
Iter :  133 Batch :  1   Loss :  0.35393727  Accuracy :  95.685  Class Accuracy :  12.817843866171003  Car class accuracy  12.817843866171003
Iter :  133 Batch :  2   Loss :  0.12785387  Accuracy :  97.64  Class Accuracy :  13.705583756345177  Car class accuracy  13.705583756345177
Iter :  133 Batch :  3   Loss :  0.1829137  Accuracy :  97.275  Class Accuracy :  10.440251572327044  Car class accuracy  10.440251572327044
Iter :  133 Batch :  4   Loss :  0.351537  Accuracy :  91.97  Class Accuracy :  15.333333333333336  Car class accuracy  15.333333333333336
Iter :  133 Batch :  5   Loss :  0.31889945  Accuracy :  96.93  Class Accuracy :  9.93662441627752  Car class accuracy  9.93662441627752
Iter :  133 Batch :  6   Loss :  0.2360332  Accuracy :  95.78  Class Accuracy :  15.757575757575756  Car class accuracy  15.757575757575756
Iter :  133 Batch :  7   Loss :  0.40567017  Accuracy :  95.575  Class Accuracy :  10.269872423945044  Car class accuracy  10.269872423945044
Iter :  133 Batch :  8   Loss :  0.43500146  Accuracy :  95.44500000000001  Class Accuracy :  11.017736486486488  Car class accuracy  11.017736486486488
Iter :  133 Batch :  9   Loss :  0.39899653  Accuracy :  94.125  Class Accuracy :  11.543985637342908  Car class accuracy  11.543985637342908
Iter :  133 Batch :  10   Loss :  0.13584766  Accuracy :  98.045  Class Accuracy :  10.965517241379311  Car class accuracy  10.965517241379311
Iter :  133 Batch :  11   Loss :  0.15479349  Accuracy :  98.375  Class Accuracy :  10.123456790123457  Car class accuracy  10.123456790123457
Iter :  133 Batch :  12   Loss :  0.23577607  Accuracy :  97.43  Class Accuracy :  11.59235668789809  Car class accuracy  11.59235668789809
Iter :  133 Batch :  13   Loss :  0.28807163  Accuracy :  96.72500000000001  Class Accuracy :  10.41002277904328  Car class accuracy  10.41002277904328
Iter :  133 Batch :  14   Loss :  0.14087485  Accuracy :  99.03  Class Accuracy :  8.728813559322033  Car class accuracy  8.728813559322033
Iter :  133 Batch :  15   Loss :  0.47242567  Accuracy :  96.475  Class Accuracy :  7.272064186725018  Car class accuracy  7.272064186725018
Iter :  133 Batch :  16   Loss :  0.085046045  Accuracy :  99.75500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 134 loss : 0.38678634 Accuracy: 92.78652613087397 Class Accuracy : 13.38351934187986
Iter :  134 Batch :  0   Loss :  0.270536  Accuracy :  95.56  Class Accuracy :  13.011077542799596  Car class accuracy  13.011077542799596
Iter :  134 Batch :  1   Loss :  0.3786476  Accuracy :  96.26  Class Accuracy :  11.247327156094086  Car class accuracy  11.247327156094086
Iter :  134 Batch :  2   Loss :  0.06575343  Accuracy :  98.98  Class Accuracy :  10.954773869346734  Car class accuracy  10.954773869346734
Iter :  134 Batch :  3   Loss :  0.13421884  Accuracy :  98.495  Class Accuracy :  9.53020134228188  Car class accuracy  9.53020134228188
Iter :  134 Batch :  4   Loss :  0.106541894  Accuracy :  98.57000000000001  Class Accuracy :  7.857142857142857/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  Car class accuracy  7.857142857142857
Iter :  134 Batch :  5   Loss :  0.33630338  Accuracy :  96.85000000000001  Class Accuracy :  9.870259481037923  Car class accuracy  9.870259481037923
Iter :  134 Batch :  6   Loss :  0.19413379  Accuracy :  95.60499999999999  Class Accuracy :  12.946859903381641  Car class accuracy  12.946859903381641
Iter :  134 Batch :  7   Loss :  0.2693144  Accuracy :  96.22500000000001  Class Accuracy :  10.584170854271358  Car class accuracy  10.584170854271358
Iter :  134 Batch :  8   Loss :  0.58085144  Accuracy :  96.285  Class Accuracy :  9.941837921675067  Car class accuracy  9.941837921675067
Iter :  134 Batch :  9   Loss :  0.35988665  Accuracy :  93.645  Class Accuracy :  13.372582001682085  Car class accuracy  13.372582001682085
Iter :  134 Batch :  10   Loss :  0.108496115  Accuracy :  97.89  Class Accuracy :  10.930232558139535  Car class accuracy  10.930232558139535
Iter :  134 Batch :  11   Loss :  0.17451811  Accuracy :  96.63000000000001  Class Accuracy :  12.27848101265823  Car class accuracy  12.27848101265823
Iter :  134 Batch :  12   Loss :  0.16316792  Accuracy :  97.295  Class Accuracy :  11.48619957537155  Car class accuracy  11.48619957537155
Iter :  134 Batch :  13   Loss :  0.303203  Accuracy :  94.13  Class Accuracy :  12.845615922539  Car class accuracy  12.845615922539
Iter :  134 Batch :  14   Loss :  0.15969203  Accuracy :  96.95  Class Accuracy :  13.166666666666666  Car class accuracy  13.166666666666666
Iter :  134 Batch :  15   Loss :  0.28904748  Accuracy :  93.89999999999999  Class Accuracy :  13.14606741573034  Car class accuracy  13.14606741573034
Iter :  134 Batch :  16   Loss :  0.07696424  Accuracy :  98.935  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 135 loss : 0.38565117 Accuracy: 92.81478857890149 Class Accuracy : 13.364186154115632
Iter :  135 Batch :  0   Loss :  0.23698746  Accuracy :  95.205  Class Accuracy :  13.30168776371308  Car class accuracy  13.30168776371308
Iter :  135 Batch :  1   Loss :  0.24297944  Accuracy :  94.845  Class Accuracy :  14.214755295836376  Car class accuracy  14.214755295836376
Iter :  135 Batch :  2   Loss :  0.047546163  Accuracy :  99.605  Class Accuracy :  9.31578947368421  Car class accuracy  9.31578947368421
Iter :  135 Batch :  3   Loss :  0.13120593  Accuracy :  99.29  Class Accuracy :  7.968749999999999  Car class accuracy  7.968749999999999
Iter :  135 Batch :  4   Loss :  0.1558075  Accuracy :  97.085  Class Accuracy :  6.0  Car class accuracy  6.0
Iter :  135 Batch :  5   Loss :  0.2615874  Accuracy :  96.865  Class Accuracy :  11.294868386067536  Car class accuracy  11.294868386067536
Iter :  135 Batch :  6   Loss :  0.1349415  Accuracy :  97.16  Class Accuracy :  11.71875  Car class accuracy  11.71875
Iter :  135 Batch :  7   Loss :  0.2622547  Accuracy :  97.08  Class Accuracy :  10.455945779420825  Car class accuracy  10.455945779420825
Iter :  135 Batch :  8   Loss :  0.28367972  Accuracy :  96.935  Class Accuracy :  11.086309523809524  Car class accuracy  11.086309523809524
Iter :  135 Batch :  9   Loss :  0.34386566  Accuracy :  95.72  Class Accuracy :  10.932944606413994  Car class accuracy  10.932944606413994
Iter :  135 Batch :  10   Loss :  0.067923084  Accuracy :  99.29  Class Accuracy :  9.781021897810218  Car class accuracy  9.781021897810218
Iter :  135 Batch :  11   Loss :  0.14404805  Accuracy :  98.97  Class Accuracy :  6.787878787878789  Car class accuracy  6.787878787878789
Iter :  135 Batch :  12   Loss :  0.14832087  Accuracy :  96.86  Class Accuracy :  12.81512605042017  Car class accuracy  12.81512605042017
Iter :  135 Batch :  13   Loss :  0.21263081  Accuracy :  95.19  Class Accuracy :  12.811447811447813  Car class accuracy  12.811447811447813
Iter :  135 Batch :  14   Loss :  0.11388523  Accuracy :  97.38  Class Accuracy :  11.983805668016194  Car class accuracy  11.983805668016194
Iter :  135 Batch :  15   Loss :  0.30157518  Accuracy :  95.27  Class Accuracy :  11.72180958811614  Car class accuracy  11.72180958811614
Iter :  135 Batch :  16   Loss :  0.046470076  Accuracy :  99.885  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 136 loss : 0.38417113 Accuracy: 92.84714842059715 Class Accuracy : 13.34038681444132
Iter :  136 Batch :  0   Loss :  0.16987863  Accuracy :  96.155  Class Accuracy :  13.4375  Car class accuracy  13.4375
Iter :  136 Batch :  1   Loss :  0.19397146  Accuracy :  96.08  Class Accuracy :  13.845588235294118  Car class accuracy  13.845588235294118
Iter :  136 Batch :  2   Loss :  0.04648034  Accuracy :  99.485  Class Accuracy :  9.528795811518325  Car class accuracy  9.528795811518325
Iter :  136 Batch :  3   Loss :  0.10195425  Accuracy :  99.505  Class Accuracy :  8.473282442748092  Car class accuracy  8.473282442748092
Iter :  136 Batch :  4   Loss :  0.18030655  Accuracy :  95.745  Class Accuracy :  9.411764705882353  Car class accuracy  9.411764705882353
Iter :  136 Batch :  5   Loss :  0.24190432  Accuracy :  95.895  Class Accuracy :  11.790075344245258  Car class accuracy  11.790075344245258
Iter :  136 Batch :  6   Loss :  0.11756618  Accuracy :  97.8  Class Accuracy :  10.174418604651162  Car class accuracy  10.174418604651162
Iter :  136 Batch :  7   Loss :  0.22418442  Accuracy :  94.08999999999999  Class Accuracy :  13.85157096424702  Car class accuracy  13.85157096424702
Iter :  136 Batch :  8   Loss :  0.6366266  Accuracy :  95.37  Class Accuracy :  9.427141268075639  Car class accuracy  9.427141268075639
Iter :  136 Batch :  9   Loss :  0.27391005  Accuracy :  97.10499999999999  Class Accuracy :  10.160857908847184  Car class accuracy  10.160857908847184
Iter :  136 Batch :  10   Loss :  0.070952356  Accuracy :  99.14  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  136 Batch :  11   Loss :  0.14868245  Accuracy :  97.63  Class Accuracy :  10.54878048780488  Car class accuracy  10.54878048780488
Iter :  136 Batch :  12   Loss :  0.23040034  Accuracy :  93.255  Class Accuracy :  17.700650759219087  Car class accuracy  17.700650759219087
Iter :  136 Batch :  13   Loss :  0.34536755  Accuracy :  93.14  Class Accuracy :  13.965616045845271  Car class accuracy  13.965616045845271
Iter :  136 Batch :  14   Loss :  0.13287783  Accuracy :  97.22  Class Accuracy :  11.931330472103003  Car class accuracy  11.931330472103003
Iter :  136 Batch :  15   Loss :  0.36292222  Accuracy :  93.755  Class Accuracy :  12.685248130523455  Car class accuracy  12.685248130523455
Iter :  136 Batch :  16   Loss :  0.1497028  Accuracy :  96.485  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 137 loss : 0.38292402 Accuracy: 92.8726868556701 Class Accuracy : 13.323267418107774
Iter :  137 Batch :  0   Loss :  0.2882252  Accuracy :  92.605  Class Accuracy :  15.676810073452257  Car class accuracy  15.676810073452257
Iter :  137 Batch :  1   Loss :  0.26230255  Accuracy :  93.94500000000001  Class Accuracy :  15.068592057761734  Car class accuracy  15.068592057761734
Iter :  137 Batch :  2   Loss :  0.06329505  Accuracy :  98.47  Class Accuracy :  13.535353535353536  Car class accuracy  13.535353535353536
Iter :  137 Batch :  3   Loss :  0.19454366  Accuracy :  97.26  Class Accuracy :  10.571428571428571  Car class accuracy  10.571428571428571
Iter :  137 Batch :  4   Loss :  0.44498307  Accuracy :  86.67  Class Accuracy :  20.0  Car class accuracy  20.0
Iter :  137 Batch :  5   Loss :  0.20657372  Accuracy :  96.76  Class Accuracy :  11.354971664090673  Car class accuracy  11.354971664090673
Iter :  137 Batch :  6   Loss :  0.20442915  Accuracy :  97.745  Class Accuracy :  8.925233644859814  Car class accuracy  8.925233644859814
Iter :  137 Batch :  7   Loss :  0.298433  Accuracy :  95.8  Class Accuracy :  11.87007874015748  Car class accuracy  11.87007874015748
Iter :  137 Batch :  8   Loss :  0.4581477  Accuracy :  97.365  Class Accuracy :  9.877425944841676  Car class accuracy  9.877425944841676
Iter :  137 Batch :  9   Loss :  0.38948283  Accuracy :  94.38  Class Accuracy :  11.663865546218489  Car class accuracy  11.663865546218489
Iter :  137 Batch :  10   Loss :  0.055390283  Accuracy :  99.13499999999999  Class Accuracy :  9.280575539568344  Car class accuracy  9.280575539568344
Iter :  137 Batch :  11   Loss :  0.15833814  Accuracy :  97.38  Class Accuracy :  9.821428571428571  Car class accuracy  9.821428571428571
Iter :  137 Batch :  12   Loss :  0.14603435  Accuracy :  95.99499999999999  Class Accuracy :  14.90280777537797  Car class accuracy  14.90280777537797
Iter :  137 Batch :  13   Loss :  0.24447675  Accuracy :  94.99499999999999  Class Accuracy :  13.045175683212493  Car class accuracy  13.045175683212493
Iter :  137 Batch :  14   Loss :  0.14506836  Accuracy :  96.13000000000001  Class Accuracy :  14.079999999999998  Car class accuracy  14.079999999999998
Iter :  137 Batch :  15   Loss :  0.24929966  Accuracy :  94.78999999999999  Class Accuracy :  13.120665742024967  Car class accuracy  13.120665742024967
Iter :  137 Batch :  16   Loss :  0.08266134  Accuracy :  98.25  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 138 loss : 0.38180763 Accuracy: 92.89351385927506 Class Accuracy : 13.313160325136323
Iter :  138 Batch :  0   Loss :  0.18039866  Accuracy :  95.755  Class Accuracy :  12.08550573514077  Car class accuracy  12.08550573514077
Iter :  138 Batch :  1   Loss :  0.24001479  Accuracy :  95.88  Class Accuracy :  13.030080704328686  Car class accuracy  13.030080704328686
Iter :  138 Batch :  2   Loss :  0.07772607  Accuracy :  98.22  Class Accuracy :  11.633663366336632  Car class accuracy  11.633663366336632
Iter :  138 Batch :  3   Loss :  0.20638682  Accuracy :  96.42500000000001  Class Accuracy :  11.407407407407408  Car class accuracy  11.407407407407408
Iter :  138 Batch :  4   Loss :  0.3122567  Accuracy :  89.395  Class Accuracy :  21.200000000000003  Car class accuracy  21.200000000000003
Iter :  138 Batch :  5   Loss :  0.1691931  Accuracy :  96.365  Class Accuracy :  11.736204576043068  Car class accuracy  11.736204576043068
Iter :  138 Batch :  6   Loss :  0.114893004  Accuracy :  96.78  Class Accuracy :  12.763819095477386  Car class accuracy  12.763819095477386
Iter :  138 Batch :  7   Loss :  0.26689228  Accuracy :  96.175  Class Accuracy :  11.60705536501715  Car class accuracy  11.60705536501715
Iter :  138 Batch :  8   Loss :  0.22399317  Accuracy :  95.38  Class Accuracy :  12.988351254480285  Car class accuracy  12.988351254480285
Iter :  138 Batch :  9   Loss :  0.3207861  Accuracy :  92.365  Class Accuracy :  13.98206278026906  Car class accuracy  13.98206278026906
Iter :  138 Batch :  10   Loss :  0.06869632  Accuracy :  98.615  Class Accuracy :  9.844961240310077  Car class accuracy  9.844961240310077
Iter :  138 Batch :  11   Loss :  0.094074965  Accuracy :  99.015  Class Accuracy :  9.363057324840765  Car class accuracy  9.363057324840765
Iter :  138 Batch :  12   Loss :  0.16036484  Accuracy :  97.17  Class Accuracy :  11.46987951807229  Car class accuracy  11.46987951807229
Iter :  138 Batch :  13   Loss :  0.3197953  Accuracy :  96.95  Class Accuracy :  10.525714285714285  Car class accuracy  10.525714285714285
Iter :  138 Batch :  14   Loss :  0.068240196  Accuracy :  99.14500000000001  Class Accuracy :  9.644444444444444  Car class accuracy  9.644444444444444
Iter :  138 Batch :  15   Loss :  0.41817173  Accuracy :  95.54  Class Accuracy :  11.11336032388664  Car class accuracy  11.11336032388664
Iter :  138 Batch :  16   Loss :  0.02330758  Accuracy :  99.97500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 139 loss : 0.380442 Accuracy: 92.91889923793396 Class Accuracy : 13.299642900028129
Iter :  139 Batch :  0   Loss :  0.24080594  Accuracy :  97.33000000000001  Class Accuracy :  9.832985386221296  Car class accuracy  9.832985386221296
Iter :  139 Batch :  1   Loss :  0.66079354  Accuracy :  94.64  Class Accuracy :  10.986019131714494  Car class accuracy  10.986019131714494
Iter :  139 Batch :  2   Loss :  0.03783997  Accuracy :  99.49  Class Accuracy :  10.158730158730158  Car class accuracy  10.158730158730158
Iter :  139 Batch :  3   Loss :  0.12279524  Accuracy :  98.32  Class Accuracy :  9.00709219858156  Car class accuracy  9.00709219858156
Iter :  139 Batch :  4   Loss :  0.37584034  Accuracy :  88.98  Class Accuracy :  19.333333333333332  Car class accuracy  19.333333333333332
Iter :  139 Batch :  5   Loss :  0.22316529  Accuracy :  94.56  Class Accuracy :  12.582073996873373  Car class accuracy  12.582073996873373
Iter :  139 Batch :  6   Loss :  0.24407041  Accuracy :  93.89999999999999  Class Accuracy :  17.559808612440193  Car class accuracy  17.559808612440193
Iter :  139 Batch :  7   Loss :  0.3498702  Accuracy :  89.82  Class Accuracy :  16.114616193480547  Car class accuracy  16.114616193480547
Iter :  139 Batch :  8   Loss :  0.6227644  Accuracy :  91.67999999999999  Class Accuracy :  13.79050925925926  Car class accuracy  13.79050925925926
Iter :  139 Batch :  9   Loss :  0.6638289  Accuracy :  83.39999999999999  Class Accuracy :  20.86522462562396  Car class accuracy  20.86522462562396
Iter :  139 Batch :  10   Loss :  0.14672577  Accuracy :  97.13000000000001  Class Accuracy :  12.164179104477613  Car class accuracy  12.164179104477613
Iter :  139 Batch :  11   Loss :  0.29407138  Accuracy :  93.46  Class Accuracy :  14.304635761589404  Car class accuracy  14.304635761589404
Iter :  139 Batch :  12   Loss :  0.26930624  Accuracy :  89.935  Class Accuracy :  18.997867803837952  Car class accuracy  18.997867803837952
Iter :  139 Batch :  13   Loss :  0.51517546  Accuracy :  86.115  Class Accuracy :  18.39266450916936  Car class accuracy  18.39266450916936
Iter :  139 Batch :  14   Loss :  0.1820799  Accuracy :  94.8  Class Accuracy :  14.892703862660944  Car class accuracy  14.892703862660944
Iter :  139 Batch :  15   Loss :  0.5067667  Accuracy :  88.01  Class Accuracy :  16.210995542347696  Car class accuracy  16.210995542347696
Iter :  139 Batch :  16   Loss :  0.067977116  Accuracy :  98.565  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 140 loss : 0.38004535 Accuracy: 92.91911517444304 Class Accuracy : 13.303467830746863
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__140_0.ckpt
saved prediction of 0 accuracy :  0.9135  class accuracy :  0.17538126361655773  car_class_accuracy :  0.17538126361655773
saved prediction of 1 accuracy :  0.94275  class accuracy :  0.12415812591508053  car_class_accuracy :  0.12415812591508053
saved prediction of 2 accuracy :  0.9611  class accuracy :  0.09114583333333334  car_class_accuracy :  0.09114583333333334
saved prediction of 3 accuracy :  0.91605  class accuracy :  0.12145161290322581  car_class_accuracy :  0.12145161290322581
saved prediction of 4 accuracy :  0.8734  class accuracy :  0.13386183465458662  car_class_accuracy :  0.13386183465458662
saved prediction of 5 accuracy :  0.87685  class accuracy :  0.14285714285714285  car_class_accuracy :  0.14285714285714285
saved prediction of 6 accuracy :  0.96315  class accuracy :  0.1062665256478054  car_class_accuracy :  0.1062665256478054
saved prediction of 7 accuracy :  0.9375  class accuracy :  0.16542553191489362  car_class_accuracy :  0.16542553191489362
saved prediction of 8 accuracy :  0.82055  class accuracy :  0.1304635761589404  car_class_accuracy :  0.1304635761589404
saved prediction of 9 accuracy :  0.9587  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 10 accuracy :  0.86965  class accuracy :  0.16375908618899274  car_class_accuracy :  0.16375908618899274
saved prediction of 11 accuracy :  0.95905  class accuracy :  0.12790697674418605  car_class_accuracy :  0.12790697674418605
saved prediction of 12 accuracy :  0.913  class accuracy :  0.1759124087591241  car_class_accuracy :  0.1759124087591241
saved prediction of 13 accuracy :  0.8668  class accuracy :  0.17140169332079022  car_class_accuracy :  0.17140169332079022
saved prediction of 14 accuracy :  0.9185  class accuracy :  0.12456492637215529  car_class_accuracy :  0.12456492637215529
saved prediction of 15 accuracy :  0.91645  class accuracy :  0.10349794238683127  car_class_accuracy :  0.10349794238683127
saved prediction of 16 accuracy :  0.9417  class accuracy :  0.13839031339031338  car_class_accuracy :  0.13839031339031338
saved prediction of 17 accuracy :  0.92275  class accuracy :  0.165695067264574  car_class_accuracy :  0.165695067264574
saved prediction of 18 accuracy :  0.9454  class accuracy :  0.11693796744390672  car_class_accuracy :  0.11693796744390672
saved prediction of 19 accuracy :  0.9564  class accuracy :  0.09633507853403142  car_class_accuracy :  0.09633507853403142
saved prediction of 20 accuracy :  0.88545  class accuracy :  0.1296244131455399  car_class_accuracy :  0.1296244131455399
saved prediction of 21 accuracy :  0.8748  class accuracy :  0.12988636363636363  car_class_accuracy :  0.12988636363636363
saved prediction of 22 accuracy :  0.87625  class accuracy :  0.21666666666666665  car_class_accuracy :  0.21666666666666665
saved prediction of 23 accuracy :  0.9621  class accuracy :  0.10280913625623522  car_class_accuracy :  0.10280913625623522
saved prediction of 24 accuracy :  0.9316  class accuracy :  0.14236453201970442  car_class_accuracy :  0.14236453201970442
saved prediction of 25 accuracy :  0.8251  class accuracy :  0.14666666666666667  car_class_accuracy :  0.14666666666666667
saved prediction of 26 accuracy :  0.9621  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 27 accuracy :  0.8804  class accuracy :  0.14175199089874857  car_class_accuracy :  0.14175199089874857
saved prediction of 28 accuracy :  0.9534  class accuracy :  0.1267123287671233  car_class_accuracy :  0.1267123287671233
saved prediction of 29 accuracy :  0.9115  class accuracy :  0.17659574468085107  car_class_accuracy :  0.17659574468085107
saved prediction of 30 accuracy :  0.8784  class accuracy :  0.16507230255839822  car_class_accuracy :  0.16507230255839822
saved prediction of 31 accuracy :  0.9156  class accuracy :  0.1229861111111111  car_class_accuracy :  0.1229861111111111
saved prediction of 32 accuracy :  0.91705  class accuracy :  0.1094836670179136  car_class_accuracy :  0.1094836670179136
saved prediction of 33 accuracy :  0.94445  class accuracy :  0.13006263048016703  car_class_accuracy :  0.13006263048016703
saved prediction of 34 accuracy :  0.92175  class accuracy :  0.1753846153846154  car_class_accuracy :  0.1753846153846154
saved prediction of 35 accuracy :  0.9457  class accuracy :  0.1252843394575678  car_class_accuracy :  0.1252843394575678
saved prediction of 36 accuracy :  0.956  class accuracy :  0.08232323232323233  car_class_accuracy :  0.08232323232323233
saved prediction of 37 accuracy :  0.8864  class accuracy :  0.1343869731800766  car_class_accuracy :  0.1343869731800766
saved prediction of 38 accuracy :  0.8752  class accuracy :  0.13018327605956473  car_class_accuracy :  0.13018327605956473
saved prediction of 39 accuracy :  0.8814  class accuracy :  0.2  car_class_accuracy :  0.2
saved prediction of 40 accuracy :  0.96165  class accuracy :  0.10175801447776629  car_class_accuracy :  0.10175801447776629
saved prediction of 41 accuracy :  0.92995  class accuracy :  0.1717877094972067  car_class_accuracy :  0.1717877094972067
saved prediction of 42 accuracy :  0.82  class accuracy :  0.1615496017378711  car_class_accuracy :  0.1615496017378711
saved prediction of 43 accuracy :  0.9537  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 44 accuracy :  0.8782  class accuracy :  0.1369398907103825  car_class_accuracy :  0.1369398907103825
saved prediction of 45 accuracy :  0.95065  class accuracy :  0.12446043165467627  car_class_accuracy :  0.12446043165467627
saved prediction of 46 accuracy :  0.9088  class accuracy :  0.1735483870967742  car_class_accuracy :  0.1735483870967742
saved prediction of 47 accuracy :  0.8288  class accuracy :  0.20025597269624576  car_class_accuracy :  0.20025597269624576
saved prediction of 48 accuracy :  0.9239  class accuracy :  0.11911658218682115  car_class_accuracy :  0.11911658218682115
saved prediction of 49 accuracy :  0.91365  class accuracy :  0.11122661122661122  car_class_accuracy :  0.11122661122661122
saved prediction of 50 accuracy :  0.9336  class accuracy :  0.14474412171507606  car_class_accuracy :  0.14474412171507606
saved prediction of 51 accuracy :  0.95055  class accuracy :  0.1468487394957983  car_class_accuracy :  0.1468487394957983
saved prediction of 52 accuracy :  0.9445  class accuracy :  0.11924920127795527  car_class_accuracy :  0.11924920127795527
saved prediction of 53 accuracy :  0.9586  class accuracy :  0.0869767441860465  car_class_accuracy :  0.0869767441860465
saved prediction of 54 accuracy :  0.89065  class accuracy :  0.12909432191459408  car_class_accuracy :  0.12909432191459408
saved prediction of 55 accuracy :  0.8793  class accuracy :  0.1291521486643438  car_class_accuracy :  0.1291521486643438
saved prediction of 56 accuracy :  0.8842  class accuracy :  0.2  car_class_accuracy :  0.2
saved prediction of 57 accuracy :  0.963  class accuracy :  0.10382725627101112  car_class_accuracy :  0.10382725627101112
saved prediction of 58 accuracy :  0.9313  class accuracy :  0.12142857142857141  car_class_accuracy :  0.12142857142857141
saved prediction of 59 accuracy :  0.8354  class accuracy :  0.15058139534883722  car_class_accuracy :  0.15058139534883722
saved prediction of 60 accuracy :  0.95215  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 61 accuracy :  0.87425  class accuracy :  0.13993453355155483  car_class_accuracy :  0.13993453355155483
saved prediction of 62 accuracy :  0.95595  class accuracy :  0.11567164179104476  car_class_accuracy :  0.11567164179104476
saved prediction of 63 accuracy :  0.9186  class accuracy :  0.1564102564102564  car_class_accuracy :  0.1564102564102564
saved prediction of 64 accuracy :  0.8502  class accuracy :  0.17935103244837758  car_class_accuracy :  0.17935103244837758
saved prediction of 65 accuracy :  0.91055  class accuracy :  0.12358870967741935  car_class_accuracy :  0.12358870967741935
saved prediction of 66 accuracy :  0.918  class accuracy :  0.10919786096256685  car_class_accuracy :  0.10919786096256685
saved prediction of 67 accuracy :  0.9417  class accuracy :  0.13971830985915493  car_class_accuracy :  0.13971830985915493
saved prediction of 68 accuracy :  0.9515  class accuracy :  0.14621676891615543  car_class_accuracy :  0.14621676891615543
saved prediction of 69 accuracy :  0.94225  class accuracy :  0.1197867298578199  car_class_accuracy :  0.1197867298578199
saved prediction of 70 accuracy :  0.95825  class accuracy :  0.08457142857142858  car_class_accuracy :  0.08457142857142858
saved prediction of 71 accuracy :  0.91625  class accuracy :  0.11481687014428413  car_class_accuracy :  0.11481687014428413
saved prediction of 72 accuracy :  0.8791  class accuracy :  0.12680477087256747  car_class_accuracy :  0.12680477087256747
saved prediction of 73 accuracy :  0.8842  class accuracy :  0.10833333333333332  car_class_accuracy :  0.10833333333333332
saved prediction of 74 accuracy :  0.9585  class accuracy :  0.104252017380509  car_class_accuracy :  0.104252017380509
saved prediction of 75 accuracy :  0.9205  class accuracy :  0.18051575931232092  car_class_accuracy :  0.18051575931232092
saved prediction of 76 accuracy :  0.80965  class accuracy :  0.16938044034818228  car_class_accuracy :  0.16938044034818228
saved prediction of 77 accuracy :  0.94755  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 78 accuracy :  0.88435  class accuracy :  0.1487603305785124  car_class_accuracy :  0.1487603305785124
saved prediction of 79 accuracy :  0.9589  class accuracy :  0.13405797101449274  car_class_accuracy :  0.13405797101449274
saved prediction of 80 accuracy :  0.9085  class accuracy :  0.1656441717791411  car_class_accuracy :  0.1656441717791411
saved prediction of 81 accuracy :  0.83615  class accuracy :  0.18526912181303118  car_class_accuracy :  0.18526912181303118
saved prediction of 82 accuracy :  0.9203  class accuracy :  0.12169680111265646  car_class_accuracy :  0.12169680111265646
saved prediction of 83 accuracy :  0.91705  class accuracy :  0.11443965517241379  car_class_accuracy :  0.11443965517241379
saved prediction of 84 accuracy :  0.9475  class accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.13999999999999999  car_class_accuracy :  0.13999999999999999
saved prediction of 85 accuracy :  0.92335  class accuracy :  0.16064814814814815  car_class_accuracy :  0.16064814814814815
saved prediction of 86 accuracy :  0.9409  class accuracy :  0.12446043165467627  car_class_accuracy :  0.12446043165467627
saved prediction of 87 accuracy :  0.9572  class accuracy :  0.09787234042553192  car_class_accuracy :  0.09787234042553192
saved prediction of 88 accuracy :  0.8963  class accuracy :  0.1257102934326968  car_class_accuracy :  0.1257102934326968
saved prediction of 89 accuracy :  0.8672  class accuracy :  0.1272248551869405  car_class_accuracy :  0.1272248551869405
saved prediction of 90 accuracy :  0.8879  class accuracy :  0.175  car_class_accuracy :  0.175
saved prediction of 91 accuracy :  0.9595  class accuracy :  0.10220174091141834  car_class_accuracy :  0.10220174091141834
saved prediction of 92 accuracy :  0.92905  class accuracy :  0.14543010752688174  car_class_accuracy :  0.14543010752688174
saved prediction of 93 accuracy :  0.79525  class accuracy :  0.18273343766301514  car_class_accuracy :  0.18273343766301514
saved prediction of 94 accuracy :  0.95315  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 95 accuracy :  0.8774  class accuracy :  0.14034991798797156  car_class_accuracy :  0.14034991798797156
saved prediction of 96 accuracy :  0.96165  class accuracy :  0.1310077519379845  car_class_accuracy :  0.1310077519379845
saved prediction of 97 accuracy :  0.92205  class accuracy :  0.14726027397260272  car_class_accuracy :  0.14726027397260272
saved prediction of 98 accuracy :  0.877  class accuracy :  0.1667714884696017  car_class_accuracy :  0.1667714884696017
saved prediction of 99 accuracy :  0.92175  class accuracy :  0.12265840220385675  car_class_accuracy :  0.12265840220385675
Iter :  140 Batch :  0   Loss :  0.27785873  Accuracy :  93.06  Class Accuracy :  15.03531786074672  Car class accuracy  15.03531786074672
Iter :  140 Batch :  1   Loss :  0.2903235  Accuracy :  92.66  Class Accuracy :  15.824817518248175  Car class accuracy  15.824817518248175
Iter :  140 Batch :  2   Loss :  0.060884442  Accuracy :  98.72  Class Accuracy :  12.3463687150838  Car class accuracy  12.3463687150838
Iter :  140 Batch :  3   Loss :  0.13903463  Accuracy :  98.99  Class Accuracy :  9.183673469387756  Car class accuracy  9.183673469387756
Iter :  140 Batch :  4   Loss :  0.32101735  Accuracy :  89.09  Class Accuracy :  21.176470588235293  Car class accuracy  21.176470588235293
Iter :  140 Batch :  5   Loss :  0.32950607  Accuracy :  96.845  Class Accuracy :  10.491153947715869  Car class accuracy  10.491153947715869
Iter :  140 Batch :  6   Loss :  0.1569042  Accuracy :  96.78  Class Accuracy :  13.478260869565217  Car class accuracy  13.478260869565217
Iter :  140 Batch :  7   Loss :  0.28696617  Accuracy :  94.21000000000001  Class Accuracy :  13.27356557377049  Car class accuracy  13.27356557377049
Iter :  140 Batch :  8   Loss :  0.3446939  Accuracy :  96.17999999999999  Class Accuracy :  11.353892440767206  Car class accuracy  11.353892440767206
Iter :  140 Batch :  9   Loss :  0.92945087  Accuracy :  95.67  Class Accuracy :  5.174476570289133  Car class accuracy  5.174476570289133
Iter :  140 Batch :  10   Loss :  0.06652458  Accuracy :  99.065  Class Accuracy :  10.573770491803277  Car class accuracy  10.573770491803277
Iter :  140 Batch :  11   Loss :  0.12383691  Accuracy :  98.7  Class Accuracy :  8.088235294117647  Car class accuracy  8.088235294117647
Iter :  140 Batch :  12   Loss :  0.23807153  Accuracy :  95.42500000000001  Class Accuracy :  12.557651991614255  Car class accuracy  12.557651991614255
Iter :  140 Batch :  13   Loss :  0.27683732  Accuracy :  92.27  Class Accuracy :  14.8840885142255  Car class accuracy  14.8840885142255
Iter :  140 Batch :  14   Loss :  0.12021895  Accuracy :  97.91499999999999  Class Accuracy :  12.066115702479339  Car class accuracy  12.066115702479339
Iter :  140 Batch :  15   Loss :  0.36154267  Accuracy :  93.415  Class Accuracy :  12.762096774193548  Car class accuracy  12.762096774193548
Iter :  140 Batch :  16   Loss :  0.058648285  Accuracy :  99.595  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 141 loss : 0.3791779 Accuracy: 92.93955133555927 Class Accuracy : 13.29182801572163
Iter :  141 Batch :  0   Loss :  0.21815655  Accuracy :  94.95  Class Accuracy :  14.55200823892894  Car class accuracy  14.55200823892894
Iter :  141 Batch :  1   Loss :  0.24456197  Accuracy :  94.13  Class Accuracy :  15.387426900584794  Car class accuracy  15.387426900584794
Iter :  141 Batch :  2   Loss :  0.07171167  Accuracy :  98.97  Class Accuracy :  11.50943396226415  Car class accuracy  11.50943396226415
Iter :  141 Batch :  3   Loss :  0.1873119  Accuracy :  96.34  Class Accuracy :  10.206896551724139  Car class accuracy  10.206896551724139
Iter :  141 Batch :  4   Loss :  0.27570918  Accuracy :  91.985  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  141 Batch :  5   Loss :  0.26306707  Accuracy :  94.89  Class Accuracy :  12.280701754385966  Car class accuracy  12.280701754385966
Iter :  141 Batch :  6   Loss :  0.1589741  Accuracy :  95.83500000000001  Class Accuracy :  14.18478260869565  Car class accuracy  14.18478260869565
Iter :  141 Batch :  7   Loss :  0.34808302  Accuracy :  92.955  Class Accuracy :  13.443820224719099  Car class accuracy  13.443820224719099
Iter :  141 Batch :  8   Loss :  0.31904584  Accuracy :  93.525  Class Accuracy :  15.19688446559931  Car class accuracy  15.19688446559931
Iter :  141 Batch :  9   Loss :  0.3602287  Accuracy :  91.155  Class Accuracy :  16.051136363636363  Car class accuracy  16.051136363636363
Iter :  141 Batch :  10   Loss :  0.075889595  Accuracy :  99.25500000000001  Class Accuracy :  9.25170068027211  Car class accuracy  9.25170068027211
Iter :  141 Batch :  11   Loss :  0.1873834  Accuracy :  96.005  Class Accuracy :  11.81818181818182  Car class accuracy  11.81818181818182
Iter :  141 Batch :  12   Loss :  0.1754674  Accuracy :  95.42  Class Accuracy :  13.92156862745098  Car class accuracy  13.92156862745098
Iter :  141 Batch :  13   Loss :  0.21744141  Accuracy :  96.6  Class Accuracy :  11.388724035608307  Car class accuracy  11.388724035608307
Iter :  141 Batch :  14   Loss :  0.09464121  Accuracy :  99.07000000000001  Class Accuracy :  9.83739837398374  Car class accuracy  9.83739837398374
Iter :  141 Batch :  15   Loss :  0.2890503  Accuracy :  96.61  Class Accuracy :  10.367170626349893  Car class accuracy  10.367170626349893
Iter :  141 Batch :  16   Loss :  0.029911896  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 142 loss : 0.3779639 Accuracy: 92.95929341069207 Class Accuracy : 13.281337654745718
Iter :  142 Batch :  0   Loss :  0.1519653  Accuracy :  97.155  Class Accuracy :  11.507823613086773  Car class accuracy  11.507823613086773
Iter :  142 Batch :  1   Loss :  0.37628087  Accuracy :  97.35000000000001  Class Accuracy :  10.83455344070278  Car class accuracy  10.83455344070278
Iter :  142 Batch :  2   Loss :  0.04774736  Accuracy :  99.59  Class Accuracy :  9.203980099502488  Car class accuracy  9.203980099502488
Iter :  142 Batch :  3   Loss :  0.1257914  Accuracy :  98.02499999999999  Class Accuracy :  10.970149253731343  Car class accuracy  10.970149253731343
Iter :  142 Batch :  4   Loss :  0.10829782  Accuracy :  98.155  Class Accuracy :  5.7894736842105265  Car class accuracy  5.7894736842105265
Iter :  142 Batch :  5   Loss :  0.2711532  Accuracy :  96.61999999999999  Class Accuracy :  11.399641117662137  Car class accuracy  11.399641117662137
Iter :  142 Batch :  6   Loss :  0.11598376  Accuracy :  97.1  Class Accuracy :  12.819148936170214  Car class accuracy  12.819148936170214
Iter :  142 Batch :  7   Loss :  0.26631665  Accuracy :  92.77  Class Accuracy :  14.726209463051571  Car class accuracy  14.726209463051571
Iter :  142 Batch :  8   Loss :  0.3462247  Accuracy :  95.41  Class Accuracy :  12.353286384976524  Car class accuracy  12.353286384976524
Iter :  142 Batch :  9   Loss :  0.29208598  Accuracy :  93.38499999999999  Class Accuracy :  14.798319327731093  Car class accuracy  14.798319327731093
Iter :  142 Batch :  10   Loss :  0.045023732  Accuracy :  99.36500000000001  Class Accuracy :  10.422535211267606  Car class accuracy  10.422535211267606
Iter :  142 Batch :  11   Loss :  0.092359476  Accuracy :  98.85000000000001  Class Accuracy :  9.758064516129032  Car class accuracy  9.758064516129032
Iter :  142 Batch :  12   Loss :  0.26380113  Accuracy :  92.155  Class Accuracy :  18.02127659574468  Car class accuracy  18.02127659574468
Iter :  142 Batch :  13   Loss :  0.26373786  Accuracy :  96.09  Class Accuracy :  11.767241379310345  Car class accuracy  11.767241379310345
Iter :  142 Batch :  14   Loss :  0.07668211  Accuracy :  99.095  Class Accuracy :  10.043290043290042  Car class accuracy  10.043290043290042
Iter :  142 Batch :  15   Loss :  0.22628364  Accuracy :  95.81  Class Accuracy :  11.831357048748352  Car class accuracy  11.831357048748352
Iter :  142 Batch :  16   Loss :  0.01984188  Accuracy :  99.97  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 143 loss : 0.37659115 Accuracy: 92.98669547325102 Class Accuracy : 13.265067535397831
Iter :  143 Batch :  0   Loss :  0.16088225  Accuracy :  96.65  Class Accuracy :  11.817215727948991  Car class accuracy  11.817215727948991
Iter :  143 Batch :  1   Loss :  0.2880089  Accuracy :  96.525  Class Accuracy :  11.638123603871927  Car class accuracy  11.638123603871927
Iter :  143 Batch :  2   Loss :  0.03164916  Accuracy :  99.59  Class Accuracy :  9.78494623655914  Car class accuracy  9.78494623655914
Iter :  143 Batch :  3   Loss :  0.13920383  Accuracy :  98.50999999999999  Class Accuracy :  9.802631578947368  Car class accuracy  9.802631578947368
Iter :  143 Batch :  4   Loss :  0.10002677  Accuracy :  99.075  Class Accuracy :  2.0  Car class accuracy  2.0
Iter :  143 Batch :  5   Loss :  0.22546154  Accuracy :  97.565  Class Accuracy :  10.791048659901119  Car class accuracy  10.791048659901119
Iter :  143 Batch :  6   Loss :  0.10692313  Accuracy :  97.42  Class Accuracy :  12.642487046632125  Car class accuracy  12.642487046632125
Iter :  143 Batch :  7   Loss :  0.211113  Accuracy :  96.055  Class Accuracy :  11.806342015855039  Car class accuracy  11.806342015855039
Iter :  143 Batch :  8   Loss :  0.19489872  Accuracy :  94.535  Class Accuracy :  14.683318465655665  Car class accuracy  14.683318465655665
Iter :  143 Batch :  9   Loss :  0.25477082  Accuracy :  95.49  Class Accuracy :  12.208588957055214  Car class accuracy  12.208588957055214
Iter :  143 Batch :  10   Loss :  0.04512588  Accuracy :  99.29  Class Accuracy :  9.930555555555557  Car class accuracy  9.930555555555557
Iter :  143 Batch :  11   Loss :  0.12871896  Accuracy :  97.995  Class Accuracy :  7.663551401869159  Car class accuracy  7.663551401869159
Iter :  143 Batch :  12   Loss :  0.10273136  Accuracy :  97.76  Class Accuracy :  12.44060475161987  Car class accuracy  12.44060475161987
Iter :  143 Batch :  13   Loss :  0.1824966  Accuracy :  95.49499999999999  Class Accuracy :  12.690355329949238  Car class accuracy  12.690355329949238
Iter :  143 Batch :  14   Loss :  0.090442345  Accuracy :  97.75  Class Accuracy :  12.272727272727273  Car class accuracy  12.272727272727273
Iter :  143 Batch :  15   Loss :  0.19986211  Accuracy :  95.72500000000001  Class Accuracy :  12.26388888888889  Car class accuracy  12.26388888888889
Iter :  143 Batch :  16   Loss :  0.015099353  Accuracy :  99.965  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 144 loss : 0.37498724 Accuracy: 93.01719043727013 Class Accuracy : 13.244197178794346
Iter :  144 Batch :  0   Loss :  0.13000256  Accuracy :  97.005  Class Accuracy :  11.597222222222223  Car class accuracy  11.597222222222223
Iter :  144 Batch :  1   Loss :  0.16503084  Accuracy :  97.27  Class Accuracy :  12.06871868289191  Car class accuracy  12.06871868289191
Iter :  144 Batch :  2   Loss :  0.034135453  Accuracy :  99.75  Class Accuracy :  9.65  Car class accuracy  9.65
Iter :  144 Batch :  3   Loss :  0.058891382  Accuracy :  99.78  Class Accuracy :  8.442622950819672  Car class accuracy  8.442622950819672
Iter :  144 Batch :  4   Loss :  0.056601617  Accuracy :  99.715  Class Accuracy :  3.6363636363636362  Car class accuracy  3.6363636363636362
Iter :  144 Batch :  5   Loss :  0.30731407  Accuracy :  97.91  Class Accuracy :  10.010537407797681  Car class accuracy  10.010537407797681
Iter :  144 Batch :  6   Loss :  0.12088518  Accuracy :  97.82499999999999  Class Accuracy :  10.542986425339366  Car class accuracy  10.542986425339366
Iter :  144 Batch :  7   Loss :  0.21544927  Accuracy :  95.485  Class Accuracy :  12.761958997722095  Car class accuracy  12.761958997722095
Iter :  144 Batch :  8   Loss :  0.3864645  Accuracy :  96.55  Class Accuracy :  10.57915057915058  Car class accuracy  10.57915057915058
Iter :  144 Batch :  9   Loss :  0.2436881  Accuracy :  94.525  Class Accuracy :  13.586206896551726  Car class accuracy  13.586206896551726
Iter :  144 Batch :  10   Loss :  0.043340333  Accuracy :  99.25  Class Accuracy :  10.145985401459853  Car class accuracy  10.145985401459853
Iter :  144 Batch :  11   Loss :  0.13471644  Accuracy :  96.82  Class Accuracy :  11.619718309859154  Car class accuracy  11.619718309859154
Iter :  144 Batch :  12   Loss :  0.14931701  Accuracy :  95.085  Class Accuracy :  15.031982942430705  Car class accuracy  15.031982942430705
Iter :  144 Batch :  13   Loss :  0.1646525  Accuracy :  95.865  Class Accuracy :  12.424768518518519  Car class accuracy  12.424768518518519
Iter :  144 Batch :  14   Loss :  0.083209634  Accuracy :  98.3  Class Accuracy :  10.833333333333332  Car class accuracy  10.833333333333332
Iter :  144 Batch :  15   Loss :  0.20828354  Accuracy :  95.61500000000001  Class Accuracy :  12.237762237762237  Car class accuracy  12.237762237762237
Iter :  144 Batch :  16   Loss :  0.039165102  Accuracy :  99.47  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 145 loss : 0.37343138 Accuracy: 93.0475994318182 Class Accuracy : 13.22391226260227
Iter :  145 Batch :  0   Loss :  0.5670227  Accuracy :  92.30000000000001  Class Accuracy :  13.72528616024974  Car class accuracy  13.72528616024974
Iter :  145 Batch :  1   Loss :  0.3248525  Accuracy :  92.495  Class Accuracy :  16.399447131997235  Car class accuracy  16.399447131997235
Iter :  145 Batch :  2   Loss :  0.105882615  Accuracy :  96.41499999999999  Class Accuracy :  15.879120879120878  Car class accuracy  15.879120879120878
Iter :  145 Batch :  3   Loss :  0.2384613  Accuracy :  96.5  Class Accuracy :  11.104294478527606  Car class accuracy  11.104294478527606
Iter :  145 Batch :  4   Loss :  0.15414418  Accuracy :  95.33  Class Accuracy :  8.823529411764705  Car class accuracy  8.823529411764705
Iter :  145 Batch :  5   Loss :  0.28493482  Accuracy :  95.465  Class Accuracy :  11.91410392364793  Car class accuracy  11.91410392364793
Iter :  145 Batch :  6   Loss :  0.13674946  Accuracy :  96.35000000000001  Class Accuracy :  12.010582010582011  Car class accuracy  12.010582010582011
Iter :  145 Batch :  7   Loss :  0.44482428  Accuracy :  94.66499999999999  Class Accuracy :  12.488975992160704  Car class accuracy  12.488975992160704
Iter :  145 Batch :  8   Loss :  0.45816913  Accuracy :  92.96  Class Accuracy :  13.815261044176708  Car class accuracy  13.815261044176708
Iter :  145 Batch :  9   Loss :  0.56179285  Accuracy :  89.64999999999999  Class Accuracy :  16.457654723127035  Car class accuracy  16.457654723127035
Iter :  145 Batch :  10   Loss :  0.10275984  Accuracy :  97.10499999999999  Class Accuracy :  14.496124031007751  Car class accuracy  14.496124031007751
Iter :  145 Batch :  11   Loss :  0.1606145  Accuracy :  97.055  Class Accuracy :  8.814814814814815  Car class accuracy  8.814814814814815
Iter :  145 Batch :  12   Loss :  0.15861954  Accuracy :  96.05  Class Accuracy :  14.374999999999998  Car class accuracy  14.374999999999998
Iter :  145 Batch :  13   Loss :  0.3555431  Accuracy :  90.25  Class Accuracy :  16.09101516919487  Car class accuracy  16.09101516919487
Iter :  145 Batch :  14   Loss :  0.3526925  Accuracy :  95.03  Class Accuracy :  7.844827586206896  Car class accuracy  7.844827586206896
Iter :  145 Batch :  15   Loss :  0.39786714  Accuracy :  89.005  Class Accuracy :  16.005606166783462  Car class accuracy  16.005606166783462
Iter :  145 Batch :  16   Loss :  0.07365271  Accuracy :  99.35000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 146 loss : 0.372839 Accuracy: 93.05733978234584 Class Accuracy : 13.21804331260595
Iter :  146 Batch :  0   Loss :  0.19551186  Accuracy :  96.2  Class Accuracy :  12.442442442442443  Car class accuracy  12.442442442442443
Iter :  146 Batch :  1   Loss :  0.40739387  Accuracy :  89.895  Class Accuracy :  19.125090383224872  Car class accuracy  19.125090383224872
Iter :  146 Batch :  2   Loss :  0.108792186  Accuracy :  97.64  Class Accuracy :  8.75  Car class accuracy  8.75
Iter :  146 Batch :  3   Loss :  0.18134269  Accuracy :  96.035  Class Accuracy :  13.46774193548387  Car class accuracy  13.46774193548387
Iter :  146 Batch :  4   Loss :  0.32481468  Accuracy :  89.49000000000001  Class Accuracy :  18.235294117647058  Car class accuracy  18.235294117647058
Iter :  146 Batch :  5   Loss :  0.27550262  Accuracy :  93.50500000000001  Class Accuracy :  13.242105263157894  Car class accuracy  13.242105263157894
Iter :  146 Batch :  6   Loss :  0.16683821  Accuracy :  95.38499999999999  Class Accuracy :  14.891304347826088  Car class accuracy  14.891304347826088
Iter :  146 Batch :  7   Loss :  0.28374764  Accuracy :  94.39  Class Accuracy :  13.185143500281374  Car class accuracy  13.185143500281374
Iter :  146 Batch :  8   Loss :  0.4644561  Accuracy :  92.375  Class Accuracy :  14.238683127572017  Car class accuracy  14.238683127572017
Iter :  146 Batch :  9   Loss :  0.3271199  Accuracy :  92.365  Class Accuracy :  14.739791833466773  Car class accuracy  14.739791833466773
Iter :  146 Batch :  10   Loss :  0.089722894  Accuracy :  98.92  Class Accuracy :  11.151079136690647  Car class accuracy  11.151079136690647
Iter :  146 Batch :  11   Loss :  0.15606159  Accuracy :  98.045  Class Accuracy :  10.559006211180124  Car class accuracy  10.559006211180124
Iter :  146 Batch :  12   Loss :  0.18326613  Accuracy :  95.985  Class Accuracy :  14.08805031446541  Car class accuracy  14.08805031446541
Iter :  146 Batch :  13   Loss :  0.33296144  Accuracy :  94.89  Class Accuracy :  12.077051926298157  Car class accuracy  12.077051926298157
Iter :  146 Batch :  14   Loss :  0.1283671  Accuracy :  98.02499999999999  Class Accuracy :  10.532319391634982  Car class accuracy  10.532319391634982
Iter :  146 Batch :  15   Loss :  0.42805097  Accuracy :  96.06  Class Accuracy :  10.30716723549488  Car class accuracy  10.30716723549488
Iter :  146 Batch :  16   Loss :  0.033363085  Accuracy :  99.45  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 147 loss : 0.3719379 Accuracy: 93.07202361889512 Class Accuracy : 13.212569147214658
Iter :  147 Batch :  0   Loss :  0.19778912  Accuracy :  95.26  Class Accuracy :  13.703308431163288  Car class accuracy  13.703308431163288
Iter :  147 Batch :  1   Loss :  0.35976738  Accuracy :  96.57  Class Accuracy :  11.119186046511627  Car class accuracy  11.119186046511627
Iter :  147 Batch :  2   Loss :  0.09461543  Accuracy :  98.87  Class Accuracy :  6.761363636363636  Car class accuracy  6.761363636363636
Iter :  147 Batch :  3   Loss :  0.15386331  Accuracy :  98.42999999999999  Class Accuracy :  9.191176470588234  Car class accuracy  9.191176470588234
Iter :  147 Batch :  4   Loss :  0.3690363  Accuracy :  88.325  Class Accuracy :  19.0  Car class accuracy  19.0
Iter :  147 Batch :  5   Loss :  0.21370523  Accuracy :  95.42500000000001  Class Accuracy :  12.876404494382024  Car class accuracy  12.876404494382024
Iter :  147 Batch :  6   Loss :  0.16206938  Accuracy :  95.655  Class Accuracy :  13.3  Car class accuracy  13.3
Iter :  147 Batch :  7   Loss :  0.3050153  Accuracy :  90.36  Class Accuracy :  16.163242642976122  Car class accuracy  16.163242642976122
Iter :  147 Batch :  8   Loss :  0.6687827  Accuracy :  93.765  Class Accuracy :  11.936254980079681  Car class accuracy  11.936254980079681
Iter :  147 Batch :  9   Loss :  0.32785216  Accuracy :  90.75999999999999  Class Accuracy :  16.325187969924812  Car class accuracy  16.325187969924812
Iter :  147 Batch :  10   Loss :  0.061008643  Accuracy :  99.13499999999999  Class Accuracy :  10.214285714285714  Car class accuracy  10.214285714285714
Iter :  147 Batch :  11   Loss :  0.15350977  Accuracy :  96.845  Class Accuracy :  10.83916083916084  Car class accuracy  10.83916083916084
Iter :  147 Batch :  12   Loss :  0.21755683  Accuracy :  96.07  Class Accuracy :  12.744282744282746  Car class accuracy  12.744282744282746
Iter :  147 Batch :  13   Loss :  0.29777133  Accuracy :  91.86  Class Accuracy :  14.712905059693007  Car class accuracy  14.712905059693007
Iter :  147 Batch :  14   Loss :  0.13540441  Accuracy :  96.26  Class Accuracy :  13.17829457364341  Car class accuracy  13.17829457364341
Iter :  147 Batch :  15   Loss :  0.41384712  Accuracy :  91.425  Class Accuracy :  13.34006734006734  Car class accuracy  13.34006734006734
Iter :  147 Batch :  16   Loss :  0.05208145  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 148 loss : 0.3710873 Accuracy: 93.08502783300199 Class Accuracy : 13.204931550968327
Iter :  148 Batch :  0   Loss :  0.23505  Accuracy :  92.77499999999999  Class Accuracy :  15.888429752066116  Car class accuracy  15.888429752066116
Iter :  148 Batch :  1   Loss :  0.35301745  Accuracy :  93.515  Class Accuracy :  13.979517190929041  Car class accuracy  13.979517190929041
Iter :  148 Batch :  2   Loss :  0.043806  Accuracy :  99.465  Class Accuracy :  9.725274725274726  Car class accuracy  9.725274725274726
Iter :  148 Batch :  3   Loss :  0.12951964  Accuracy :  97.465  Class Accuracy :  10.763358778625953  Car class accuracy  10.763358778625953
Iter :  148 Batch :  4   Loss :  0.2635075  Accuracy :  92.30000000000001  Class Accuracy :  15.294117647058822  Car class accuracy  15.294117647058822
Iter :  148 Batch :  5   Loss :  0.2535681  Accuracy :  96.76  Class Accuracy :  11.38904734740445  Car class accuracy  11.38904734740445
Iter :  148 Batch :  6   Loss :  0.20552959  Accuracy :  98.555  Class Accuracy :  6.872037914691943  Car class accuracy  6.872037914691943
Iter :  148 Batch :  7   Loss :  0.2917235  Accuracy :  96.955  Class Accuracy :  10.15335463258786  Car class accuracy  10.15335463258786
Iter :  148 Batch :  8   Loss :  0.24687934  Accuracy :  95.28999999999999  Class Accuracy :  13.364116094986805  Car class accuracy  13.364116094986805
Iter :  148 Batch :  9   Loss :  0.35010877  Accuracy :  94.915  Class Accuracy :  10.890652557319225  Car class accuracy  10.890652557319225
Iter :  148 Batch :  10   Loss :  0.054085646  Accuracy :  99.26  Class Accuracy :  10.15748031496063  Car class accuracy  10.15748031496063
Iter :  148 Batch :  11   Loss :  0.12953386  Accuracy :  98.5  Class Accuracy :  8.979591836734693  Car class accuracy  8.979591836734693
Iter :  148 Batch :  12   Loss :  0.18183914  Accuracy :  97.625  Class Accuracy :  11.241970021413277  Car class accuracy  11.241970021413277
Iter :  148 Batch :  13   Loss :  0.26794326  Accuracy :  94.705  Class Accuracy :  12.6091888825865  Car class accuracy  12.6091888825865
Iter :  148 Batch :  14   Loss :  0.12239321  Accuracy :  98.75500000000001  Class Accuracy :  10.075187969924812  Car class accuracy  10.075187969924812
Iter :  148 Batch :  15   Loss :  0.3416873  Accuracy :  94.985  Class Accuracy :  10.850340136054422  Car class accuracy  10.850340136054422
Iter :  148 Batch :  16   Loss :  0.028638506  Accuracy :  99.885  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 149 loss : 0.36997765 Accuracy: 93.1084340442338 Class Accuracy : 13.188245069702987
Iter :  149 Batch :  0   Loss :  0.1954316  Accuracy :  95.855  Class Accuracy :  13.148936170212766  Car class accuracy  13.148936170212766
Iter :  149 Batch :  1   Loss :  0.20439436  Accuracy :  96.64  Class Accuracy :  13.048780487804878/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  Car class accuracy  13.048780487804878
Iter :  149 Batch :  2   Loss :  0.044336718  Accuracy :  99.355  Class Accuracy :  10.957446808510637  Car class accuracy  10.957446808510637
Iter :  149 Batch :  3   Loss :  0.1240422  Accuracy :  98.64  Class Accuracy :  8.289473684210527  Car class accuracy  8.289473684210527
Iter :  149 Batch :  4   Loss :  0.18144056  Accuracy :  96.785  Class Accuracy :  12.666666666666664  Car class accuracy  12.666666666666664
Iter :  149 Batch :  5   Loss :  0.3988844  Accuracy :  96.775  Class Accuracy :  9.364523392544408  Car class accuracy  9.364523392544408
Iter :  149 Batch :  6   Loss :  0.10240294  Accuracy :  98.16  Class Accuracy :  10.3  Car class accuracy  10.3
Iter :  149 Batch :  7   Loss :  0.2488289  Accuracy :  97.015  Class Accuracy :  10.499725425590336  Car class accuracy  10.499725425590336
Iter :  149 Batch :  8   Loss :  0.36593634  Accuracy :  94.845  Class Accuracy :  12.5473321858864  Car class accuracy  12.5473321858864
Iter :  149 Batch :  9   Loss :  0.26954043  Accuracy :  97.655  Class Accuracy :  9.162512462612163  Car class accuracy  9.162512462612163
Iter :  149 Batch :  10   Loss :  0.059303325  Accuracy :  99.3  Class Accuracy :  10.067114093959733  Car class accuracy  10.067114093959733
Iter :  149 Batch :  11   Loss :  0.13045071  Accuracy :  98.07000000000001  Class Accuracy :  10.763888888888888  Car class accuracy  10.763888888888888
Iter :  149 Batch :  12   Loss :  0.16240802  Accuracy :  97.39999999999999  Class Accuracy :  12.70089285714286  Car class accuracy  12.70089285714286
Iter :  149 Batch :  13   Loss :  0.22178169  Accuracy :  93.39  Class Accuracy :  14.30500844119302  Car class accuracy  14.30500844119302
Iter :  149 Batch :  14   Loss :  0.11252673  Accuracy :  97.16  Class Accuracy :  13.348017621145376  Car class accuracy  13.348017621145376
Iter :  149 Batch :  15   Loss :  0.28569406  Accuracy :  94.5  Class Accuracy :  12.488418266048976  Car class accuracy  12.488418266048976
Iter :  149 Batch :  16   Loss :  0.021882722  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 150 loss : 0.36873782 Accuracy: 93.13535307963907 Class Accuracy : 13.172340233009171
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__150_0.ckpt
saved prediction of 0 accuracy :  0.95635  class accuracy :  0.07957695113056164  car_class_accuracy :  0.07957695113056164
saved prediction of 1 accuracy :  0.9478  class accuracy :  0.12946428571428573  car_class_accuracy :  0.12946428571428573
saved prediction of 2 accuracy :  0.96675  class accuracy :  0.09883961873186904  car_class_accuracy :  0.09883961873186904
saved prediction of 3 accuracy :  0.9926  class accuracy :  0.05309278350515464  car_class_accuracy :  0.05309278350515464
saved prediction of 4 accuracy :  0.9544  class accuracy :  0.07437308868501528  car_class_accuracy :  0.07437308868501528
saved prediction of 5 accuracy :  0.93465  class accuracy :  0.08210639441160666  car_class_accuracy :  0.08210639441160666
saved prediction of 6 accuracy :  0.97245  class accuracy :  0.09090909090909091  car_class_accuracy :  0.09090909090909091
saved prediction of 7 accuracy :  0.9559  class accuracy :  0.08243801652892561  car_class_accuracy :  0.08243801652892561
saved prediction of 8 accuracy :  0.98325  class accuracy :  0.08361111111111111  car_class_accuracy :  0.08361111111111111
saved prediction of 9 accuracy :  0.8587  class accuracy :  0.05195618153364632  car_class_accuracy :  0.05195618153364632
saved prediction of 10 accuracy :  0.98885  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 11 accuracy :  0.974  class accuracy :  0.08169897377423033  car_class_accuracy :  0.08169897377423033
saved prediction of 12 accuracy :  0.9875  class accuracy :  0.07943262411347518  car_class_accuracy :  0.07943262411347518
saved prediction of 13 accuracy :  0.9719  class accuracy :  0.11914893617021276  car_class_accuracy :  0.11914893617021276
saved prediction of 14 accuracy :  0.96525  class accuracy :  0.09005905511811023  car_class_accuracy :  0.09005905511811023
saved prediction of 15 accuracy :  0.974  class accuracy :  0.07878787878787878  car_class_accuracy :  0.07878787878787878
saved prediction of 16 accuracy :  0.9463  class accuracy :  0.009748743718592964  car_class_accuracy :  0.009748743718592964
saved prediction of 17 accuracy :  0.951  class accuracy :  0.09331941544885178  car_class_accuracy :  0.09331941544885178
saved prediction of 18 accuracy :  0.9509  class accuracy :  0.11293634496919917  car_class_accuracy :  0.11293634496919917
saved prediction of 19 accuracy :  0.96895  class accuracy :  0.09071100917431194  car_class_accuracy :  0.09071100917431194
saved prediction of 20 accuracy :  0.99225  class accuracy :  0.045588235294117645  car_class_accuracy :  0.045588235294117645
saved prediction of 21 accuracy :  0.94405  class accuracy :  0.07942913385826772  car_class_accuracy :  0.07942913385826772
saved prediction of 22 accuracy :  0.93515  class accuracy :  0.08446490218642118  car_class_accuracy :  0.08446490218642118
saved prediction of 23 accuracy :  0.97735  class accuracy :  0.05384615384615384  car_class_accuracy :  0.05384615384615384
saved prediction of 24 accuracy :  0.96325  class accuracy :  0.0865989515072084  car_class_accuracy :  0.0865989515072084
saved prediction of 25 accuracy :  0.983  class accuracy :  0.08792650918635171  car_class_accuracy :  0.08792650918635171
saved prediction of 26 accuracy :  0.8574  class accuracy :  0.05055611729019212  car_class_accuracy :  0.05055611729019212
saved prediction of 27 accuracy :  0.9882  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 28 accuracy :  0.9759  class accuracy :  0.08083235638921453  car_class_accuracy :  0.08083235638921453
saved prediction of 29 accuracy :  0.98935  class accuracy :  0.09850746268656715  car_class_accuracy :  0.09850746268656715
saved prediction of 30 accuracy :  0.9657  class accuracy :  0.12  car_class_accuracy :  0.12
saved prediction of 31 accuracy :  0.9607  class accuracy :  0.09015784586815227  car_class_accuracy :  0.09015784586815227
saved prediction of 32 accuracy :  0.96965  class accuracy :  0.07057291666666667  car_class_accuracy :  0.07057291666666667
saved prediction of 33 accuracy :  0.94565  class accuracy :  0.012727272727272726  car_class_accuracy :  0.012727272727272726
saved prediction of 34 accuracy :  0.9621  class accuracy :  0.08719824433065107  car_class_accuracy :  0.08719824433065107
saved prediction of 35 accuracy :  0.9469  class accuracy :  0.13615221987315013  car_class_accuracy :  0.13615221987315013
saved prediction of 36 accuracy :  0.96555  class accuracy :  0.0890958904109589  car_class_accuracy :  0.0890958904109589
saved prediction of 37 accuracy :  0.99305  class accuracy :  0.056043956043956046  car_class_accuracy :  0.056043956043956046
saved prediction of 38 accuracy :  0.94915  class accuracy :  0.0795551348793185  car_class_accuracy :  0.0795551348793185
saved prediction of 39 accuracy :  0.93885  class accuracy :  0.08402266288951842  car_class_accuracy :  0.08402266288951842
saved prediction of 40 accuracy :  0.97425  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 41 accuracy :  0.9598  class accuracy :  0.08225283630470016  car_class_accuracy :  0.08225283630470016
saved prediction of 42 accuracy :  0.98385  class accuracy :  0.08388888888888889  car_class_accuracy :  0.08388888888888889
saved prediction of 43 accuracy :  0.85115  class accuracy :  0.045824847250509164  car_class_accuracy :  0.045824847250509164
saved prediction of 44 accuracy :  0.98875  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 45 accuracy :  0.97665  class accuracy :  0.08230403800475058  car_class_accuracy :  0.08230403800475058
saved prediction of 46 accuracy :  0.98805  class accuracy :  0.07131782945736434  car_class_accuracy :  0.07131782945736434
saved prediction of 47 accuracy :  0.96975  class accuracy :  0.11232876712328768  car_class_accuracy :  0.11232876712328768
saved prediction of 48 accuracy :  0.9638  class accuracy :  0.08798932384341637  car_class_accuracy :  0.08798932384341637
saved prediction of 49 accuracy :  0.9698  class accuracy :  0.07307439104674127  car_class_accuracy :  0.07307439104674127
saved prediction of 50 accuracy :  0.9481  class accuracy :  0.009849246231155778  car_class_accuracy :  0.009849246231155778
saved prediction of 51 accuracy :  0.947  class accuracy :  0.08636688079942897  car_class_accuracy :  0.08636688079942897
saved prediction of 52 accuracy :  0.95225  class accuracy :  0.12309322033898304  car_class_accuracy :  0.12309322033898304
saved prediction of 53 accuracy :  0.96675  class accuracy :  0.0943956503554998  car_class_accuracy :  0.0943956503554998
saved prediction of 54 accuracy :  0.9915  class accuracy :  0.05081081081081081  car_class_accuracy :  0.05081081081081081
saved prediction of 55 accuracy :  0.94545  class accuracy :  0.0795572303344324  car_class_accuracy :  0.0795572303344324
saved prediction of 56 accuracy :  0.93645  class accuracy :  0.08311540648095508  car_class_accuracy :  0.08311540648095508
saved prediction of 57 accuracy :  0.9776  class accuracy :  0.07333333333333333  car_class_accuracy :  0.07333333333333333
saved prediction of 58 accuracy :  0.9499  class accuracy :  0.08134940995382248  car_class_accuracy :  0.08134940995382248
saved prediction of 59 accuracy :  0.98255  class accuracy :  0.08586118251928021  car_class_accuracy :  0.08586118251928021
saved prediction of 60 accuracy :  0.85835  class accuracy :  0.0507371631926792  car_class_accuracy :  0.0507371631926792
saved prediction of 61 accuracy :  0.9889  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 62 accuracy :  0.9782  class accuracy :  0.08608799048751486  car_class_accuracy :  0.08608799048751486
saved prediction of 63 accuracy :  0.98885  class accuracy :  0.08549618320610687  car_class_accuracy :  0.08549618320610687
saved prediction of 64 accuracy :  0.97135  class accuracy :  0.12653061224489798  car_class_accuracy :  0.12653061224489798
saved prediction of 65 accuracy :  0.95625  class accuracy :  0.09257425742574257  car_class_accuracy :  0.09257425742574257
saved prediction of 66 accuracy :  0.9669  class accuracy :  0.07383831954169319  car_class_accuracy :  0.07383831954169319
saved prediction of 67 accuracy :  0.9511  class accuracy :  0.008370535714285714  car_class_accuracy :  0.008370535714285714
saved prediction of 68 accuracy :  0.96185  class accuracy :  0.08760088041085841  car_class_accuracy :  0.08760088041085841
saved prediction of 69 accuracy :  0.9535  class accuracy :  0.12264573991031391  car_class_accuracy :  0.12264573991031391
saved prediction of 70 accuracy :  0.96795  class accuracy :  0.0973718224903059  car_class_accuracy :  0.0973718224903059
saved prediction of 71 accuracy :  0.9922  class accuracy :  0.05621621621621622  car_class_accuracy :  0.05621621621621622
saved prediction of 72 accuracy :  0.9476  class accuracy :  0.08226773226773226  car_class_accuracy :  0.08226773226773226
saved prediction of 73 accuracy :  0.9335  class accuracy :  0.08387440127727515  car_class_accuracy :  0.08387440127727515
saved prediction of 74 accuracy :  0.9764  class accuracy :  0.04285714285714286  car_class_accuracy :  0.04285714285714286
saved prediction of 75 accuracy :  0.95555  class accuracy :  0.08316462440063932  car_class_accuracy :  0.08316462440063932
saved prediction of 76 accuracy :  0.98325  class accuracy :  0.07327823691460054  car_class_accuracy :  0.07327823691460054
saved prediction of 77 accuracy :  0.851  class accuracy :  0.05565173116089613  car_class_accuracy :  0.05565173116089613
saved prediction of 78 accuracy :  0.98945  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 79 accuracy :  0.9755  class accuracy :  0.08193657984144961  car_class_accuracy :  0.08193657984144961
saved prediction of 80 accuracy :  0.9889  class accuracy :  0.08794326241134752  car_class_accuracy :  0.08794326241134752
saved prediction of 81 accuracy :  0.97255  class accuracy :  0.12818791946308725  car_class_accuracy :  0.12818791946308725
saved prediction of 82 accuracy :  0.9605  class accuracy :  0.09137466307277628  car_class_accuracy :  0.09137466307277628
saved prediction of 83 accuracy :  0.96765  class accuracy :  0.06879286694101508  car_class_accuracy :  0.06879286694101508
saved prediction of 84 accuracy :  0.94865  class accuracy :  0.008264462809917356  car_class_accuracy :  0.008264462809917356
saved prediction of 85 accuracy :  0.9489  class accuracy :  0.08492352512745813  car_class_accuracy :  0.08492352512745813
saved prediction of 86 accuracy :  0.9513  class accuracy :  0.12729124236252545  car_class_accuracy :  0.12729124236252545
saved prediction of 87 accuracy :  0.96785  class accuracy :  0.09298540965207633  car_class_accuracy :  0.09298540965207633
saved prediction of 88 accuracy :  0.9933  class accuracy :  0.05235602094240838  car_class_accuracy :  0.05235602094240838
saved prediction of 89 accuracy :  0.9604  class accuracy :  0.07694848084544254  car_class_accuracy :  0.07694848084544254
saved prediction of 90 accuracy :  0.928  class accuracy :  0.08070267435762979  car_class_accuracy :  0.08070267435762979
saved prediction of 91 accuracy :  0.97635  class accuracy :  0.10625  car_class_accuracy :  0.10625
saved prediction of 92 accuracy :  0.95355  class accuracy :  0.08202505753004347  car_class_accuracy :  0.08202505753004347
saved prediction of 93 accuracy :  0.98345  class accuracy :  0.07313019390581718  car_class_accuracy :  0.07313019390581718
saved prediction of 94 accuracy :  0.887  class accuracy :  0.054110738255033555  car_class_accuracy :  0.054110738255033555
saved prediction of 95 accuracy :  0.98945  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 96 accuracy :  0.9721  class accuracy :  0.07869855394883205  car_class_accuracy :  0.07869855394883205
saved prediction of 97 accuracy :  0.9879  class accuracy :  0.07368421052631578  car_class_accuracy :  0.07368421052631578
saved prediction of 98 accuracy :  0.9702  class accuracy :  0.13087248322147652  car_class_accuracy :  0.13087248322147652
saved prediction of 99 accuracy :  0.9659  class accuracy :  0.09412350597609562  car_class_accuracy :  0.09412350597609562
Iter :  150 Batch :  0   Loss :  0.16777892  Accuracy :  96.115  Class Accuracy :  11.107526881720432  Car class accuracy  11.107526881720432
Iter :  150 Batch :  1   Loss :  0.20680366  Accuracy :  95.405  Class Accuracy :  14.074344023323615  Car class accuracy  14.074344023323615
Iter :  150 Batch :  2   Loss :  0.034222525  Accuracy :  99.505  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  150 Batch :  3   Loss :  0.120229416  Accuracy :  98.97500000000001  Class Accuracy :  9.12751677852349  Car class accuracy  9.12751677852349
Iter :  150 Batch :  4   Loss :  0.14800134  Accuracy :  96.67999999999999  Class Accuracy :  7.777777777777778  Car class accuracy  7.777777777777778
Iter :  150 Batch :  5   Loss :  0.25393036  Accuracy :  97.565  Class Accuracy :  10.645827951433736  Car class accuracy  10.645827951433736
Iter :  150 Batch :  6   Loss :  0.098877184  Accuracy :  98.32  Class Accuracy :  10.310880829015545  Car class accuracy  10.310880829015545
Iter :  150 Batch :  7   Loss :  0.21671431  Accuracy :  93.93  Class Accuracy :  14.146039603960398  Car class accuracy  14.146039603960398
Iter :  150 Batch :  8   Loss :  0.18987541  Accuracy :  96.52  Class Accuracy :  12.221746575342465  Car class accuracy  12.221746575342465
Iter :  150 Batch :  9   Loss :  0.24116094  Accuracy :  94.855  Class Accuracy :  12.964318389752973  Car class accuracy  12.964318389752973
Iter :  150 Batch :  10   Loss :  0.03668718  Accuracy :  99.66000000000001  Class Accuracy :  9.927007299270073  Car class accuracy  9.927007299270073
Iter :  150 Batch :  11   Loss :  0.11633208  Accuracy :  98.795  Class Accuracy :  8.235294117647058  Car class accuracy  8.235294117647058
Iter :  150 Batch :  12   Loss :  0.13050008  Accuracy :  97.7  Class Accuracy :  12.87257019438445  Car class accuracy  12.87257019438445
Iter :  150 Batch :  13   Loss :  0.25690112  Accuracy :  95.935  Class Accuracy :  12.242774566473988  Car class accuracy  12.242774566473988
Iter :  150 Batch :  14   Loss :  0.08181897  Accuracy :  98.265  Class Accuracy :  11.17391304347826  Car class accuracy  11.17391304347826
Iter :  150 Batch :  15   Loss :  0.20421213  Accuracy :  96.63000000000001  Class Accuracy :  11.558630735615441  Car class accuracy  11.558630735615441
Iter :  150 Batch :  16   Loss :  0.010080071  Accuracy :  99.98  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 151 loss : 0.36727464 Accuracy: 93.16323070927514 Class Accuracy : 13.154591357251793
Iter :  151 Batch :  0   Loss :  0.13209611  Accuracy :  97.14  Class Accuracy :  11.89727463312369  Car class accuracy  11.89727463312369
Iter :  151 Batch :  1   Loss :  0.14088383  Accuracy :  97.76  Class Accuracy :  11.909361069836551  Car class accuracy  11.909361069836551
Iter :  151 Batch :  2   Loss :  0.026398886  Accuracy :  99.66000000000001  Class Accuracy :  10.45  Car class accuracy  10.45
Iter :  151 Batch :  3   Loss :  0.075258784  Accuracy :  99.495  Class Accuracy :  8.273381294964029  Car class accuracy  8.273381294964029
Iter :  151 Batch :  4   Loss :  0.049640108  Accuracy :  99.54499999999999  Class Accuracy :  3.888888888888889  Car class accuracy  3.888888888888889
Iter :  151 Batch :  5   Loss :  0.18346557  Accuracy :  97.745  Class Accuracy :  10.637908496732026  Car class accuracy  10.637908496732026
Iter :  151 Batch :  6   Loss :  0.0827379  Accuracy :  98.22999999999999  Class Accuracy :  11.609195402298852  Car class accuracy  11.609195402298852
Iter :  151 Batch :  7   Loss :  0.19566704  Accuracy :  96.145  Class Accuracy :  11.993883792048928  Car class accuracy  11.993883792048928
Iter :  151 Batch :  8   Loss :  0.39225507  Accuracy :  96.67  Class Accuracy :  10.138121546961324  Car class accuracy  10.138121546961324
Iter :  151 Batch :  9   Loss :  0.21280634  Accuracy :  95.41  Class Accuracy :  13.253128007699711  Car class accuracy  13.253128007699711
Iter :  151 Batch :  10   Loss :  0.029863238  Accuracy :  99.66000000000001  Class Accuracy :  9.830508474576272  Car class accuracy  9.830508474576272
Iter :  151 Batch :  11   Loss :  0.089831986  Accuracy :  99.335  Class Accuracy :  8.986486486486486  Car class accuracy  8.986486486486486
Iter :  151 Batch :  12   Loss :  0.09889934  Accuracy :  98.575  Class Accuracy :  12.777777777777777  Car class accuracy  12.777777777777777
Iter :  151 Batch :  13   Loss :  0.19162478  Accuracy :  94.04  Class Accuracy :  13.944856839872747  Car class accuracy  13.944856839872747
Iter :  151 Batch :  14   Loss :  0.09854525  Accuracy :  97.165  Class Accuracy :  12.933884297520661  Car class accuracy  12.933884297520661
Iter :  151 Batch :  15   Loss :  0.22713208  Accuracy :  95.23  Class Accuracy :  12.62982689747004  Car class accuracy  12.62982689747004
Iter :  151 Batch :  16   Loss :  0.015669132  Accuracy :  99.89  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 152 loss : 0.36572576 Accuracy: 93.19339721254356 Class Accuracy : 13.135824973524723
Iter :  152 Batch :  0   Loss :  0.14703158  Accuracy :  96.865  Class Accuracy :  11.331853496115427  Car class accuracy  11.331853496115427
Iter :  152 Batch :  1   Loss :  0.1755469  Accuracy :  95.685  Class Accuracy :  13.363957597173142  Car class accuracy  13.363957597173142
Iter :  152 Batch :  2   Loss :  0.02647981  Accuracy :  99.47500000000001  Class Accuracy :  10.43956043956044  Car class accuracy  10.43956043956044
Iter :  152 Batch :  3   Loss :  0.091089584  Accuracy :  99.36500000000001  Class Accuracy :  8.645161290322582  Car class accuracy  8.645161290322582
Iter :  152 Batch :  4   Loss :  0.23342177  Accuracy :  92.73  Class Accuracy :  8.26086956521739  Car class accuracy  8.26086956521739
Iter :  152 Batch :  5   Loss :  0.15893196  Accuracy :  96.80499999999999  Class Accuracy :  11.446654611211574  Car class accuracy  11.446654611211574
Iter :  152 Batch :  6   Loss :  0.10114687  Accuracy :  98.94500000000001  Class Accuracy :  7.715736040609136  Car class accuracy  7.715736040609136
Iter :  152 Batch :  7   Loss :  0.19321531  Accuracy :  96.86  Class Accuracy :  11.822194199243379  Car class accuracy  11.822194199243379
Iter :  152 Batch :  8   Loss :  0.13577783  Accuracy :  97.67  Class Accuracy :  11.707193515704153  Car class accuracy  11.707193515704153
Iter :  152 Batch :  9   Loss :  0.22430997  Accuracy :  95.825  Class Accuracy :  12.361853832442067  Car class accuracy  12.361853832442067
Iter :  152 Batch :  10   Loss :  0.035177093  Accuracy :  99.65  Class Accuracy :  10.220588235294118  Car class accuracy  10.220588235294118
Iter :  152 Batch :  11   Loss :  0.07477578  Accuracy :  99.555  Class Accuracy :  8.702290076335878  Car class accuracy  8.702290076335878
Iter :  152 Batch :  12   Loss :  0.0821161  Accuracy :  98.37  Class Accuracy :  11.83673469387755  Car class accuracy  11.83673469387755
Iter :  152 Batch :  13   Loss :  0.16388588  Accuracy :  95.66  Class Accuracy :  12.922041503084689  Car class accuracy  12.922041503084689
Iter :  152 Batch :  14   Loss :  0.07278289  Accuracy :  98.80499999999999  Class Accuracy :  10.448430493273541  Car class accuracy  10.448430493273541
Iter :  152 Batch :  15   Loss :  0.18740278  Accuracy :  96.36  Class Accuracy :  11.58917418459403  Car class accuracy  11.58917418459403
Iter :  152 Batch :  16   Loss :  0.009973973  Accuracy :  99.95  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 153 loss : 0.36414716 Accuracy: 93.22196923076923 Class Accuracy : 13.116403923226311
Iter :  153 Batch :  0   Loss :  0.16847914  Accuracy :  97.265  Class Accuracy :  11.321540062434963  Car class accuracy  11.321540062434963
Iter :  153 Batch :  1   Loss :  0.3189931  Accuracy :  96.485  Class Accuracy :  12.009907997169144  Car class accuracy  12.009907997169144
Iter :  153 Batch :  2   Loss :  0.024630984  Accuracy :  99.6  Class Accuracy :  10.656565656565657  Car class accuracy  10.656565656565657
Iter :  153 Batch :  3   Loss :  0.07552194  Accuracy :  99.625  Class Accuracy :  8.51063829787234  Car class accuracy  8.51063829787234
Iter :  153 Batch :  4   Loss :  0.11148738  Accuracy :  97.345  Class Accuracy :  13.571428571428573  Car class accuracy  13.571428571428573
Iter :  153 Batch :  5   Loss :  0.26012504  Accuracy :  96.355  Class Accuracy :  11.156679764243616  Car class accuracy  11.156679764243616
Iter :  153 Batch :  6   Loss :  0.093709916  Accuracy :  97.88  Class Accuracy :  11.282051282051283  Car class accuracy  11.282051282051283
Iter :  153 Batch :  7   Loss :  0.21879917  Accuracy :  93.97999999999999  Class Accuracy :  14.098159509202453  Car class accuracy  14.098159509202453
Iter :  153 Batch :  8   Loss :  0.20739184  Accuracy :  94.86  Class Accuracy :  14.223684210526317  Car class accuracy  14.223684210526317
Iter :  153 Batch :  9   Loss :  0.24588284  Accuracy :  94.69999999999999  Class Accuracy :  12.885525070955534  Car class accuracy  12.885525070955534
Iter :  153 Batch :  10   Loss :  0.029311774  Accuracy :  99.67  Class Accuracy :  9.473684210526315  Car class accuracy  9.473684210526315
Iter :  153 Batch :  11   Loss :  0.114421435  Accuracy :  98.85000000000001  Class Accuracy :  8.181818181818182  Car class accuracy  8.181818181818182
Iter :  153 Batch :  12   Loss :  0.30601147  Accuracy :  92.07499999999999  Class Accuracy :  17.880085653104924  Car class accuracy  17.880085653104924
Iter :  153 Batch :  13   Loss :  0.21438041  Accuracy :  96.58  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  153 Batch :  14   Loss :  0.08325408  Accuracy :  99.3  Class Accuracy :  8.903508771929825  Car class accuracy  8.903508771929825
Iter :  153 Batch :  15   Loss :  0.37609294  Accuracy :  96.89999999999999  Class Accuracy :  9.150370869858396  Car class accuracy  9.150370869858396
Iter :  153 Batch :  16   Loss :  0.016972955  Accuracy :  99.965  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 154 loss : 0.36287665 Accuracy: 93.2474417271685 Class Accuracy : 13.101721760985136
Iter :  154 Batch :  0   Loss :  0.16309927  Accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 96.975  Class Accuracy :  11.958863858961802  Car class accuracy  11.958863858961802
Iter :  154 Batch :  1   Loss :  0.2079381  Accuracy :  96.375  Class Accuracy :  12.37151248164464  Car class accuracy  12.37151248164464
Iter :  154 Batch :  2   Loss :  0.052432906  Accuracy :  98.565  Class Accuracy :  10.87179487179487  Car class accuracy  10.87179487179487
Iter :  154 Batch :  3   Loss :  0.14188139  Accuracy :  96.85000000000001  Class Accuracy :  11.538461538461538  Car class accuracy  11.538461538461538
Iter :  154 Batch :  4   Loss :  0.19133545  Accuracy :  95.825  Class Accuracy :  15.0  Car class accuracy  15.0
Iter :  154 Batch :  5   Loss :  0.23820935  Accuracy :  95.11500000000001  Class Accuracy :  12.633083244015719  Car class accuracy  12.633083244015719
Iter :  154 Batch :  6   Loss :  0.12893698  Accuracy :  96.6  Class Accuracy :  13.225806451612904  Car class accuracy  13.225806451612904
Iter :  154 Batch :  7   Loss :  0.20004144  Accuracy :  95.73  Class Accuracy :  12.795698924731184  Car class accuracy  12.795698924731184
Iter :  154 Batch :  8   Loss :  0.23267654  Accuracy :  95.165  Class Accuracy :  13.234309623430962  Car class accuracy  13.234309623430962
Iter :  154 Batch :  9   Loss :  0.20378089  Accuracy :  97.65  Class Accuracy :  10.08729388942774  Car class accuracy  10.08729388942774
Iter :  154 Batch :  10   Loss :  0.043732323  Accuracy :  99.42  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  154 Batch :  11   Loss :  0.11048624  Accuracy :  98.815  Class Accuracy :  7.142857142857142  Car class accuracy  7.142857142857142
Iter :  154 Batch :  12   Loss :  0.1289142  Accuracy :  98.275  Class Accuracy :  9.592274678111586  Car class accuracy  9.592274678111586
Iter :  154 Batch :  13   Loss :  0.17284721  Accuracy :  96.86  Class Accuracy :  11.563953488372094  Car class accuracy  11.563953488372094
Iter :  154 Batch :  14   Loss :  0.07495723  Accuracy :  98.815  Class Accuracy :  9.956140350877194  Car class accuracy  9.956140350877194
Iter :  154 Batch :  15   Loss :  0.3161964  Accuracy :  96.65  Class Accuracy :  10.125173852573017  Car class accuracy  10.125173852573017
Iter :  154 Batch :  16   Loss :  0.0084170345  Accuracy :  99.99  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 155 loss : 0.36152774 Accuracy: 93.27343583902808 Class Accuracy : 13.086295775586551
Iter :  155 Batch :  0   Loss :  0.18714273  Accuracy :  97.82499999999999  Class Accuracy :  9.843924191750277  Car class accuracy  9.843924191750277
Iter :  155 Batch :  1   Loss :  0.25281686  Accuracy :  95.975  Class Accuracy :  12.435344827586208  Car class accuracy  12.435344827586208
Iter :  155 Batch :  2   Loss :  0.032810032  Accuracy :  99.605  Class Accuracy :  9.15  Car class accuracy  9.15
Iter :  155 Batch :  3   Loss :  0.08293236  Accuracy :  99.625  Class Accuracy :  8.0  Car class accuracy  8.0
Iter :  155 Batch :  4   Loss :  0.1082557  Accuracy :  98.11  Class Accuracy :  3.076923076923077  Car class accuracy  3.076923076923077
Iter :  155 Batch :  5   Loss :  0.18377918  Accuracy :  96.56  Class Accuracy :  11.515702050350377  Car class accuracy  11.515702050350377
Iter :  155 Batch :  6   Loss :  0.09948553  Accuracy :  98.05  Class Accuracy :  10.842105263157894  Car class accuracy  10.842105263157894
Iter :  155 Batch :  7   Loss :  0.19514407  Accuracy :  94.98  Class Accuracy :  13.001949317738791  Car class accuracy  13.001949317738791
Iter :  155 Batch :  8   Loss :  0.34875074  Accuracy :  94.35  Class Accuracy :  13.325567850902736  Car class accuracy  13.325567850902736
Iter :  155 Batch :  9   Loss :  0.25711465  Accuracy :  96.075  Class Accuracy :  11.63265306122449  Car class accuracy  11.63265306122449
Iter :  155 Batch :  10   Loss :  0.035694007  Accuracy :  99.465  Class Accuracy :  9.696969696969697  Car class accuracy  9.696969696969697
Iter :  155 Batch :  11   Loss :  0.104707494  Accuracy :  99.385  Class Accuracy :  7.391304347826086  Car class accuracy  7.391304347826086
Iter :  155 Batch :  12   Loss :  0.14694473  Accuracy :  95.75  Class Accuracy :  13.98406374501992  Car class accuracy  13.98406374501992
Iter :  155 Batch :  13   Loss :  0.1910126  Accuracy :  95.025  Class Accuracy :  13.19112627986348  Car class accuracy  13.19112627986348
Iter :  155 Batch :  14   Loss :  0.07554386  Accuracy :  98.785  Class Accuracy :  10.285714285714285  Car class accuracy  10.285714285714285
Iter :  155 Batch :  15   Loss :  0.17762265  Accuracy :  96.165  Class Accuracy :  12.19208211143695  Car class accuracy  12.19208211143695
Iter :  155 Batch :  16   Loss :  0.018560806  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 156 loss : 0.36015177 Accuracy: 93.29983968313844 Class Accuracy : 13.066340438702921
Iter :  156 Batch :  0   Loss :  0.17888507  Accuracy :  95.50999999999999  Class Accuracy :  13.1062124248497  Car class accuracy  13.1062124248497
Iter :  156 Batch :  1   Loss :  0.19219355  Accuracy :  94.175  Class Accuracy :  15.396039603960396  Car class accuracy  15.396039603960396
Iter :  156 Batch :  2   Loss :  0.030639956  Accuracy :  99.64  Class Accuracy :  9.837837837837839  Car class accuracy  9.837837837837839
Iter :  156 Batch :  3   Loss :  0.07685044  Accuracy :  99.685  Class Accuracy :  8.424657534246576  Car class accuracy  8.424657534246576
Iter :  156 Batch :  4   Loss :  0.08756123  Accuracy :  98.81  Class Accuracy :  7.368421052631578  Car class accuracy  7.368421052631578
Iter :  156 Batch :  5   Loss :  0.20358916  Accuracy :  97.17  Class Accuracy :  11.105228325612178  Car class accuracy  11.105228325612178
Iter :  156 Batch :  6   Loss :  0.12084098  Accuracy :  99.2  Class Accuracy :  5.594059405940595  Car class accuracy  5.594059405940595
Iter :  156 Batch :  7   Loss :  0.2710319  Accuracy :  96.00999999999999  Class Accuracy :  11.701225259189444  Car class accuracy  11.701225259189444
Iter :  156 Batch :  8   Loss :  0.8454224  Accuracy :  95.345  Class Accuracy :  6.547960941987364  Car class accuracy  6.547960941987364
Iter :  156 Batch :  9   Loss :  0.24866909  Accuracy :  94.62  Class Accuracy :  12.95837023914969  Car class accuracy  12.95837023914969
Iter :  156 Batch :  10   Loss :  0.04563707  Accuracy :  98.875  Class Accuracy :  9.926470588235295  Car class accuracy  9.926470588235295
Iter :  156 Batch :  11   Loss :  0.20592271  Accuracy :  95.875  Class Accuracy :  12.056737588652481  Car class accuracy  12.056737588652481
Iter :  156 Batch :  12   Loss :  0.37377235  Accuracy :  90.565  Class Accuracy :  20.128479657387583  Car class accuracy  20.128479657387583
Iter :  156 Batch :  13   Loss :  0.38211694  Accuracy :  92.965  Class Accuracy :  14.424418604651162  Car class accuracy  14.424418604651162
Iter :  156 Batch :  14   Loss :  0.457425  Accuracy :  91.205  Class Accuracy :  11.943127962085306  Car class accuracy  11.943127962085306
Iter :  156 Batch :  15   Loss :  0.63282686  Accuracy :  86.83999999999999  Class Accuracy :  17.978963185574756  Car class accuracy  17.978963185574756
Iter :  156 Batch :  16   Loss :  0.37878695  Accuracy :  93.49  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 157 loss : 0.3596306 Accuracy: 93.31253935532233 Class Accuracy : 13.053735649630221
Iter :  157 Batch :  0   Loss :  0.28518096  Accuracy :  93.96  Class Accuracy :  14.094240837696335  Car class accuracy  14.094240837696335
Iter :  157 Batch :  1   Loss :  0.45456138  Accuracy :  88.055  Class Accuracy :  20.483516483516482  Car class accuracy  20.483516483516482
Iter :  157 Batch :  2   Loss :  0.164418  Accuracy :  94.62  Class Accuracy :  17.552083333333332  Car class accuracy  17.552083333333332
Iter :  157 Batch :  3   Loss :  0.2707247  Accuracy :  93.475  Class Accuracy :  15.079365079365079  Car class accuracy  15.079365079365079
Iter :  157 Batch :  4   Loss :  0.39921856  Accuracy :  88.44  Class Accuracy :  12.352941176470589  Car class accuracy  12.352941176470589
Iter :  157 Batch :  5   Loss :  0.36351785  Accuracy :  95.25  Class Accuracy :  12.058432934926959  Car class accuracy  12.058432934926959
Iter :  157 Batch :  6   Loss :  0.16356401  Accuracy :  96.235  Class Accuracy :  11.75438596491228  Car class accuracy  11.75438596491228
Iter :  157 Batch :  7   Loss :  0.32713178  Accuracy :  95.825  Class Accuracy :  12.034302048594569  Car class accuracy  12.034302048594569
Iter :  157 Batch :  8   Loss :  0.28742436  Accuracy :  96.69  Class Accuracy :  11.238377007607776  Car class accuracy  11.238377007607776
Iter :  157 Batch :  9   Loss :  0.3606418  Accuracy :  92.2  Class Accuracy :  14.54308093994778  Car class accuracy  14.54308093994778
Iter :  157 Batch :  10   Loss :  0.06380562  Accuracy :  99.165  Class Accuracy :  8.591549295774648  Car class accuracy  8.591549295774648
Iter :  157 Batch :  11   Loss :  0.10004198  Accuracy :  97.80499999999999  Class Accuracy :  11.824817518248176  Car class accuracy  11.824817518248176
Iter :  157 Batch :  12   Loss :  0.16635205  Accuracy :  97.63  Class Accuracy :  10.106837606837606  Car class accuracy  10.106837606837606
Iter :  157 Batch :  13   Loss :  0.32714996  Accuracy :  93.125  Class Accuracy :  13.944538766270515  Car class accuracy  13.944538766270515
Iter :  157 Batch :  14   Loss :  0.13665262  Accuracy :  96.005  Class Accuracy :  14.104803493449783  Car class accuracy  14.104803493449783
Iter :  157 Batch :  15   Loss :  0.37552968  Accuracy :  92.75999999999999  Class Accuracy :  12.885375494071146  Car class accuracy  12.885375494071146
Iter :  157 Batch :  16   Loss :  0.034871  Accuracy :  99.06  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 158 loss : 0.35894796 Accuracy: 93.3214729981378 Class Accuracy : 13.050285050724192
Iter :  158 Batch :  0   Loss :  0.4150962  Accuracy :  94.77499999999999  Class Accuracy :  9.104638619201726  Car class accuracy  9.104638619201726
Iter :  158 Batch :  1   Loss :  0.3260755  Accuracy :  95.55  Class Accuracy :  12.08567415730337  Car class accuracy  12.08567415730337
Iter :  158 Batch :  2   Loss :  0.06378934  Accuracy :  98.765  Class Accuracy :  11.5  Car class accuracy  11.5
Iter :  158 Batch :  3   Loss :  0.16991137  Accuracy :  96.27  Class Accuracy :  12.091503267973854  Car class accuracy  12.091503267973854
Iter :  158 Batch :  4   Loss :  0.21343079  Accuracy :  92.735  Class Accuracy :  13.636363636363635  Car class accuracy  13.636363636363635
Iter :  158 Batch :  5   Loss :  0.2463405  Accuracy :  96.385  Class Accuracy :  12.000677048070415  Car class accuracy  12.000677048070415
Iter :  158 Batch :  6   Loss :  0.14009197  Accuracy :  96.08  Class Accuracy :  16.0  Car class accuracy  16.0
Iter :  158 Batch :  7   Loss :  0.2199334  Accuracy :  94.11  Class Accuracy :  13.504366812227072  Car class accuracy  13.504366812227072
Iter :  158 Batch :  8   Loss :  1.0127118  Accuracy :  91.39500000000001  Class Accuracy :  12.461474385672638  Car class accuracy  12.461474385672638
Iter :  158 Batch :  9   Loss :  0.47553554  Accuracy :  90.815  Class Accuracy :  15.17098445595855  Car class accuracy  15.17098445595855
Iter :  158 Batch :  10   Loss :  0.12120767  Accuracy :  96.81  Class Accuracy :  13.125  Car class accuracy  13.125
Iter :  158 Batch :  11   Loss :  0.3222732  Accuracy :  89.60000000000001  Class Accuracy :  20.657894736842106  Car class accuracy  20.657894736842106
Iter :  158 Batch :  12   Loss :  0.4473831  Accuracy :  83.25  Class Accuracy :  25.530973451327434  Car class accuracy  25.530973451327434
Iter :  158 Batch :  13   Loss :  0.5079202  Accuracy :  86.96000000000001  Class Accuracy :  17.26835138387485  Car class accuracy  17.26835138387485
Iter :  158 Batch :  14   Loss :  0.19246802  Accuracy :  93.99  Class Accuracy :  14.700460829493087  Car class accuracy  14.700460829493087
Iter :  158 Batch :  15   Loss :  0.71633816  Accuracy :  87.08500000000001  Class Accuracy :  18.06020066889632  Car class accuracy  18.06020066889632
Iter :  158 Batch :  16   Loss :  0.16970496  Accuracy :  93.875  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 159 loss : 0.35882145 Accuracy: 93.31850666173206 Class Accuracy : 13.055852673814824
Iter :  159 Batch :  0   Loss :  0.2937304  Accuracy :  92.07499999999999  Class Accuracy :  13.86237513873474  Car class accuracy  13.86237513873474
Iter :  159 Batch :  1   Loss :  0.90976876  Accuracy :  85.32  Class Accuracy :  18.96030245746692  Car class accuracy  18.96030245746692
Iter :  159 Batch :  2   Loss :  0.11528435  Accuracy :  97.91  Class Accuracy :  7.929292929292929  Car class accuracy  7.929292929292929
Iter :  159 Batch :  3   Loss :  0.31316146  Accuracy :  90.16  Class Accuracy :  20.193548387096776  Car class accuracy  20.193548387096776
Iter :  159 Batch :  4   Loss :  0.5163264  Accuracy :  81.685  Class Accuracy :  26.315789473684216  Car class accuracy  26.315789473684216
Iter :  159 Batch :  5   Loss :  0.5847712  Accuracy :  90.58500000000001  Class Accuracy :  13.496357960457855  Car class accuracy  13.496357960457855
Iter :  159 Batch :  6   Loss :  0.3249378  Accuracy :  89.445  Class Accuracy :  15.320197044334977  Car class accuracy  15.320197044334977
Iter :  159 Batch :  7   Loss :  0.51398605  Accuracy :  85.925  Class Accuracy :  17.630026809651476  Car class accuracy  17.630026809651476
Iter :  159 Batch :  8   Loss :  0.5946838  Accuracy :  82.52000000000001  Class Accuracy :  24.09850107066381  Car class accuracy  24.09850107066381
Iter :  159 Batch :  9   Loss :  0.66659176  Accuracy :  77.78  Class Accuracy :  25.11363636363636  Car class accuracy  25.11363636363636
Iter :  159 Batch :  10   Loss :  0.09064581  Accuracy :  99.58500000000001  Class Accuracy :  6.7361111111111125  Car class accuracy  6.7361111111111125
Iter :  159 Batch :  11   Loss :  0.2649373  Accuracy :  92.77499999999999  Class Accuracy :  10.75862068965517  Car class accuracy  10.75862068965517
Iter :  159 Batch :  12   Loss :  0.4043458  Accuracy :  86.175  Class Accuracy :  17.67241379310345  Car class accuracy  17.67241379310345
Iter :  159 Batch :  13   Loss :  0.72445744  Accuracy :  88.185  Class Accuracy :  14.55512031337437  Car class accuracy  14.55512031337437
Iter :  159 Batch :  14   Loss :  0.21058598  Accuracy :  94.24  Class Accuracy :  15.066079295154184  Car class accuracy  15.066079295154184
Iter :  159 Batch :  15   Loss :  0.5637441  Accuracy :  89.03999999999999  Class Accuracy :  15.818431911966988  Car class accuracy  15.818431911966988
Iter :  159 Batch :  16   Loss :  0.14132595  Accuracy :  95.62  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 160 loss : 0.35923824 Accuracy: 93.29372195660169 Class Accuracy : 13.071144071128003
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__160_0.ckpt
saved prediction of 0 accuracy :  0.90775  class accuracy :  0.09096858638743456  car_class_accuracy :  0.09096858638743456
saved prediction of 1 accuracy :  0.87965  class accuracy :  0.18540653231410703  car_class_accuracy :  0.18540653231410703
saved prediction of 2 accuracy :  0.83765  class accuracy :  0.20828282828282826  car_class_accuracy :  0.20828282828282826
saved prediction of 3 accuracy :  0.92285  class accuracy :  0.13512420566146738  car_class_accuracy :  0.13512420566146738
saved prediction of 4 accuracy :  0.97735  class accuracy :  0.0892156862745098  car_class_accuracy :  0.0892156862745098
saved prediction of 5 accuracy :  0.91215  class accuracy :  0.09848484848484848  car_class_accuracy :  0.09848484848484848
saved prediction of 6 accuracy :  0.85515  class accuracy :  0.13395165823496347  car_class_accuracy :  0.13395165823496347
saved prediction of 7 accuracy :  0.8296  class accuracy :  0.26842105263157895  car_class_accuracy :  0.26842105263157895
saved prediction of 8 accuracy :  0.96025  class accuracy :  0.09642112578179292  car_class_accuracy :  0.09642112578179292
saved prediction of 9 accuracy :  0.93895  class accuracy :  0.13561643835616438  car_class_accuracy :  0.13561643835616438
saved prediction of 10 accuracy :  0.77635  class accuracy :  0.2708930540242558  car_class_accuracy :  0.2708930540242558
saved prediction of 11 accuracy :  0.954  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 12 accuracy :  0.8827  class accuracy :  0.13245920745920745  car_class_accuracy :  0.13245920745920745
saved prediction of 13 accuracy :  0.9674  class accuracy :  0.11007751937984496  car_class_accuracy :  0.11007751937984496
saved prediction of 14 accuracy :  0.78485  class accuracy :  0.33076923076923076  car_class_accuracy :  0.33076923076923076
saved prediction of 15 accuracy :  0.77395  class accuracy :  0.2541480820695807  car_class_accuracy :  0.2541480820695807
saved prediction of 16 accuracy :  0.89655  class accuracy :  0.1401418439716312  car_class_accuracy :  0.1401418439716312
saved prediction of 17 accuracy :  0.87575  class accuracy :  0.1437908496732026  car_class_accuracy :  0.1437908496732026
saved prediction of 18 accuracy :  0.865  class accuracy :  0.20447330447330447  car_class_accuracy :  0.20447330447330447
saved prediction of 19 accuracy :  0.9073  class accuracy :  0.1542857142857143  car_class_accuracy :  0.1542857142857143
saved prediction of 20 accuracy :  0.9121  class accuracy :  0.15342229875161428  car_class_accuracy :  0.15342229875161428
saved prediction of 21 accuracy :  0.9761  class accuracy :  0.0985294117647059  car_class_accuracy :  0.0985294117647059
saved prediction of 22 accuracy :  0.8823  class accuracy :  0.12183168316831683  car_class_accuracy :  0.12183168316831683
saved prediction of 23 accuracy :  0.85075  class accuracy :  0.13626062322946175  car_class_accuracy :  0.13626062322946175
saved prediction of 24 accuracy :  0.83  class accuracy :  0.23076923076923075  car_class_accuracy :  0.23076923076923075
saved prediction of 25 accuracy :  0.9543  class accuracy :  0.09552123552123552  car_class_accuracy :  0.09552123552123552
saved prediction of 26 accuracy :  0.93065  class accuracy :  0.15157068062827225  car_class_accuracy :  0.15157068062827225
saved prediction of 27 accuracy :  0.77865  class accuracy :  0.2594803370786517  car_class_accuracy :  0.2594803370786517
saved prediction of 28 accuracy :  0.95305  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 29 accuracy :  0.88065  class accuracy :  0.14009163802978236  car_class_accuracy :  0.14009163802978236
saved prediction of 30 accuracy :  0.9682  class accuracy :  0.10802919708029197  car_class_accuracy :  0.10802919708029197
saved prediction of 31 accuracy :  0.7964  class accuracy :  0.2598684210526316  car_class_accuracy :  0.2598684210526316
saved prediction of 32 accuracy :  0.76165  class accuracy :  0.2503585657370518  car_class_accuracy :  0.2503585657370518
saved prediction of 33 accuracy :  0.9027  class accuracy :  0.1439882697947214  car_class_accuracy :  0.1439882697947214
saved prediction of 34 accuracy :  0.8999  class accuracy :  0.12046908315565033  car_class_accuracy :  0.12046908315565033
saved prediction of 35 accuracy :  0.88815  class accuracy :  0.17758112094395279  car_class_accuracy :  0.17758112094395279
saved prediction of 36 accuracy :  0.8445  class accuracy :  0.22968036529680366  car_class_accuracy :  0.22968036529680366
saved prediction of 37 accuracy :  0.91325  class accuracy :  0.13787878787878788  car_class_accuracy :  0.13787878787878788
saved prediction of 38 accuracy :  0.97225  class accuracy :  0.10904522613065326  car_class_accuracy :  0.10904522613065326
saved prediction of 39 accuracy :  0.9158  class accuracy :  0.0913915857605178  car_class_accuracy :  0.0913915857605178
saved prediction of 40 accuracy :  0.8508  class accuracy :  0.13639455782312926  car_class_accuracy :  0.13639455782312926
saved prediction of 41 accuracy :  0.8261  class accuracy :  0.28823529411764703  car_class_accuracy :  0.28823529411764703
saved prediction of 42 accuracy :  0.95815  class accuracy :  0.0981822971548999  car_class_accuracy :  0.0981822971548999
saved prediction of 43 accuracy :  0.93535  class accuracy :  0.1413173652694611  car_class_accuracy :  0.1413173652694611
saved prediction of 44 accuracy :  0.83805  class accuracy :  0.23543388429752068  car_class_accuracy :  0.23543388429752068
saved prediction of 45 accuracy :  0.9507  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 46 accuracy :  0.888  class accuracy :  0.14319387153800825  car_class_accuracy :  0.14319387153800825
saved prediction of 47 accuracy :  0.9726  class accuracy :  0.11068702290076335  car_class_accuracy :  0.11068702290076335
saved prediction of 48 accuracy :  0.79585  class accuracy :  0.2848314606741573  car_class_accuracy :  0.2848314606741573
saved prediction of 49 accuracy :  0.6884  class accuracy :  0.3307845084409136  car_class_accuracy :  0.3307845084409136
saved prediction of 50 accuracy :  0.89615  class accuracy :  0.13584398117014124  car_class_accuracy :  0.13584398117014124
saved prediction of 51 accuracy :  0.89515  class accuracy :  0.11978723404255318  car_class_accuracy :  0.11978723404255318
saved prediction of 52 accuracy :  0.8432  class accuracy :  0.21949820788530466  car_class_accuracy :  0.21949820788530466
saved prediction of 53 accuracy :  0.82345  class accuracy :  0.2402625820568928  car_class_accuracy :  0.2402625820568928
saved prediction of 54 accuracy :  0.9213  class accuracy :  0.13784860557768924  car_class_accuracy :  0.13784860557768924
saved prediction of 55 accuracy :  0.9761  class accuracy :  0.10260416666666668  car_class_accuracy :  0.10260416666666668
saved prediction of 56 accuracy :  0.9101  class accuracy :  0.10451650260567458  car_class_accuracy :  0.10451650260567458
saved prediction of 57 accuracy :  0.85755  class accuracy :  0.1375206611570248  car_class_accuracy :  0.1375206611570248
saved prediction of 58 accuracy :  0.831  class accuracy :  0.24  car_class_accuracy :  0.24
saved prediction of 59 accuracy :  0.95235  class accuracy :  0.09262958963282938  car_class_accuracy :  0.09262958963282938
saved prediction of 60 accuracy :  0.9371  class accuracy :  0.1579746835443038  car_class_accuracy :  0.1579746835443038
saved prediction of 61 accuracy :  0.82135  class accuracy :  0.25582226762002047  car_class_accuracy :  0.25582226762002047
saved prediction of 62 accuracy :  0.95205  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 63 accuracy :  0.8831  class accuracy :  0.13544083526682132  car_class_accuracy :  0.13544083526682132
saved prediction of 64 accuracy :  0.9681  class accuracy :  0.10514705882352941  car_class_accuracy :  0.10514705882352941
saved prediction of 65 accuracy :  0.78925  class accuracy :  0.3  car_class_accuracy :  0.3
saved prediction of 66 accuracy :  0.7701  class accuracy :  0.25131698455949136  car_class_accuracy :  0.25131698455949136
saved prediction of 67 accuracy :  0.89275  class accuracy :  0.1356534090909091  car_class_accuracy :  0.1356534090909091
saved prediction of 68 accuracy :  0.9045  class accuracy :  0.11944739638682253  car_class_accuracy :  0.11944739638682253
saved prediction of 69 accuracy :  0.8567  class accuracy :  0.2096987509184423  car_class_accuracy :  0.2096987509184423
saved prediction of 70 accuracy :  0.8252  class accuracy :  0.23886363636363636  car_class_accuracy :  0.23886363636363636
saved prediction of 71 accuracy :  0.90715  class accuracy :  0.1611062335381914  car_class_accuracy :  0.1611062335381914
saved prediction of 72 accuracy :  0.96405  class accuracy :  0.09945652173913043  car_class_accuracy :  0.09945652173913043
saved prediction of 73 accuracy :  0.8862  class accuracy :  0.12121062992125983  car_class_accuracy :  0.12121062992125983
saved prediction of 74 accuracy :  0.83925  class accuracy :  0.13721168631471042  car_class_accuracy :  0.13721168631471042
saved prediction of 75 accuracy :  0.82845  class accuracy :  0.25  car_class_accuracy :  0.25
saved prediction of 76 accuracy :  0.95515  class accuracy :  0.09671337579617835  car_class_accuracy :  0.09671337579617835
saved prediction of 77 accuracy :  0.9356  class accuracy :  0.16046511627906976  car_class_accuracy :  0.16046511627906976
saved prediction of 78 accuracy :  0.7525  class accuracy :  0.28909410729991203  car_class_accuracy :  0.28909410729991203
saved prediction of 79 accuracy :  0.953  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 80 accuracy :  0.8755  class accuracy :  0.1328301886792453  car_class_accuracy :  0.1328301886792453
saved prediction of 81 accuracy :  0.96605  class accuracy :  0.1037593984962406  car_class_accuracy :  0.1037593984962406
saved prediction of 82 accuracy :  0.7886  class accuracy :  0.3183673469387755  car_class_accuracy :  0.3183673469387755
saved prediction of 83 accuracy :  0.72845  class accuracy :  0.2805157593123209  car_class_accuracy :  0.2805157593123209
saved prediction of 84 accuracy :  0.8937  class accuracy :  0.149607982893799  car_class_accuracy :  0.149607982893799
saved prediction of 85 accuracy :  0.8736  class accuracy :  0.1427716849451645  car_class_accuracy :  0.1427716849451645
saved prediction of 86 accuracy :  0.8887  class accuracy :  0.17700220426157237  car_class_accuracy :  0.17700220426157237
saved prediction of 87 accuracy :  0.90585  class accuracy :  0.1589247311827957  car_class_accuracy :  0.1589247311827957
saved prediction of 88 accuracy :  0.91175  class accuracy :  0.1400173235166739  car_class_accuracy :  0.1400173235166739
saved prediction of 89 accuracy :  0.978  class accuracy :  0.08629441624365483  car_class_accuracy :  0.08629441624365483
saved prediction of 90 accuracy :  0.8902  class accuracy :  0.12377833753148615  car_class_accuracy :  0.12377833753148615
saved prediction of 91 accuracy :  0.857  class accuracy :  0.12682666666666667  car_class_accuracy :  0.12682666666666667
saved prediction of 92 accuracy :  0.8298  class accuracy :  0.2652173913043478  car_class_accuracy :  0.2652173913043478
saved prediction of 93 accuracy :  0.95805  class accuracy :  0.09723092998955067  car_class_accuracy :  0.09723092998955067
saved prediction of 94 accuracy :  0.94055  class accuracy :  0.14910025706940874  car_class_accuracy :  0.14910025706940874
saved prediction of 95 accuracy :  0.8177  class accuracy :  0.21710261569416497  car_class_accuracy :  0.21710261569416497
saved prediction of 96 accuracy :  0.9527  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 97 accuracy :  0.8854  class accuracy :  0.1397212543554007  car_class_accuracy :  0.1397212543554007
saved prediction of 98 accuracy :  0.9742  class accuracy :  0.1106060606060606  car_class_accuracy :  0.1106060606060606
saved prediction of 99 accuracy :  0.7929  class accuracy :  0.3108695652173913  car_class_accuracy :  0.3108695652173913
Iter :  160 Batch :  0   Loss :  0.35767522  Accuracy :  92.435  Class Accuracy :  13.80694143167028  Car class accuracy  13.80694143167028
Iter :  160 Batch :  1   Loss :  0.49021244  Accuracy :  89.49000000000001  Class Accuracy :  17.865248226950353  Car class accuracy  17.865248226950353
Iter :  160 Batch :  2   Loss :  0.11634358  Accuracy :  98.83999999999999  Class Accuracy :  8.67816091954023  Car class accuracy  8.67816091954023
Iter :  160 Batch :  3   Loss :  0.2440435  Accuracy :  93.345  Class Accuracy :  16.062992125984252  Car class accuracy  16.062992125984252
Iter :  160 Batch :  4   Loss :  0.29213053  Accuracy :  88.505  Class Accuracy :  24.210526315789473  Car class accuracy  24.210526315789473
Iter :  160 Batch :  5   Loss :  0.6599263  Accuracy :  93.315  Class Accuracy :  11.747621432148222  Car class accuracy  11.747621432148222
Iter :  160 Batch :  6   Loss :  0.19163388  Accuracy :  94.045  Class Accuracy :  14.692737430167597  Car class accuracy  14.692737430167597
Iter :  160 Batch :  7   Loss :  0.5251789  Accuracy :  91.9  Class Accuracy :  13.4983922829582  Car class accuracy  13.4983922829582
Iter :  160 Batch :  8   Loss :  0.4998156  Accuracy :  94.33  Class Accuracy :  11.994770265222263  Car class accuracy  11.994770265222263
Iter :  160 Batch :  9   Loss :  0.55540437  Accuracy :  83.365  Class Accuracy :  21.17132867132867  Car class accuracy  21.17132867132867
Iter :  160 Batch :  10   Loss :  0.082072705  Accuracy :  98.9  Class Accuracy :  9.863013698630137  Car class accuracy  9.863013698630137
Iter :  160 Batch :  11   Loss :  0.20952773  Accuracy :  94.645  Class Accuracy :  14.387096774193548  Car class accuracy  14.387096774193548
Iter :  160 Batch :  12   Loss :  0.39712057  Accuracy :  87.115  Class Accuracy :  18.840262582056894  Car class accuracy  18.840262582056894
Iter :  160 Batch :  13   Loss :  0.5009328  Accuracy :  84.45  Class Accuracy :  19.250688705234158  Car class accuracy  19.250688705234158
Iter :  160 Batch :  14   Loss :  0.21559621  Accuracy :  94.16  Class Accuracy :  14.412955465587046  Car class accuracy  14.412955465587046
Iter :  160 Batch :  15   Loss :  0.44549024  Accuracy :  87.33  Class Accuracy :  18.593421973407978  Car class accuracy  18.593421973407978
Iter :  160 Batch :  16   Loss :  0.07457509  Accuracy :  98.115  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 161 loss : 0.3591471 Accuracy: 93.28578764619883 Class Accuracy : 13.08096377474339
Iter :  161 Batch :  0   Loss :  0.2371866  Accuracy :  95.55  Class Accuracy :  12.356948228882834  Car class accuracy  12.356948228882834
Iter :  161 Batch :  1   Loss :  0.41794842  Accuracy :  89.835  Class Accuracy :  18.870014771048744  Car class accuracy  18.870014771048744
Iter :  161 Batch :  2   Loss :  0.069553584  Accuracy :  99.36  Class Accuracy :  6.71957671957672  Car class accuracy  6.71957671957672
Iter :  161 Batch :  3   Loss :  0.162973  Accuracy :  99.00999999999999  Class Accuracy :  5.644171779141104  Car class accuracy  5.644171779141104
Iter :  161 Batch :  4   Loss :  0.2966292  Accuracy :  89.18  Class Accuracy :  18.0  Car class accuracy  18.0
Iter :  161 Batch :  5   Loss :  0.34077448  Accuracy :  97.155  Class Accuracy :  11.179245283018869  Car class accuracy  11.179245283018869
Iter :  161 Batch :  6   Loss :  0.1308486  Accuracy :  95.81  Class Accuracy :  13.229166666666666  Car class accuracy  13.229166666666666
Iter :  161 Batch :  7   Loss :  0.42197606  Accuracy :  89.725  Class Accuracy :  15.454545454545453  Car class accuracy  15.454545454545453
Iter :  161 Batch :  8   Loss :  0.37865975  Accuracy :  93.66  Class Accuracy :  13.82969798657718  Car class accuracy  13.82969798657718
Iter :  161 Batch :  9   Loss :  0.42475545  Accuracy :  90.645  Class Accuracy :  15.111326234269121  Car class accuracy  15.111326234269121
Iter :  161 Batch :  10   Loss :  0.07079934  Accuracy :  99.645  Class Accuracy :  8.37037037037037  Car class accuracy  8.37037037037037
Iter :  161 Batch :  11   Loss :  0.18760008  Accuracy :  95.245  Class Accuracy :  13.767123287671232  Car class accuracy  13.767123287671232
Iter :  161 Batch :  12   Loss :  0.2040686  Accuracy :  93.485  Class Accuracy :  16.14604462474645  Car class accuracy  16.14604462474645
Iter :  161 Batch :  13   Loss :  0.3240486  Accuracy :  91.57499999999999  Class Accuracy :  14.819143016138009  Car class accuracy  14.819143016138009
Iter :  161 Batch :  14   Loss :  0.110425144  Accuracy :  97.00999999999999  Class Accuracy :  12.390438247011952  Car class accuracy  12.390438247011952
Iter :  161 Batch :  15   Loss :  0.37105727  Accuracy :  93.78  Class Accuracy :  12.296243798724309  Car class accuracy  12.296243798724309
Iter :  161 Batch :  16   Loss :  0.02374899  Accuracy :  99.89  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 162 loss : 0.35844517 Accuracy: 93.29476026153287 Class Accuracy : 13.075808552185363
Iter :  162 Batch :  0   Loss :  0.23112568  Accuracy :  95.39999999999999  Class Accuracy :  12.873326467559215  Car class accuracy  12.873326467559215
Iter :  162 Batch :  1   Loss :  0.3002887  Accuracy :  96.825  Class Accuracy :  11.696927374301676  Car class accuracy  11.696927374301676
Iter :  162 Batch :  2   Loss :  0.06235321  Accuracy :  99.15  Class Accuracy :  8.774509803921568  Car class accuracy  8.774509803921568
Iter :  162 Batch :  3   Loss :  0.11569973  Accuracy :  98.79  Class Accuracy :  10.066225165562914  Car class accuracy  10.066225165562914
Iter :  162 Batch :  4   Loss :  0.27536762  Accuracy :  91.03  Class Accuracy :  16.071428571428573  Car class accuracy  16.071428571428573
Iter :  162 Batch :  5   Loss :  0.278129  Accuracy :  96.0  Class Accuracy :  11.830265848670756  Car class accuracy  11.830265848670756
Iter :  162 Batch :  6   Loss :  0.12278788  Accuracy :  98.925  Class Accuracy :  7.75  Car class accuracy  7.75
Iter :  162 Batch :  7   Loss :  0.23882832  Accuracy :  94.99499999999999  Class Accuracy :  12.935034802784223  Car class accuracy  12.935034802784223
Iter :  162 Batch :  8   Loss :  0.288847  Accuracy :  95.555  Class Accuracy :  12.937392795883362  Car class accuracy  12.937392795883362
Iter :  162 Batch :  9   Loss :  0.3492991  Accuracy :  93.445  Class Accuracy :  12.502512562814069  Car class accuracy  12.502512562814069
Iter :  162 Batch :  10   Loss :  0.068349846  Accuracy :  99.655  Class Accuracy :  8.31081081081081  Car class accuracy  8.31081081081081
Iter :  162 Batch :  11   Loss :  0.16324072  Accuracy :  95.025  Class Accuracy :  14.117647058823529  Car class accuracy  14.117647058823529
Iter :  162 Batch :  12   Loss :  0.18951511  Accuracy :  92.53  Class Accuracy :  17.024608501118568  Car class accuracy  17.024608501118568
Iter :  162 Batch :  13   Loss :  0.2982037  Accuracy :  90.89  Class Accuracy :  15.56578234975636  Car class accuracy  15.56578234975636
Iter :  162 Batch :  14   Loss :  0.08173976  Accuracy :  98.96000000000001  Class Accuracy :  9.688888888888888  Car class accuracy  9.688888888888888
Iter :  162 Batch :  15   Loss :  0.2496406  Accuracy :  93.305  Class Accuracy :  14.880866425992782  Car class accuracy  14.880866425992782
Iter :  162 Batch :  16   Loss :  0.02406492  Accuracy :  99.78  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 163 loss : 0.3574502 Accuracy: 93.3107346570397 Class Accuracy : 13.066688509600946
Iter :  163 Batch :  0   Loss :  0.14654942  Accuracy :  96.475  Class Accuracy :  13.138297872340427  Car class accuracy  13.138297872340427
Iter :  163 Batch :  1   Loss :  0.24109155  Accuracy :  94.22  Class Accuracy :  13.81195335276968  Car class accuracy  13.81195335276968
Iter :  163 Batch :  2   Loss :  0.04171736  Accuracy :  99.31  Class Accuracy :  10.105263157894736  Car class accuracy  10.105263157894736
Iter :  163 Batch :  3   Loss :  0.08665298  Accuracy :  99.535  Class Accuracy :  7.866666666666666  Car class accuracy  7.866666666666666
Iter :  163 Batch :  4   Loss :  0.14274105  Accuracy :  96.81  Class Accuracy :  8.0  Car class accuracy  8.0
Iter :  163 Batch :  5   Loss :  0.22319283  Accuracy :  96.795  Class Accuracy :  11.366317169069461  Car class accuracy  11.366317169069461
Iter :  163 Batch :  6   Loss :  0.06720076  Accuracy :  98.66  Class Accuracy :  10.578034682080926  Car class accuracy  10.578034682080926
Iter :  163 Batch :  7   Loss :  0.6288197  Accuracy :  95.475  Class Accuracy :  7.135802469135802  Car class accuracy  7.135802469135802
Iter :  163 Batch :  8   Loss :  0.23866619  Accuracy :  95.27  Class Accuracy :  13.627705627705627  Car class accuracy  13.627705627705627
Iter :  163 Batch :  9   Loss :  0.27529672  Accuracy :  93.97999999999999  Class Accuracy :  13.439849624060148  Car class accuracy  13.439849624060148
Iter :  163 Batch :  10   Loss :  0.062189307  Accuracy :  98.465  Class Accuracy :  10.625  Car class accuracy  10.625
Iter :  163 Batch :  11   Loss :  0.11081367  Accuracy :  98.355  Class Accuracy :  10.295857988165679  Car class accuracy  10.295857988165679
Iter :  163 Batch :  12   Loss :  0.585896  Accuracy :  84.22500000000001  Class Accuracy :  23.348214285714285  Car class accuracy  23.348214285714285
Iter :  163 Batch :  13   Loss :  0.47866505  Accuracy :  88.575  Class Accuracy :  16.573464912280702  Car class accuracy  16.573464912280702
Iter :  163 Batch :  14   Loss :  0.10733281  Accuracy :  97.57000000000001  Class Accuracy :  11.659574468085106  Car class accuracy  11.659574468085106
Iter :  163 Batch :  15   Loss :  0.2696147  Accuracy :  93.49499999999999  Class Accuracy :  13.791130185979972  Car class accuracy  13.791130185979972
Iter :  163 Batch :  16   Loss :  0.0682882  Accuracy :  98.57000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 164 loss : 0.35662425 Accuracy: 93.3249085037675 Class Accuracy : 13.057082993920549
Iter :  164 Batch :  0   Loss :  0.20010504  Accuracy :  94.795  Class Accuracy :  13.151308304891923  Car class accuracy  13.151308304891923
Iter :  164 Batch :  1   Loss :  0.24784939  Accuracy :  94.985  Class Accuracy :  14.139900071377587  Car class accuracy  14.139900071377587
Iter :  164 Batch :  2   Loss :  0.058382623  Accuracy :  98.7  Class Accuracy :  12.0  Car class accuracy  12.0
Iter :  164 Batch :  3   Loss :  0.17595603  Accuracy :  97.165  Class Accuracy :  9.722222222222223  Car class accuracy  9.722222222222223
Iter :  164 Batch :  4   Loss :  0.20387703  Accuracy :  94.76  Class Accuracy :  8.5  Car class accuracy  8.5
Iter :  164 Batch :  5   Loss :  0.2510798  Accuracy :  96.235  Class Accuracy :  11.587175410704823  Car class accuracy  11.587175410704823
Iter :  164 Batch :  6   Loss :  0.13610598  Accuracy :  98.665  Class Accuracy :  10.105820105820108  Car class accuracy  10.105820105820108
Iter :  164 Batch :  7   Loss :  0.24794514  Accuracy :  97.005  Class Accuracy :  11.465666474321985  Car class accuracy  11.465666474321985
Iter :  164 Batch :  8   Loss :  0.74398285  Accuracy :  92.225  Class Accuracy :  6.562091503267974  Car class accuracy  6.562091503267974
Iter :  164 Batch :  9   Loss :  0.39180395  Accuracy :  95.595  Class Accuracy :  10.686813186813186  Car class accuracy  10.686813186813186
Iter :  164 Batch :  10   Loss :  0.05325111  Accuracy :  98.91  Class Accuracy :  9.202898550724639  Car class accuracy  9.202898550724639
Iter :  164 Batch :  11   Loss :  0.16817373  Accuracy :  96.785  Class Accuracy :  10.921052631578947  Car class accuracy  10.921052631578947
Iter :  164 Batch :  12   Loss :  0.3368581  Accuracy :  87.115  Class Accuracy :  20.95860566448802  Car class accuracy  20.95860566448802
Iter :  164 Batch :  13   Loss :  0.36521158  Accuracy :  91.855  Class Accuracy :  14.310344827586208  Car class accuracy  14.310344827586208
Iter :  164 Batch :  14   Loss :  0.22012424  Accuracy :  94.45  Class Accuracy :  13.884615384615383  Car class accuracy  13.884615384615383
Iter :  164 Batch :  15   Loss :  0.3127627  Accuracy :  94.88  Class Accuracy :  12.27553118574366  Car class accuracy  12.27553118574366
Iter :  164 Batch :  16   Loss :  0.175605  Accuracy :  95.36  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 165 loss : 0.35599172 Accuracy: 93.33666369472182 Class Accuracy : 13.0454937052713
Iter :  165 Batch :  0   Loss :  0.27341685  Accuracy :  92.65  Class Accuracy :  14.078807241746539  Car class accuracy  14.078807241746539
Iter :  165 Batch :  1   Loss :  0.23432785  Accuracy :  94.425  Class Accuracy :  14.857975236707938  Car class accuracy  14.857975236707938
Iter :  165 Batch :  2   Loss :  0.097436935  Accuracy :  97.32499999999999  Class Accuracy :  14.182692307692307  Car class accuracy  14.182692307692307
Iter :  165 Batch :  3   Loss :  0.26348886  Accuracy :  92.66499999999999  Class Accuracy :  14.407894736842106  Car class accuracy  14.407894736842106
Iter :  165 Batch :  4   Loss :  0.49049872  Accuracy :  86.14500000000001  Class Accuracy :  22.631578947368418  Car class accuracy  22.631578947368418
Iter :  165 Batch :  5   Loss :  0.21720447  Accuracy :  97.175  Class Accuracy :  11.005489021956087  Car class accuracy  11.005489021956087
Iter :  165 Batch :  6   Loss :  0.14939195  Accuracy :  96.175  Class Accuracy :  13.85786802030457  Car class accuracy  13.85786802030457
Iter :  165 Batch :  7   Loss :  0.32329932  Accuracy :  90.8  Class Accuracy :  15.698234349919742  Car class accuracy  15.698234349919742
Iter :  165 Batch :  8   Loss :  0.28040612  Accuracy :  96.19  Class Accuracy :  12.419911286347956  Car class accuracy  12.419911286347956
Iter :  165 Batch :  9   Loss :  0.39218414  Accuracy :  89.095  Class Accuracy :  17.1301247771836  Car class accuracy  17.1301247771836
Iter :  165 Batch :  10   Loss :  0.036817428  Accuracy :  99.54499999999999  Class Accuracy :  9.0  Car class accuracy  9.0
Iter :  165 Batch :  11   Loss :  0.17701447  Accuracy :  97.765  Class Accuracy :  6.148648648648649  Car class accuracy  6.148648648648649
Iter :  165 Batch :  12   Loss :  0.3936958  Accuracy :  91.605  Class Accuracy :  14.232365145228215  Car class accuracy  14.232365145228215
Iter :  165 Batch :  13   Loss :  0.32261014  Accuracy :  95.75  Class Accuracy :  11.320149652592198  Car class accuracy  11.320149652592198
Iter :  165 Batch :  14   Loss :  0.07190919  Accuracy :  98.965  Class Accuracy :  9.719999999999999  Car class accuracy  9.719999999999999
Iter :  165 Batch :  15   Loss :  0.27773023  Accuracy :  95.555  Class Accuracy :  11.882519462137298  Car class accuracy  11.882519462137298
Iter :  165 Batch :  16   Loss :  0.028582739  Accuracy :  99.75500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 166 loss : 0.35527503 Accuracy: 93.34547678128322 Class Accuracy : 13.042232757325559
Iter :  166 Batch :  0   Loss :  0.20229314  Accuracy :  95.675  Class Accuracy :  14.145077720207253  Car class accuracy  14.145077720207253
Iter :  166 Batch :  1   Loss :  0.22111163  Accuracy :  94.925  Class Accuracy :  14.283707865168541  Car class accuracy  14.283707865168541
Iter :  166 Batch :  2   Loss :  0.0781668  Accuracy :  97.33000000000001  Class Accuracy :  13.472222222222225  Car class accuracy  13.472222222222225
Iter :  166 Batch :  3   Loss :  0.12841797  Accuracy :  97.8  Class Accuracy :  10.625  Car class accuracy  10.625
Iter :  166 Batch :  4   Loss :  0.19748914  Accuracy :  92.0  Class Accuracy :  19.411764705882355  Car class accuracy  19.411764705882355
Iter :  166 Batch :  5   Loss :  0.2989512  Accuracy :  97.31  Class Accuracy :  10.703596744552375  Car class accuracy  10.703596744552375
Iter :  166 Batch :  6   Loss :  0.12536205  Accuracy :  95.12  Class Accuracy :  15.561224489795917  Car class accuracy  15.561224489795917
Iter :  166 Batch :  7   Loss :  0.33385038  Accuracy :  92.525  Class Accuracy :  14.34864104967198  Car class accuracy  14.34864104967198
Iter :  166 Batch :  8   Loss :  0.37590757  Accuracy :  93.69  Class Accuracy :  14.22027290448343  Car class accuracy  14.22027290448343
Iter :  166 Batch :  9   Loss :  0.27114314  Accuracy :  94.035  Class Accuracy :  13.796460176991149  Car class accuracy  13.796460176991149
Iter :  166 Batch :  10   Loss :  0.07727629  Accuracy :  99.33  Class Accuracy :  8.702290076335878  Car class accuracy  8.702290076335878
Iter :  166 Batch :  11   Loss :  0.08658483  Accuracy :  99.08  Class Accuracy :  9.647887323943664  Car class accuracy  9.647887323943664
Iter :  166 Batch :  12   Loss :  0.24186411  Accuracy :  90.36999999999999  Class Accuracy :  20.246085011185684  Car class accuracy  20.246085011185684
Iter :  166 Batch :  13   Loss :  0.26275834  Accuracy :  93.36  Class Accuracy :  13.546291283161885  Car class accuracy  13.546291283161885
Iter :  166 Batch :  14   Loss :  0.11926378  Accuracy :  97.0  Class Accuracy :  11.535269709543568  Car class accuracy  11.535269709543568
Iter :  166 Batch :  15   Loss :  0.26530108  Accuracy :  91.985  Class Accuracy :  15.304659498207885  Car class accuracy  15.304659498207885
Iter :  166 Batch :  16   Loss :  0.02105272  Accuracy :  99.85000000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 167 loss : 0.35431206 Accuracy: 93.3576374207188 Class Accuracy : 13.041469013106678
Iter :  167 Batch :  0   Loss :  0.15881114  Accuracy :  96.28  Class Accuracy :  11.856846473029044  Car class accuracy  11.856846473029044
Iter :  167 Batch :  1   Loss :  0.2151208  Accuracy :  95.53  Class Accuracy :  13.130742049469966  Car class accuracy  13.130742049469966
Iter :  167 Batch :  2   Loss :  0.040552653  Accuracy :  99.215  Class Accuracy :  11.134020618556702  Car class accuracy  11.134020618556702
Iter :  167 Batch :  3   Loss :  0.08326137  Accuracy :  99.015  Class Accuracy :  8.852459016393443  Car class accuracy  8.852459016393443
Iter :  167 Batch :  4   Loss :  0.13184541  Accuracy :  96.82  Class Accuracy :  5.263157894736842  Car class accuracy  5.263157894736842
Iter :  167 Batch :  5   Loss :  0.19842306  Accuracy :  97.04  Class Accuracy :  11.28286014721346  Car class accuracy  11.28286014721346
Iter :  167 Batch :  6   Loss :  0.105803214  Accuracy :  97.89  Class Accuracy :  9.947643979057592  Car class accuracy  9.947643979057592
Iter :  167 Batch :  7   Loss :  0.19681472  Accuracy :  96.455  Class Accuracy :  11.922183507549363  Car class accuracy  11.922183507549363
Iter :  167 Batch :  8   Loss :  0.25775003  Accuracy :  93.855  Class Accuracy :  14.122415889744627  Car class accuracy  14.122415889744627
Iter :  167 Batch :  9   Loss :  0.23319618  Accuracy :  96.53  Class Accuracy :  11.074681238615664  Car class accuracy  11.074681238615664
Iter :  167 Batch :  10   Loss :  0.039090272  Accuracy :  99.72999999999999  Class Accuracy :  9.44  Car class accuracy  9.44
Iter :  167 Batch :  11   Loss :  0.08443919  Accuracy :  99.395  Class Accuracy :  7.739726027397261  Car class accuracy  7.739726027397261
Iter :  167 Batch :  12   Loss :  0.095072865  Accuracy :  98.25  Class Accuracy :  13.712446351931332  Car class accuracy  13.712446351931332
Iter :  167 Batch :  13   Loss :  0.247206  Accuracy :  96.75  Class Accuracy :  11.159250585480093  Car class accuracy  11.159250585480093
Iter :  167 Batch :  14   Loss :  0.063734636  Accuracy :  99.08  Class Accuracy :  9.821428571428571  Car class accuracy  9.821428571428571
Iter :  167 Batch :  15   Loss :  0.19396605  Accuracy :  97.285  Class Accuracy :  10.870748299319729  Car class accuracy  10.870748299319729
Iter :  167 Batch :  16   Loss :  0.015991766  Accuracy :  99.97500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 168 loss : 0.3530293 Accuracy: 93.38286164623466 Class Accuracy : 13.023824753011096
Iter :  168 Batch :  0   Loss :  0.14472722  Accuracy :  96.71499999999999  Class Accuracy :  12.468619246861925  Car class accuracy  12.468619246861925
Iter :  168 Batch :  1   Loss :  0.19377832  Accuracy :  96.82  Class Accuracy :  12.0906432748538  Car class accuracy  12.0906432748538
Iter :  168 Batch :  2   Loss :  0.037200958  Accuracy :  99.315  Class Accuracy :  10.280898876404494  Car class accuracy  10.280898876404494
Iter :  168 Batch :  3   Loss :  0.0906292  Accuracy :  98.09  Class Accuracy :  10.373134328358208  Car class accuracy  10.373134328358208
Iter :  168 Batch :  4   Loss :  0.13899763  Accuracy :  96.775  Class Accuracy :  12.777777777777777  Car class accuracy  12.777777777777777
Iter :  168 Batch :  5   Loss :  0.45211104  Accuracy :  93.985  Class Accuracy :  11.497326203208555  Car class accuracy  11.497326203208555
Iter :  168 Batch :  6   Loss :  0.090222314  Accuracy :  97.89  Class Accuracy :  13.608247422680414  Car class accuracy  13.608247422680414
Iter :  168 Batch :  7   Loss :  0.22365728  Accuracy :  93.57  Class Accuracy :  14.068002428658167  Car class accuracy  14.068002428658167
Iter :  168 Batch :  8   Loss :  0.21030733  Accuracy :  94.38  Class Accuracy :  14.546240276577354  Car class accuracy  14.546240276577354
Iter :  168 Batch :  9   Loss :  0.23422876  Accuracy :  95.30499999999999  Class Accuracy :  12.739593417231365  Car class accuracy  12.739593417231365
Iter :  168 Batch :  10   Loss :  0.036524035  Accuracy :  99.74499999999999  Class Accuracy :  8.721804511278194  Car class accuracy  8.721804511278194
Iter :  168 Batch :  11   Loss :  0.08976541  Accuracy :  99.53  Class Accuracy :  8.289473684210527  Car class accuracy  8.289473684210527
Iter :  168 Batch :  12   Loss :  0.14724512  Accuracy :  97.41  Class Accuracy :  12.775510204081634  Car class accuracy  12.775510204081634
Iter :  168 Batch :  13   Loss :  0.24607791  Accuracy :  95.7  Class Accuracy :  11.946193474527762  Car class accuracy  11.946193474527762
Iter :  168 Batch :  14   Loss :  0.085864  Accuracy :  99.095  Class Accuracy :  9.1701244813278  Car class accuracy  9.1701244813278
Iter :  168 Batch :  15   Loss :  0.2370462  Accuracy :  95.09  Class Accuracy :  12.456627342123525  Car class accuracy  12.456627342123525
Iter :  168 Batch :  16   Loss :  0.016064243  Accuracy :  99.83  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 169 loss : 0.35187086 Accuracy: 93.40435759052924 Class Accuracy : 13.012127397909763/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  169 Batch :  0   Loss :  0.16194761  Accuracy :  97.005  Class Accuracy :  11.209593326381647  Car class accuracy  11.209593326381647
Iter :  169 Batch :  1   Loss :  0.24354401  Accuracy :  94.78999999999999  Class Accuracy :  13.924501424501425  Car class accuracy  13.924501424501425
Iter :  169 Batch :  2   Loss :  0.035636462  Accuracy :  99.045  Class Accuracy :  10.637254901960784  Car class accuracy  10.637254901960784
Iter :  169 Batch :  3   Loss :  0.061657976  Accuracy :  99.25500000000001  Class Accuracy :  8.854961832061068  Car class accuracy  8.854961832061068
Iter :  169 Batch :  4   Loss :  0.104521744  Accuracy :  98.61999999999999  Class Accuracy :  6.521739130434782  Car class accuracy  6.521739130434782
Iter :  169 Batch :  5   Loss :  0.26241216  Accuracy :  95.0  Class Accuracy :  12.21127116502401  Car class accuracy  12.21127116502401
Iter :  169 Batch :  6   Loss :  0.112464756  Accuracy :  97.55  Class Accuracy :  11.280788177339902  Car class accuracy  11.280788177339902
Iter :  169 Batch :  7   Loss :  0.23594218  Accuracy :  93.085  Class Accuracy :  13.961136023916293  Car class accuracy  13.961136023916293
Iter :  169 Batch :  8   Loss :  0.74040383  Accuracy :  95.78  Class Accuracy :  9.127789046653144  Car class accuracy  9.127789046653144
Iter :  169 Batch :  9   Loss :  0.23378515  Accuracy :  95.39999999999999  Class Accuracy :  12.808695652173913  Car class accuracy  12.808695652173913
Iter :  169 Batch :  10   Loss :  0.0410927  Accuracy :  98.83999999999999  Class Accuracy :  10.431654676258992  Car class accuracy  10.431654676258992
Iter :  169 Batch :  11   Loss :  0.10241502  Accuracy :  98.61999999999999  Class Accuracy :  9.300699300699302  Car class accuracy  9.300699300699302
Iter :  169 Batch :  12   Loss :  0.23107344  Accuracy :  91.11  Class Accuracy :  17.98283261802575  Car class accuracy  17.98283261802575
Iter :  169 Batch :  13   Loss :  0.42860264  Accuracy :  92.465  Class Accuracy :  13.587075575027383  Car class accuracy  13.587075575027383
Iter :  169 Batch :  14   Loss :  0.10418384  Accuracy :  98.07000000000001  Class Accuracy :  9.920948616600791  Car class accuracy  9.920948616600791
Iter :  169 Batch :  15   Loss :  0.39384288  Accuracy :  90.97  Class Accuracy :  15.064655172413794  Car class accuracy  15.064655172413794
Iter :  169 Batch :  16   Loss :  0.014274143  Accuracy :  99.945  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 170 loss : 0.3510145 Accuracy: 93.42086015922465 Class Accuracy : 13.000226889386054
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__170_0.ckpt
saved prediction of 0 accuracy :  0.95735  class accuracy :  0.0508759635599159  car_class_accuracy :  0.0508759635599159
saved prediction of 1 accuracy :  0.9571  class accuracy :  0.020863309352517987  car_class_accuracy :  0.020863309352517987
saved prediction of 2 accuracy :  0.967  class accuracy :  0.08922413793103448  car_class_accuracy :  0.08922413793103448
saved prediction of 3 accuracy :  0.9007  class accuracy :  0.12484725050916497  car_class_accuracy :  0.12484725050916497
saved prediction of 4 accuracy :  0.95885  class accuracy :  0.11015859408486928  car_class_accuracy :  0.11015859408486928
saved prediction of 5 accuracy :  0.9806  class accuracy :  0.015  car_class_accuracy :  0.015
saved prediction of 6 accuracy :  0.9426  class accuracy :  0.08777335984095427  car_class_accuracy :  0.08777335984095427
saved prediction of 7 accuracy :  0.9262  class accuracy :  0.07348687734333155  car_class_accuracy :  0.07348687734333155
saved prediction of 8 accuracy :  0.9275  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 9 accuracy :  0.9648  class accuracy :  0.09565217391304348  car_class_accuracy :  0.09565217391304348
saved prediction of 10 accuracy :  0.97845  class accuracy :  0.0710997442455243  car_class_accuracy :  0.0710997442455243
saved prediction of 11 accuracy :  0.8372  class accuracy :  0.06732365145228217  car_class_accuracy :  0.06732365145228217
saved prediction of 12 accuracy :  0.99035  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 13 accuracy :  0.9532  class accuracy :  0.08489208633093526  car_class_accuracy :  0.08489208633093526
saved prediction of 14 accuracy :  0.97925  class accuracy :  0.14964539007092198  car_class_accuracy :  0.14964539007092198
saved prediction of 15 accuracy :  0.93925  class accuracy :  0.13496932515337423  car_class_accuracy :  0.13496932515337423
saved prediction of 16 accuracy :  0.9349  class accuracy :  0.10250250250250251  car_class_accuracy :  0.10250250250250251
saved prediction of 17 accuracy :  0.95535  class accuracy :  0.05690460306871248  car_class_accuracy :  0.05690460306871248
saved prediction of 18 accuracy :  0.94825  class accuracy :  0.021421215242018538  car_class_accuracy :  0.021421215242018538
saved prediction of 19 accuracy :  0.9678  class accuracy :  0.09596110695587136  car_class_accuracy :  0.09596110695587136
saved prediction of 20 accuracy :  0.90125  class accuracy :  0.11837606837606837  car_class_accuracy :  0.11837606837606837
saved prediction of 21 accuracy :  0.96045  class accuracy :  0.10835117773019272  car_class_accuracy :  0.10835117773019272
saved prediction of 22 accuracy :  0.9818  class accuracy :  0.024598930481283424  car_class_accuracy :  0.024598930481283424
saved prediction of 23 accuracy :  0.94795  class accuracy :  0.08506315211422295  car_class_accuracy :  0.08506315211422295
saved prediction of 24 accuracy :  0.9328  class accuracy :  0.07758426966292134  car_class_accuracy :  0.07758426966292134
saved prediction of 25 accuracy :  0.919  class accuracy :  0.08333333333333334  car_class_accuracy :  0.08333333333333334
saved prediction of 26 accuracy :  0.96175  class accuracy :  0.09429513184584179  car_class_accuracy :  0.09429513184584179
saved prediction of 27 accuracy :  0.9788  class accuracy :  0.06891891891891891  car_class_accuracy :  0.06891891891891891
saved prediction of 28 accuracy :  0.8461  class accuracy :  0.06273258904837851  car_class_accuracy :  0.06273258904837851
saved prediction of 29 accuracy :  0.9878  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 30 accuracy :  0.9561  class accuracy :  0.08982475975127191  car_class_accuracy :  0.08982475975127191
saved prediction of 31 accuracy :  0.9757  class accuracy :  0.08258064516129032  car_class_accuracy :  0.08258064516129032
saved prediction of 32 accuracy :  0.9396  class accuracy :  0.13096774193548386  car_class_accuracy :  0.13096774193548386
saved prediction of 33 accuracy :  0.92425  class accuracy :  0.10407079646017699  car_class_accuracy :  0.10407079646017699
saved prediction of 34 accuracy :  0.9579  class accuracy :  0.05185685347738015  car_class_accuracy :  0.05185685347738015
saved prediction of 35 accuracy :  0.9482  class accuracy :  0.020285423037716615  car_class_accuracy :  0.020285423037716615
saved prediction of 36 accuracy :  0.9733  class accuracy :  0.08571428571428572  car_class_accuracy :  0.08571428571428572
saved prediction of 37 accuracy :  0.93455  class accuracy :  0.11688034188034188  car_class_accuracy :  0.11688034188034188
saved prediction of 38 accuracy :  0.9632  class accuracy :  0.10194231901118304  car_class_accuracy :  0.10194231901118304
saved prediction of 39 accuracy :  0.97985  class accuracy :  0.015025906735751295  car_class_accuracy :  0.015025906735751295
saved prediction of 40 accuracy :  0.94005  class accuracy :  0.08755577590480912  car_class_accuracy :  0.08755577590480912
saved prediction of 41 accuracy :  0.92745  class accuracy :  0.07134376686454398  car_class_accuracy :  0.07134376686454398
saved prediction of 42 accuracy :  0.9235  class accuracy :  0.10526315789473684  car_class_accuracy :  0.10526315789473684
saved prediction of 43 accuracy :  0.9643  class accuracy :  0.09509453244762392  car_class_accuracy :  0.09509453244762392
saved prediction of 44 accuracy :  0.97955  class accuracy :  0.058666666666666666  car_class_accuracy :  0.058666666666666666
saved prediction of 45 accuracy :  0.85885  class accuracy :  0.08808608762490391  car_class_accuracy :  0.08808608762490391
saved prediction of 46 accuracy :  0.9915  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 47 accuracy :  0.95  class accuracy :  0.08897176345231753  car_class_accuracy :  0.08897176345231753
saved prediction of 48 accuracy :  0.9805  class accuracy :  0.09  car_class_accuracy :  0.09
saved prediction of 49 accuracy :  0.9441  class accuracy :  0.14324324324324325  car_class_accuracy :  0.14324324324324325
saved prediction of 50 accuracy :  0.92935  class accuracy :  0.09901960784313726  car_class_accuracy :  0.09901960784313726
saved prediction of 51 accuracy :  0.96225  class accuracy :  0.05807142857142857  car_class_accuracy :  0.05807142857142857
saved prediction of 52 accuracy :  0.95065  class accuracy :  0.02238648363252376  car_class_accuracy :  0.02238648363252376
saved prediction of 53 accuracy :  0.9689  class accuracy :  0.09467061435973353  car_class_accuracy :  0.09467061435973353
saved prediction of 54 accuracy :  0.9297  class accuracy :  0.09835390946502057  car_class_accuracy :  0.09835390946502057
saved prediction of 55 accuracy :  0.9639  class accuracy :  0.10718562874251496  car_class_accuracy :  0.10718562874251496
saved prediction of 56 accuracy :  0.98165  class accuracy :  0.0225130890052356  car_class_accuracy :  0.0225130890052356
saved prediction of 57 accuracy :  0.94805  class accuracy :  0.07976952624839949  car_class_accuracy :  0.07976952624839949
saved prediction of 58 accuracy :  0.92655  class accuracy :  0.07452574525745256  car_class_accuracy :  0.07452574525745256
saved prediction of 59 accuracy :  0.9258  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 60 accuracy :  0.9674  class accuracy :  0.09546858908341915  car_class_accuracy :  0.09546858908341915
saved prediction of 61 accuracy :  0.98055  class accuracy :  0.05442359249329759  car_class_accuracy :  0.05442359249329759
saved prediction of 62 accuracy :  0.83495  class accuracy :  0.07082675092153765  car_class_accuracy :  0.07082675092153765
saved prediction of 63 accuracy :  0.9895  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 64 accuracy :  0.9619  class accuracy :  0.09408248655110579  car_class_accuracy :  0.09408248655110579
saved prediction of 65 accuracy :  0.97945  class accuracy :  0.096  car_class_accuracy :  0.096
saved prediction of 66 accuracy :  0.94175  class accuracy :  0.14013157894736844  car_class_accuracy :  0.14013157894736844
saved prediction of 67 accuracy :  0.9255  class accuracy :  0.10091438071487946  car_class_accuracy :  0.10091438071487946
saved prediction of 68 accuracy :  0.95525  class accuracy :  0.05739186571981923  car_class_accuracy :  0.05739186571981923
saved prediction of 69 accuracy :  0.938  class accuracy :  0.029199999999999997  car_class_accuracy :  0.029199999999999997
saved prediction of 70 accuracy :  0.9729  class accuracy :  0.08338008415147266  car_class_accuracy :  0.08338008415147266
saved prediction of 71 accuracy :  0.90275  class accuracy :  0.12012448132780082  car_class_accuracy :  0.12012448132780082
saved prediction of 72 accuracy :  0.96535  class accuracy :  0.10395454545454545  car_class_accuracy :  0.10395454545454545
saved prediction of 73 accuracy :  0.9817  class accuracy :  0.027586206896551724  car_class_accuracy :  0.027586206896551724
saved prediction of 74 accuracy :  0.9511  class accuracy :  0.07982973149967257  car_class_accuracy :  0.07982973149967257
saved prediction of 75 accuracy :  0.9276  class accuracy :  0.07628808864265928  car_class_accuracy :  0.07628808864265928
saved prediction of 76 accuracy :  0.92495  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 77 accuracy :  0.9546  class accuracy :  0.09235700197238658  car_class_accuracy :  0.09235700197238658
saved prediction of 78 accuracy :  0.98005  class accuracy :  0.06099476439790576  car_class_accuracy :  0.06099476439790576
saved prediction of 79 accuracy :  0.86475  class accuracy :  0.0802275960170697  car_class_accuracy :  0.0802275960170697
saved prediction of 80 accuracy :  0.9898  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 81 accuracy :  0.9574  class accuracy :  0.09165256627185561  car_class_accuracy :  0.09165256627185561
saved prediction of 82 accuracy :  0.97665  class accuracy :  0.0910958904109589  car_class_accuracy :  0.0910958904109589
saved prediction of 83 accuracy :  0.94195  class accuracy :  0.13397435897435897  car_class_accuracy :  0.13397435897435897
saved prediction of 84 accuracy :  0.9315  class accuracy :  0.10346585117227318  car_class_accuracy :  0.10346585117227318
saved prediction of 85 accuracy :  0.9619  class accuracy :  0.06132952108649035  car_class_accuracy :  0.06132952108649035
saved prediction of 86 accuracy :  0.9385  class accuracy :  0.026750261233019858  car_class_accuracy :  0.026750261233019858
saved prediction of 87 accuracy :  0.97295  class accuracy :  0.0893792071802543  car_class_accuracy :  0.0893792071802543
saved prediction of 88 accuracy :  0.9066  class accuracy :  0.13034188034188035  car_class_accuracy :  0.13034188034188035
saved prediction of 89 accuracy :  0.96495  class accuracy :  0.10531177829099307  car_class_accuracy :  0.10531177829099307
saved prediction of 90 accuracy :  0.98175  class accuracy :  0.02318840579710145  car_class_accuracy :  0.02318840579710145
saved prediction of 91 accuracy :  0.94065  class accuracy :  0.087627365356623  car_class_accuracy :  0.087627365356623
saved prediction of 92 accuracy :  0.93115  class accuracy :  0.074375  car_class_accuracy :  0.074375
saved prediction of 93 accuracy :  0.92165  class accuracy :  0.15789473684210525  car_class_accuracy :  0.15789473684210525
saved prediction of 94 accuracy :  0.9693  class accuracy :  0.09451156368657232  car_class_accuracy :  0.09451156368657232
saved prediction of 95 accuracy :  0.9808  class accuracy :  0.06648501362397821  car_class_accuracy :  0.06648501362397821
saved prediction of 96 accuracy :  0.84955  class accuracy :  0.0627491057741441  car_class_accuracy :  0.0627491057741441
saved prediction of 97 accuracy :  0.989  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 98 accuracy :  0.95365  class accuracy :  0.08754189944134079  car_class_accuracy :  0.08754189944134079
saved prediction of 99 accuracy :  0.97805  class accuracy :  0.08356164383561644  car_class_accuracy :  0.08356164383561644
Iter :  170 Batch :  0   Loss :  0.18055256  Accuracy :  95.815  Class Accuracy :  12.618328298086606  Car class accuracy  12.618328298086606
Iter :  170 Batch :  1   Loss :  0.2666245  Accuracy :  94.61  Class Accuracy :  13.365455893254264  Car class accuracy  13.365455893254264
Iter :  170 Batch :  2   Loss :  0.06699338  Accuracy :  99.63499999999999  Class Accuracy :  8.888888888888888  Car class accuracy  8.888888888888888
Iter :  170 Batch :  3   Loss :  0.17386578  Accuracy :  97.6  Class Accuracy :  10.147058823529411  Car class accuracy  10.147058823529411
Iter :  170 Batch :  4   Loss :  0.38208064  Accuracy :  86.48  Class Accuracy :  23.57142857142857  Car class accuracy  23.57142857142857
Iter :  170 Batch :  5   Loss :  0.24791539  Accuracy :  94.025  Class Accuracy :  12.695900363258952  Car class accuracy  12.695900363258952
Iter :  170 Batch :  6   Loss :  0.1473557  Accuracy :  98.04  Class Accuracy :  8.779342723004694  Car class accuracy  8.779342723004694
Iter :  170 Batch :  7   Loss :  0.30272886  Accuracy :  90.88000000000001  Class Accuracy :  15.102234902520209  Car class accuracy  15.102234902520209
Iter :  170 Batch :  8   Loss :  0.6024884  Accuracy :  96.625  Class Accuracy :  8.383525243578388  Car class accuracy  8.383525243578388
Iter :  170 Batch :  9   Loss :  0.24748868  Accuracy :  95.44  Class Accuracy :  12.818455366098297  Car class accuracy  12.818455366098297
Iter :  170 Batch :  10   Loss :  0.0586877  Accuracy :  98.61999999999999  Class Accuracy :  11.007194244604317  Car class accuracy  11.007194244604317
Iter :  170 Batch :  11   Loss :  0.15976925  Accuracy :  95.72500000000001  Class Accuracy :  13.680555555555557  Car class accuracy  13.680555555555557
Iter :  170 Batch :  12   Loss :  0.3119878  Accuracy :  88.47  Class Accuracy :  20.75107296137339  Car class accuracy  20.75107296137339
Iter :  170 Batch :  13   Loss :  0.3393413  Accuracy :  90.64  Class Accuracy :  15.69620253164557  Car class accuracy  15.69620253164557
Iter :  170 Batch :  14   Loss :  0.3052645  Accuracy :  91.91  Class Accuracy :  14.267241379310343  Car class accuracy  14.267241379310343
Iter :  170 Batch :  15   Loss :  0.5688416  Accuracy :  92.785  Class Accuracy :  13.187331536388141  Car class accuracy  13.187331536388141
Iter :  170 Batch :  16   Loss :  0.082299985  Accuracy :  97.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 171 loss : 0.35049045 Accuracy: 93.42673090158291 Class Accuracy : 12.998147178499256
Iter :  171 Batch :  0   Loss :  0.19586636  Accuracy :  94.24  Class Accuracy :  14.149933065595716  Car class accuracy  14.149933065595716
Iter :  171 Batch :  1   Loss :  0.30184042  Accuracy :  94.88  Class Accuracy :  13.58356940509915  Car class accuracy  13.58356940509915
Iter :  171 Batch :  2   Loss :  0.102217734  Accuracy :  97.155  Class Accuracy :  11.800947867298579  Car class accuracy  11.800947867298579
Iter :  171 Batch :  3   Loss :  0.18683438  Accuracy :  95.195  Class Accuracy :  12.0  Car class accuracy  12.0
Iter :  171 Batch :  4   Loss :  0.33161166  Accuracy :  88.375  Class Accuracy :  16.666666666666668  Car class accuracy  16.666666666666668
Iter :  171 Batch :  5   Loss :  0.2593579  Accuracy :  97.175  Class Accuracy :  10.473982483256055  Car class accuracy  10.473982483256055
Iter :  171 Batch :  6   Loss :  0.14277785  Accuracy :  96.985  Class Accuracy :  9.128205128205128  Car class accuracy  9.128205128205128
Iter :  171 Batch :  7   Loss :  0.24828494  Accuracy :  95.30499999999999  Class Accuracy :  12.57332595462092  Car class accuracy  12.57332595462092
Iter :  171 Batch :  8   Loss :  0.44685215  Accuracy :  94.145  Class Accuracy :  11.835227272727273  Car class accuracy  11.835227272727273
Iter :  171 Batch :  9   Loss :  0.4367093  Accuracy :  94.84  Class Accuracy :  10.819180819180819  Car class accuracy  10.819180819180819
Iter :  171 Batch :  10   Loss :  0.0761565  Accuracy :  98.385  Class Accuracy :  12.700729927007298  Car class accuracy  12.700729927007298
Iter :  171 Batch :  11   Loss :  0.13396952  Accuracy :  97.84  Class Accuracy :  10.426829268292684  Car class accuracy  10.426829268292684
Iter :  171 Batch :  12   Loss :  0.18469505  Accuracy :  98.115  Class Accuracy :  8.492569002123144  Car class accuracy  8.492569002123144
Iter :  171 Batch :  13   Loss :  0.27189922  Accuracy :  94.35  Class Accuracy :  13.037330316742082  Car class accuracy  13.037330316742082
Iter :  171 Batch :  14   Loss :  0.13167016  Accuracy :  97.52  Class Accuracy :  11.759656652360514  Car class accuracy  11.759656652360514
Iter :  171 Batch :  15   Loss :  0.25671256  Accuracy :  93.83  Class Accuracy :  13.476775956284154  Car class accuracy  13.476775956284154
Iter :  171 Batch :  16   Loss :  0.034309488  Accuracy :  99.925  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 172 loss : 0.3497321 Accuracy: 93.4404173794047 Class Accuracy : 12.988553072358638
Iter :  172 Batch :  0   Loss :  0.35085386  Accuracy :  96.115  Class Accuracy :  8.304213771839672  Car class accuracy  8.304213771839672
Iter :  172 Batch :  1   Loss :  0.25731373  Accuracy :  94.6  Class Accuracy :  13.965640658554044  Car class accuracy  13.965640658554044
Iter :  172 Batch :  2   Loss :  0.045039624  Accuracy :  99.285  Class Accuracy :  11.01522842639594  Car class accuracy  11.01522842639594
Iter :  172 Batch :  3   Loss :  0.14984116  Accuracy :  97.37  Class Accuracy :  12.916666666666668  Car class accuracy  12.916666666666668
Iter :  172 Batch :  4   Loss :  0.27661836  Accuracy :  90.005  Class Accuracy :  11.333333333333332  Car class accuracy  11.333333333333332
Iter :  172 Batch :  5   Loss :  0.22703782  Accuracy :  96.47  Class Accuracy :  11.416133162612036  Car class accuracy  11.416133162612036
Iter :  172 Batch :  6   Loss :  0.12406799  Accuracy :  97.19  Class Accuracy :  10.523560209424083  Car class accuracy  10.523560209424083
Iter :  172 Batch :  7   Loss :  0.23264524  Accuracy :  93.965  Class Accuracy :  13.528455284552846  Car class accuracy  13.528455284552846
Iter :  172 Batch :  8   Loss :  0.23347007  Accuracy :  95.745  Class Accuracy :  12.788381742738588  Car class accuracy  12.788381742738588
Iter :  172 Batch :  9   Loss :  0.37556985  Accuracy :  92.12  Class Accuracy :  14.079999999999998  Car class accuracy  14.079999999999998
Iter :  172 Batch :  10   Loss :  0.054898754  Accuracy :  99.33  Class Accuracy :  9.291338582677165  Car class accuracy  9.291338582677165
Iter :  172 Batch :  11   Loss :  0.16931894  Accuracy :  96.695  Class Accuracy :  10.941176470588236  Car class accuracy  10.941176470588236
Iter :  172 Batch :  12   Loss :  0.14331159  Accuracy :  97.205  Class Accuracy :  12.818791946308725  Car class accuracy  12.818791946308725
Iter :  172 Batch :  13   Loss :  0.26281157  Accuracy :  96.755  Class Accuracy :  10.823327615780446  Car class accuracy  10.823327615780446
Iter :  172 Batch :  14   Loss :  0.14713983  Accuracy :  96.185  Class Accuracy :  11.86046511627907  Car class accuracy  11.86046511627907
Iter :  172 Batch :  15   Loss :  0.55754846  Accuracy :  93.46  Class Accuracy :  10.90975788701394  Car class accuracy  10.90975788701394
Iter :  172 Batch :  16   Loss :  0.069532245  Accuracy :  98.66  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 173 loss : 0.34896055 Accuracy: 93.45493027210884 Class Accuracy : 12.976890170537096
Iter :  173 Batch :  0   Loss :  0.1712759  Accuracy :  95.19999999999999  Class Accuracy :  13.19832402234637  Car class accuracy  13.19832402234637
Iter :  173 Batch :  1   Loss :  0.26776084  Accuracy :  94.795  Class Accuracy :  14.666193181818182  Car class accuracy  14.666193181818182
Iter :  173 Batch :  2   Loss :  0.043167073  Accuracy :  99.55000000000001  Class Accuracy :  10.054945054945055  Car class accuracy  10.054945054945055
Iter :  173 Batch :  3   Loss :  0.06341352  Accuracy :  99.77000000000001  Class Accuracy :  8.031496062992126  Car class accuracy  8.031496062992126
Iter :  173 Batch :  4   Loss :  0.16159199  Accuracy :  95.95  Class Accuracy :  8.461538461538462  Car class accuracy  8.461538461538462
Iter :  173 Batch :  5   Loss :  0.2650411  Accuracy :  92.965  Class Accuracy :  13.405138852841942  Car class accuracy  13.405138852841942
Iter :  173 Batch :  6   Loss :  0.28379938  Accuracy :  98.465  Class Accuracy :  4.858757062146893  Car class accuracy  4.858757062146893
Iter :  173 Batch :  7   Loss :  0.25873  Accuracy :  94.045  Class Accuracy :  13.600194080543426  Car class accuracy  13.600194080543426
Iter :  173 Batch :  8   Loss :  0.33691558  Accuracy :  96.365  Class Accuracy :  12.049530315969257  Car class accuracy  12.049530315969257
Iter :  173 Batch :  9   Loss :  0.22001185  Accuracy :  93.05  Class Accuracy :  14.321608040201006  Car class accuracy  14.321608040201006
Iter :  173 Batch :  10   Loss :  0.048827495  Accuracy :  99.36  Class Accuracy :  10.428571428571429  Car class accuracy  10.428571428571429
Iter :  173 Batch :  11   Loss :  0.07016626  Accuracy :  99.155  Class Accuracy :  9.37984496124031  Car class accuracy  9.37984496124031
Iter :  173 Batch :  12   Loss :  0.108591564  Accuracy :  97.955  Class Accuracy :  12.52155172413793  Car class accuracy  12.52155172413793
Iter :  173 Batch :  13   Loss :  0.28741217  Accuracy :  93.67999999999999  Class Accuracy :  13.40797378481704  Car class accuracy  13.40797378481704
Iter :  173 Batch :  14   Loss :  0.10513612  Accuracy :  97.52499999999999  Class Accuracy :  10.614754098360654  Car class accuracy  10.614754098360654
Iter :  173 Batch :  15   Loss :  0.23755088  Accuracy :  95.21  Class Accuracy :  12.711864406779661  Car class accuracy  12.711864406779661
Iter :  173 Batch :  16   Loss :  0.031739574  Accuracy :  99.275  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 174 loss : 0.3479557 Accuracy: 93.47305038890768 Class Accuracy : 12.963736688169872/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "

Iter :  174 Batch :  0   Loss :  0.16377775  Accuracy :  95.26  Class Accuracy :  12.1340206185567  Car class accuracy  12.1340206185567
Iter :  174 Batch :  1   Loss :  0.2623822  Accuracy :  95.21  Class Accuracy :  14.025110782865585  Car class accuracy  14.025110782865585
Iter :  174 Batch :  2   Loss :  0.046425235  Accuracy :  98.64  Class Accuracy :  11.674418604651162  Car class accuracy  11.674418604651162
Iter :  174 Batch :  3   Loss :  0.0927686  Accuracy :  98.885  Class Accuracy :  8.0  Car class accuracy  8.0
Iter :  174 Batch :  4   Loss :  0.13211519  Accuracy :  97.385  Class Accuracy :  8.888888888888888  Car class accuracy  8.888888888888888
Iter :  174 Batch :  5   Loss :  0.2601658  Accuracy :  96.94500000000001  Class Accuracy :  11.231259968102075  Car class accuracy  11.231259968102075
Iter :  174 Batch :  6   Loss :  0.07597178  Accuracy :  98.82  Class Accuracy :  9.4  Car class accuracy  9.4
Iter :  174 Batch :  7   Loss :  0.19895141  Accuracy :  96.30499999999999  Class Accuracy :  12.107648725212465  Car class accuracy  12.107648725212465
Iter :  174 Batch :  8   Loss :  0.22774985  Accuracy :  97.725  Class Accuracy :  10.797819623389495  Car class accuracy  10.797819623389495
Iter :  174 Batch :  9   Loss :  0.2504992  Accuracy :  95.19999999999999  Class Accuracy :  12.931174089068826  Car class accuracy  12.931174089068826
Iter :  174 Batch :  10   Loss :  0.04704312  Accuracy :  99.605  Class Accuracy :  9.635036496350367  Car class accuracy  9.635036496350367
Iter :  174 Batch :  11   Loss :  0.08017709  Accuracy :  99.59  Class Accuracy :  8.333333333333334  Car class accuracy  8.333333333333334
Iter :  174 Batch :  12   Loss :  0.13395314  Accuracy :  97.995  Class Accuracy :  11.441241685144124  Car class accuracy  11.441241685144124
Iter :  174 Batch :  13   Loss :  0.16337517  Accuracy :  96.86  Class Accuracy :  11.716328963051252  Car class accuracy  11.716328963051252
Iter :  174 Batch :  14   Loss :  0.08676855  Accuracy :  98.21  Class Accuracy :  11.05726872246696  Car class accuracy  11.05726872246696
Iter :  174 Batch :  15   Loss :  0.2150597  Accuracy :  96.21  Class Accuracy :  11.735924932975871  Car class accuracy  11.735924932975871
Iter :  174 Batch :  16   Loss :  0.0073158187  Accuracy :  99.985  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 175 loss : 0.3467887 Accuracy: 93.49651647612643 Class Accuracy : 12.948513403615458
Iter :  175 Batch :  0   Loss :  0.13306552  Accuracy :  97.10499999999999  Class Accuracy :  11.349948078920043  Car class accuracy  11.349948078920043
Iter :  175 Batch :  1   Loss :  0.17600624  Accuracy :  97.075  Class Accuracy :  11.417208966015908  Car class accuracy  11.417208966015908
Iter :  175 Batch :  2   Loss :  0.030424554  Accuracy :  99.59  Class Accuracy :  9.473684210526315  Car class accuracy  9.473684210526315
Iter :  175 Batch :  3   Loss :  0.05783231  Accuracy :  99.535  Class Accuracy :  9.044117647058822  Car class accuracy  9.044117647058822
Iter :  175 Batch :  4   Loss :  0.12267695  Accuracy :  97.44  Class Accuracy :  5.555555555555556  Car class accuracy  5.555555555555556
Iter :  175 Batch :  5   Loss :  0.18592058  Accuracy :  97.91  Class Accuracy :  10.662712738525013  Car class accuracy  10.662712738525013
Iter :  175 Batch :  6   Loss :  0.065834925  Accuracy :  99.09  Class Accuracy :  9.704433497536947  Car class accuracy  9.704433497536947
Iter :  175 Batch :  7   Loss :  0.18643574  Accuracy :  95.05  Class Accuracy :  13.532818532818533  Car class accuracy  13.532818532818533
Iter :  175 Batch :  8   Loss :  0.24650095  Accuracy :  97.735  Class Accuracy :  10.788604459124691  Car class accuracy  10.788604459124691
Iter :  175 Batch :  9   Loss :  0.1924833  Accuracy :  97.075  Class Accuracy :  10.712303422756705  Car class accuracy  10.712303422756705
Iter :  175 Batch :  10   Loss :  0.023936637  Accuracy :  99.78  Class Accuracy :  9.794520547945206  Car class accuracy  9.794520547945206
Iter :  175 Batch :  11   Loss :  0.083490506  Accuracy :  99.22  Class Accuracy :  8.028169014084508  Car class accuracy  8.028169014084508
Iter :  175 Batch :  12   Loss :  0.15825105  Accuracy :  95.465  Class Accuracy :  16.0  Car class accuracy  16.0
Iter :  175 Batch :  13   Loss :  0.18175976  Accuracy :  94.465  Class Accuracy :  13.61878453038674  Car class accuracy  13.61878453038674
Iter :  175 Batch :  14   Loss :  0.05916203  Accuracy :  99.03  Class Accuracy :  10.245901639344261  Car class accuracy  10.245901639344261
Iter :  175 Batch :  15   Loss :  0.17263237  Accuracy :  96.255  Class Accuracy :  12.468265162200282  Car class accuracy  12.468265162200282
Iter :  175 Batch :  16   Loss :  0.011133264  Accuracy :  99.91499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 176 loss : 0.34551564 Accuracy: 93.52068706118355 Class Accuracy : 12.932556299015438
Iter :  176 Batch :  0   Loss :  0.12553355  Accuracy :  96.665  Class Accuracy :  12.59029927760578  Car class accuracy  12.59029927760578
Iter :  176 Batch :  1   Loss :  0.14835456  Accuracy :  96.74000000000001  Class Accuracy :  12.801724137931034  Car class accuracy  12.801724137931034
Iter :  176 Batch :  2   Loss :  0.023556158  Accuracy :  99.49  Class Accuracy :  11.302083333333332  Car class accuracy  11.302083333333332
Iter :  176 Batch :  3   Loss :  0.058719005  Accuracy :  99.25  Class Accuracy :  8.920863309352518  Car class accuracy  8.920863309352518
Iter :  176 Batch :  4   Loss :  0.08018795  Accuracy :  98.705  Class Accuracy :  8.095238095238095  Car class accuracy  8.095238095238095
Iter :  176 Batch :  5   Loss :  0.17539534  Accuracy :  98.315  Class Accuracy :  10.393407761828815  Car class accuracy  10.393407761828815
Iter :  176 Batch :  6   Loss :  0.06696744  Accuracy :  98.655  Class Accuracy :  11.508379888268157  Car class accuracy  11.508379888268157
Iter :  176 Batch :  7   Loss :  0.23962644  Accuracy :  96.765  Class Accuracy :  10.826271186440676  Car class accuracy  10.826271186440676
Iter :  176 Batch :  8   Loss :  0.22597043  Accuracy :  96.15  Class Accuracy :  12.510005717552888  Car class accuracy  12.510005717552888
Iter :  176 Batch :  9   Loss :  0.15386711  Accuracy :  97.495  Class Accuracy :  11.01898101898102  Car class accuracy  11.01898101898102
Iter :  176 Batch :  10   Loss :  0.02579636  Accuracy :  99.655  Class Accuracy :  9.6875  Car class accuracy  9.6875
Iter :  176 Batch :  11   Loss :  0.069703504  Accuracy :  99.14  Class Accuracy :  9.148936170212766  Car class accuracy  9.148936170212766
Iter :  176 Batch :  12   Loss :  0.11585335  Accuracy :  97.985  Class Accuracy :  12.222222222222223  Car class accuracy  12.222222222222223
Iter :  176 Batch :  13   Loss :  0.1699533  Accuracy :  97.00999999999999  Class Accuracy :  11.269276393831554  Car class accuracy  11.269276393831554
Iter :  176 Batch :  14   Loss :  0.057455793  Accuracy :  99.07000000000001  Class Accuracy :  10.081300813008129  Car class accuracy  10.081300813008129
Iter :  176 Batch :  15   Loss :  0.18935701  Accuracy :  96.21499999999999  Class Accuracy :  12.022106631989598  Car class accuracy  12.022106631989598
Iter :  176 Batch :  16   Loss :  0.031259123  Accuracy :  99.605  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 177 loss : 0.3442137 Accuracy: 93.54630485372341 Class Accuracy : 12.917444975502983
Iter :  177 Batch :  0   Loss :  0.12993295  Accuracy :  96.84  Class Accuracy :  11.70353982300885  Car class accuracy  11.70353982300885
Iter :  177 Batch :  1   Loss :  0.35759062  Accuracy :  97.34  Class Accuracy :  11.496792587312902  Car class accuracy  11.496792587312902
Iter :  177 Batch :  2   Loss :  0.026396917  Accuracy :  99.64  Class Accuracy :  10.117647058823529  Car class accuracy  10.117647058823529
Iter :  177 Batch :  3   Loss :  0.10751775  Accuracy :  98.605  Class Accuracy :  9.558823529411766  Car class accuracy  9.558823529411766
Iter :  177 Batch :  4   Loss :  0.13293566  Accuracy :  96.545  Class Accuracy :  12.85714285714286  Car class accuracy  12.85714285714286
Iter :  177 Batch :  5   Loss :  0.17231563  Accuracy :  96.035  Class Accuracy :  11.962107448741241  Car class accuracy  11.962107448741241
Iter :  177 Batch :  6   Loss :  0.083597526  Accuracy :  98.1  Class Accuracy :  13.4375  Car class accuracy  13.4375
Iter :  177 Batch :  7   Loss :  0.15426795  Accuracy :  97.10499999999999  Class Accuracy :  11.695101816180516  Car class accuracy  11.695101816180516
Iter :  177 Batch :  8   Loss :  0.26338926  Accuracy :  93.655  Class Accuracy :  14.452484322238302  Car class accuracy  14.452484322238302
Iter :  177 Batch :  9   Loss :  0.19807944  Accuracy :  96.10499999999999  Class Accuracy :  12.080659945004584  Car class accuracy  12.080659945004584
Iter :  177 Batch :  10   Loss :  0.033057686  Accuracy :  99.61  Class Accuracy :  9.703703703703702  Car class accuracy  9.703703703703702
Iter :  177 Batch :  11   Loss :  0.08396336  Accuracy :  98.925  Class Accuracy :  8.58108108108108  Car class accuracy  8.58108108108108
Iter :  177 Batch :  12   Loss :  0.09599883  Accuracy :  98.175  Class Accuracy :  11.804008908685967  Car class accuracy  11.804008908685967
Iter :  177 Batch :  13   Loss :  0.20840415  Accuracy :  96.86  Class Accuracy :  11.35072463768116  Car class accuracy  11.35072463768116
Iter :  177 Batch :  14   Loss :  0.06628393  Accuracy :  98.94500000000001  Class Accuracy :  10.305676855895197  Car class accuracy  10.305676855895197
Iter :  177 Batch :  15   Loss :  0.24006927  Accuracy :  96.37  Class Accuracy :  10.865122615803816  Car class accuracy  10.865122615803816
Iter :  177 Batch :  16   Loss :  0.014494379  Accuracy :  99.9  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 178 loss : 0.34306216 Accuracy: 93.5689388429752 Class Accuracy : 12.905007141654112
Iter :  178 Batch :  0   Loss :  0.12271329  Accuracy :  97.625  Class Accuracy :  11.780383795309168  Car class accuracy  11.780383795309168
Iter :  178 Batch :  1   Loss :  0.15809907  Accuracy :  96.3  Class Accuracy :  13.338334583645912  Car class accuracy  13.338334583645912
Iter :  178 Batch :  2   Loss :  0.024087729  Accuracy :  99.57000000000001  Class Accuracy :  9.829545454545455  Car class accuracy  9.829545454545455
Iter :  178 Batch :  3   Loss :  0.07574609  Accuracy :  99.11  Class Accuracy :  8.785714285714285  Car class accuracy  8.785714285714285
Iter :  178 Batch :  4   Loss :  0.09054688  Accuracy :  98.395  Class Accuracy :  9.473684210526315  Car class accuracy  9.473684210526315
Iter :  178 Batch :  5   Loss :  0.16191928  Accuracy :  96.77  Class Accuracy :  11.487646293888169  Car class accuracy  11.487646293888169
Iter :  178 Batch :  6   Loss :  0.07011564  Accuracy :  98.63499999999999  Class Accuracy :  10.052083333333332  Car class accuracy  10.052083333333332
Iter :  178 Batch :  7   Loss :  0.16256197  Accuracy :  95.295  Class Accuracy :  12.886823400765445  Car class accuracy  12.886823400765445
Iter :  178 Batch :  8   Loss :  0.241012  Accuracy :  96.10499999999999  Class Accuracy :  12.50282485875706  Car class accuracy  12.50282485875706
Iter :  178 Batch :  9   Loss :  0.16318938  Accuracy :  96.72  Class Accuracy :  11.786389413988658  Car class accuracy  11.786389413988658
Iter :  178 Batch :  10   Loss :  0.028797675  Accuracy :  99.86500000000001  Class Accuracy :  9.16083916083916  Car class accuracy  9.16083916083916
Iter :  178 Batch :  11   Loss :  0.07994641  Accuracy :  99.63499999999999  Class Accuracy :  6.753246753246753  Car class accuracy  6.753246753246753
Iter :  178 Batch :  12   Loss :  0.11299214  Accuracy :  98.52  Class Accuracy :  10.565217391304346  Car class accuracy  10.565217391304346
Iter :  178 Batch :  13   Loss :  0.1742583  Accuracy :  96.00999999999999  Class Accuracy :  12.338709677419354  Car class accuracy  12.338709677419354
Iter :  178 Batch :  14   Loss :  0.06712464  Accuracy :  99.105  Class Accuracy :  9.360730593607306  Car class accuracy  9.360730593607306
Iter :  178 Batch :  15   Loss :  0.2436095  Accuracy :  96.175  Class Accuracy :  11.278988053408293  Car class accuracy  11.278988053408293
Iter :  178 Batch :  16   Loss :  0.005882498  Accuracy :  99.965  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 179 loss : 0.34179673 Accuracy: 93.59297830374754 Class Accuracy : 12.889226747128198
Iter :  179 Batch :  0   Loss :  0.096064456  Accuracy :  97.18  Class Accuracy :  11.780185758513932  Car class accuracy  11.780185758513932
Iter :  179 Batch :  1   Loss :  0.15572342  Accuracy :  97.815  Class Accuracy :  11.720754716981133  Car class accuracy  11.720754716981133
Iter :  179 Batch :  2   Loss :  0.029819  Accuracy :  99.25  Class Accuracy :  10.742574257425744  Car class accuracy  10.742574257425744
Iter :  179 Batch :  3   Loss :  0.086495  Accuracy :  98.63499999999999  Class Accuracy :  9.370629370629372  Car class accuracy  9.370629370629372
Iter :  179 Batch :  4   Loss :  0.1299102  Accuracy :  96.8  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  179 Batch :  5   Loss :  0.19850107  Accuracy :  97.64  Class Accuracy :  10.608228980322004  Car class accuracy  10.608228980322004
Iter :  179 Batch :  6   Loss :  0.06582168  Accuracy :  98.595  Class Accuracy :  11.290322580645162  Car class accuracy  11.290322580645162
Iter :  179 Batch :  7   Loss :  0.19473529  Accuracy :  94.52000000000001  Class Accuracy :  13.68478260869565  Car class accuracy  13.68478260869565
Iter :  179 Batch :  8   Loss :  0.17312263  Accuracy :  94.99  Class Accuracy :  13.561700371440363  Car class accuracy  13.561700371440363
Iter :  179 Batch :  9   Loss :  0.19200718  Accuracy :  95.87  Class Accuracy :  12.279348757497859  Car class accuracy  12.279348757497859
Iter :  179 Batch :  10   Loss :  0.021902898  Accuracy :  99.715  Class Accuracy :  9.62686567164179  Car class accuracy  9.62686567164179
Iter :  179 Batch :  11   Loss :  0.059296135  Accuracy :  99.46000000000001  Class Accuracy :  8.493150684931507  Car class accuracy  8.493150684931507
Iter :  179 Batch :  12   Loss :  0.17037247  Accuracy :  95.50999999999999  Class Accuracy :  15.717131474103585  Car class accuracy  15.717131474103585
Iter :  179 Batch :  13   Loss :  0.14202093  Accuracy :  97.21499999999999  Class Accuracy :  11.358166189111747  Car class accuracy  11.358166189111747
Iter :  179 Batch :  14   Loss :  0.05629579  Accuracy :  99.515  Class Accuracy :  8.627450980392156  Car class accuracy  8.627450980392156
Iter :  179 Batch :  15   Loss :  0.2186355  Accuracy :  96.81  Class Accuracy :  11.103351955307264  Car class accuracy  11.103351955307264
Iter :  179 Batch :  16   Loss :  0.009898146  Accuracy :  99.99  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 180 loss : 0.34055126 Accuracy: 93.61534815299119 Class Accuracy : 12.876427724459504
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__180_0.ckpt
saved prediction of 0 accuracy :  0.9551  class accuracy :  0.05412772585669782  car_class_accuracy :  0.05412772585669782
saved prediction of 1 accuracy :  0.95715  class accuracy :  0.05469715698393078  car_class_accuracy :  0.05469715698393078
saved prediction of 2 accuracy :  0.9542  class accuracy :  0.003111111111111111  car_class_accuracy :  0.003111111111111111
saved prediction of 3 accuracy :  0.9523  class accuracy :  0.04462633451957295  car_class_accuracy :  0.04462633451957295
saved prediction of 4 accuracy :  0.96035  class accuracy :  0.08434959349593496  car_class_accuracy :  0.08434959349593496
saved prediction of 5 accuracy :  0.9585  class accuracy :  0.07066614725360343  car_class_accuracy :  0.07066614725360343
saved prediction of 6 accuracy :  0.99345  class accuracy :  0.03857868020304568  car_class_accuracy :  0.03857868020304568
saved prediction of 7 accuracy :  0.9434  class accuracy :  0.05589519650655021  car_class_accuracy :  0.05589519650655021
saved prediction of 8 accuracy :  0.94745  class accuracy :  0.06093573844419391  car_class_accuracy :  0.06093573844419391
saved prediction of 9 accuracy :  0.99815  class accuracy :  0.01818181818181818  car_class_accuracy :  0.01818181818181818
saved prediction of 10 accuracy :  0.91805  class accuracy :  0.05784647629028032  car_class_accuracy :  0.05784647629028032
saved prediction of 11 accuracy :  0.9889  class accuracy :  0.0675  car_class_accuracy :  0.0675
saved prediction of 12 accuracy :  0.89735  class accuracy :  0.006077630234933606  car_class_accuracy :  0.006077630234933606
saved prediction of 13 accuracy :  0.99655  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 14 accuracy :  0.9753  class accuracy :  0.07260195290063182  car_class_accuracy :  0.07260195290063182
saved prediction of 15 accuracy :  0.9944  class accuracy :  0.09236111111111112  car_class_accuracy :  0.09236111111111112
saved prediction of 16 accuracy :  0.98065  class accuracy :  0.10212765957446808  car_class_accuracy :  0.10212765957446808
saved prediction of 17 accuracy :  0.95775  class accuracy :  0.05645412130637636  car_class_accuracy :  0.05645412130637636
saved prediction of 18 accuracy :  0.9591  class accuracy :  0.0539906103286385  car_class_accuracy :  0.0539906103286385
saved prediction of 19 accuracy :  0.94795  class accuracy :  0.0039014373716632447  car_class_accuracy :  0.0039014373716632447
saved prediction of 20 accuracy :  0.9525  class accuracy :  0.04099197665937272  car_class_accuracy :  0.04099197665937272
saved prediction of 21 accuracy :  0.95265  class accuracy :  0.08204081632653061  car_class_accuracy :  0.08204081632653061
saved prediction of 22 accuracy :  0.9659  class accuracy :  0.06475920679886685  car_class_accuracy :  0.06475920679886685
saved prediction of 23 accuracy :  0.9919  class accuracy :  0.030541871921182268  car_class_accuracy :  0.030541871921182268
saved prediction of 24 accuracy :  0.939  class accuracy :  0.04852191641182467  car_class_accuracy :  0.04852191641182467
saved prediction of 25 accuracy :  0.94815  class accuracy :  0.06556919642857142  car_class_accuracy :  0.06556919642857142
saved prediction of 26 accuracy :  0.9984  class accuracy :  0.06470588235294118  car_class_accuracy :  0.06470588235294118
saved prediction of 27 accuracy :  0.91455  class accuracy :  0.05622729631551635  car_class_accuracy :  0.05622729631551635
saved prediction of 28 accuracy :  0.9876  class accuracy :  0.06781914893617022  car_class_accuracy :  0.06781914893617022
saved prediction of 29 accuracy :  0.89215  class accuracy :  0.006453201970443349  car_class_accuracy :  0.006453201970443349
saved prediction of 30 accuracy :  0.9948  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 31 accuracy :  0.9679  class accuracy :  0.06804670912951168  car_class_accuracy :  0.06804670912951168
saved prediction of 32 accuracy :  0.99305  class accuracy :  0.08309859154929577  car_class_accuracy :  0.08309859154929577
saved prediction of 33 accuracy :  0.9809  class accuracy :  0.0972972972972973  car_class_accuracy :  0.0972972972972973
saved prediction of 34 accuracy :  0.96475  class accuracy :  0.06325940212150434  car_class_accuracy :  0.06325940212150434
saved prediction of 35 accuracy :  0.96395  class accuracy :  0.05537366548042705  car_class_accuracy :  0.05537366548042705
saved prediction of 36 accuracy :  0.9489  class accuracy :  0.005147058823529412  car_class_accuracy :  0.005147058823529412
saved prediction of 37 accuracy :  0.9568  class accuracy :  0.048184568835098335  car_class_accuracy :  0.048184568835098335
saved prediction of 38 accuracy :  0.95515  class accuracy :  0.07928870292887029  car_class_accuracy :  0.07928870292887029
saved prediction of 39 accuracy :  0.9629  class accuracy :  0.0708617747440273  car_class_accuracy :  0.0708617747440273
saved prediction of 40 accuracy :  0.9922  class accuracy :  0.03349056603773585  car_class_accuracy :  0.03349056603773585
saved prediction of 41 accuracy :  0.9449  class accuracy :  0.053569539925965096  car_class_accuracy :  0.053569539925965096
saved prediction of 42 accuracy :  0.94505  class accuracy :  0.06354875283446712  car_class_accuracy :  0.06354875283446712
saved prediction of 43 accuracy :  0.99845  class accuracy :  0.02222222222222222  car_class_accuracy :  0.02222222222222222
saved prediction of 44 accuracy :  0.9116  class accuracy :  0.05527263374485597  car_class_accuracy :  0.05527263374485597
saved prediction of 45 accuracy :  0.9855  class accuracy :  0.059278350515463915  car_class_accuracy :  0.059278350515463915
saved prediction of 46 accuracy :  0.89685  class accuracy :  0.005986808726534754  car_class_accuracy :  0.005986808726534754
saved prediction of 47 accuracy :  0.99505  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 48 accuracy :  0.97115  class accuracy :  0.07094155844155844  car_class_accuracy :  0.07094155844155844
saved prediction of 49 accuracy :  0.9925  class accuracy :  0.0781021897810219  car_class_accuracy :  0.0781021897810219
saved prediction of 50 accuracy :  0.98115  class accuracy :  0.10680272108843539  car_class_accuracy :  0.10680272108843539
saved prediction of 51 accuracy :  0.9664  class accuracy :  0.06776447105788423  car_class_accuracy :  0.06776447105788423
saved prediction of 52 accuracy :  0.9624  class accuracy :  0.05738597685500341  car_class_accuracy :  0.05738597685500341
saved prediction of 53 accuracy :  0.94895  class accuracy :  0.005572755417956656  car_class_accuracy :  0.005572755417956656
saved prediction of 54 accuracy :  0.9549  class accuracy :  0.0442719881744272  car_class_accuracy :  0.0442719881744272
saved prediction of 55 accuracy :  0.9631  class accuracy :  0.08191964285714286  car_class_accuracy :  0.08191964285714286
saved prediction of 56 accuracy :  0.9628  class accuracy :  0.07210796915167095  car_class_accuracy :  0.07210796915167095
saved prediction of 57 accuracy :  0.99255  class accuracy :  0.036585365853658534  car_class_accuracy :  0.036585365853658534
saved prediction of 58 accuracy :  0.9446  class accuracy :  0.0517691888949374  car_class_accuracy :  0.0517691888949374
saved prediction of 59 accuracy :  0.9429  class accuracy :  0.058544474393531  car_class_accuracy :  0.058544474393531
saved prediction of 60 accuracy :  0.99805  class accuracy :  0.008695652173913044  car_class_accuracy :  0.008695652173913044
saved prediction of 61 accuracy :  0.90945  class accuracy :  0.05439180537772087  car_class_accuracy :  0.05439180537772087
saved prediction of 62 accuracy :  0.98685  class accuracy :  0.06170212765957447  car_class_accuracy :  0.06170212765957447
saved prediction of 63 accuracy :  0.8986  class accuracy :  0.008359456635318705  car_class_accuracy :  0.008359456635318705
saved prediction of 64 accuracy :  0.9953  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 65 accuracy :  0.97165  class accuracy :  0.07003912800447178  car_class_accuracy :  0.07003912800447178
saved prediction of 66 accuracy :  0.9939  class accuracy :  0.09338235294117647  car_class_accuracy :  0.09338235294117647
saved prediction of 67 accuracy :  0.98375  class accuracy :  0.08986486486486486  car_class_accuracy :  0.08986486486486486
saved prediction of 68 accuracy :  0.9733  class accuracy :  0.06427165354330708  car_class_accuracy :  0.06427165354330708
saved prediction of 69 accuracy :  0.96365  class accuracy :  0.053387937453462396  car_class_accuracy :  0.053387937453462396
saved prediction of 70 accuracy :  0.94835  class accuracy :  0.0051308900523560205  car_class_accuracy :  0.0051308900523560205
saved prediction of 71 accuracy :  0.9528  class accuracy :  0.04542177361211247  car_class_accuracy :  0.04542177361211247
saved prediction of 72 accuracy :  0.9575  class accuracy :  0.08617021276595745  car_class_accuracy :  0.08617021276595745
saved prediction of 73 accuracy :  0.95935  class accuracy :  0.06939381093683764  car_class_accuracy :  0.06939381093683764
saved prediction of 74 accuracy :  0.9924  class accuracy :  0.03103448275862069  car_class_accuracy :  0.03103448275862069
saved prediction of 75 accuracy :  0.93495  class accuracy :  0.051224018475750574  car_class_accuracy :  0.051224018475750574
saved prediction of 76 accuracy :  0.9442  class accuracy :  0.06653246099647711  car_class_accuracy :  0.06653246099647711
saved prediction of 77 accuracy :  0.99725  class accuracy :  0.013043478260869565  car_class_accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 0.013043478260869565
saved prediction of 78 accuracy :  0.9154  class accuracy :  0.05567310235387464  car_class_accuracy :  0.05567310235387464
saved prediction of 79 accuracy :  0.9878  class accuracy :  0.06315789473684211  car_class_accuracy :  0.06315789473684211
saved prediction of 80 accuracy :  0.89405  class accuracy :  0.0048330842052815145  car_class_accuracy :  0.0048330842052815145
saved prediction of 81 accuracy :  0.99475  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 82 accuracy :  0.96915  class accuracy :  0.06864633493846976  car_class_accuracy :  0.06864633493846976
saved prediction of 83 accuracy :  0.99465  class accuracy :  0.08602941176470588  car_class_accuracy :  0.08602941176470588
saved prediction of 84 accuracy :  0.98105  class accuracy :  0.1  car_class_accuracy :  0.1
saved prediction of 85 accuracy :  0.95585  class accuracy :  0.056292517006802725  car_class_accuracy :  0.056292517006802725
saved prediction of 86 accuracy :  0.96575  class accuracy :  0.055025307302964566  car_class_accuracy :  0.055025307302964566
saved prediction of 87 accuracy :  0.94875  class accuracy :  0.005345911949685535  car_class_accuracy :  0.005345911949685535
saved prediction of 88 accuracy :  0.9525  class accuracy :  0.03967551622418879  car_class_accuracy :  0.03967551622418879
saved prediction of 89 accuracy :  0.95355  class accuracy :  0.08247863247863248  car_class_accuracy :  0.08247863247863248
saved prediction of 90 accuracy :  0.9616  class accuracy :  0.06902920962199313  car_class_accuracy :  0.06902920962199313
saved prediction of 91 accuracy :  0.992  class accuracy :  0.029523809523809525  car_class_accuracy :  0.029523809523809525
saved prediction of 92 accuracy :  0.936  class accuracy :  0.051350071056371384  car_class_accuracy :  0.051350071056371384
saved prediction of 93 accuracy :  0.94455  class accuracy :  0.06155106499180776  car_class_accuracy :  0.06155106499180776
saved prediction of 94 accuracy :  0.9979  class accuracy :  0.009523809523809523  car_class_accuracy :  0.009523809523809523
saved prediction of 95 accuracy :  0.9119  class accuracy :  0.05550739418663947  car_class_accuracy :  0.05550739418663947
saved prediction of 96 accuracy :  0.98765  class accuracy :  0.06692111959287532  car_class_accuracy :  0.06692111959287532
saved prediction of 97 accuracy :  0.8967  class accuracy :  0.0045913218970736625  car_class_accuracy :  0.0045913218970736625
saved prediction of 98 accuracy :  0.9959  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 99 accuracy :  0.97455  class accuracy :  0.07159904534606205  car_class_accuracy :  0.07159904534606205
Iter :  180 Batch :  0   Loss :  0.11282682  Accuracy :  97.985  Class Accuracy :  11.160164271047227  Car class accuracy  11.160164271047227
Iter :  180 Batch :  1   Loss :  0.19508377  Accuracy :  97.48  Class Accuracy :  11.349431818181818  Car class accuracy  11.349431818181818
Iter :  180 Batch :  2   Loss :  0.020518325  Accuracy :  99.645  Class Accuracy :  10.217391304347826  Car class accuracy  10.217391304347826
Iter :  180 Batch :  3   Loss :  0.073819  Accuracy :  99.15  Class Accuracy :  8.58974358974359  Car class accuracy  8.58974358974359
Iter :  180 Batch :  4   Loss :  0.07246967  Accuracy :  98.80499999999999  Class Accuracy :  5.7894736842105265  Car class accuracy  5.7894736842105265
Iter :  180 Batch :  5   Loss :  0.14035197  Accuracy :  96.575  Class Accuracy :  12.071767095463779  Car class accuracy  12.071767095463779
Iter :  180 Batch :  6   Loss :  0.08928004  Accuracy :  99.28  Class Accuracy :  8.172043010752688  Car class accuracy  8.172043010752688
Iter :  180 Batch :  7   Loss :  0.17527518  Accuracy :  95.395  Class Accuracy :  12.938388625592417  Car class accuracy  12.938388625592417
Iter :  180 Batch :  8   Loss :  0.17444062  Accuracy :  96.575  Class Accuracy :  12.723684210526315  Car class accuracy  12.723684210526315
Iter :  180 Batch :  9   Loss :  0.20450266  Accuracy :  96.53500000000001  Class Accuracy :  11.724422442244224  Car class accuracy  11.724422442244224
Iter :  180 Batch :  10   Loss :  0.03892212  Accuracy :  99.80499999999999  Class Accuracy :  8.359375  Car class accuracy  8.359375
Iter :  180 Batch :  11   Loss :  0.058433507  Accuracy :  99.405  Class Accuracy :  9.16083916083916  Car class accuracy  9.16083916083916
Iter :  180 Batch :  12   Loss :  0.080043875  Accuracy :  98.1  Class Accuracy :  11.987315010570825  Car class accuracy  11.987315010570825
Iter :  180 Batch :  13   Loss :  0.13038969  Accuracy :  96.975  Class Accuracy :  11.865630205441422  Car class accuracy  11.865630205441422
Iter :  180 Batch :  14   Loss :  0.06476892  Accuracy :  98.92999999999999  Class Accuracy :  10.16597510373444  Car class accuracy  10.16597510373444
Iter :  180 Batch :  15   Loss :  0.1993225  Accuracy :  97.15  Class Accuracy :  11.15306810519218  Car class accuracy  11.15306810519218
Iter :  180 Batch :  16   Loss :  0.007141088  Accuracy :  99.985  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 181 loss : 0.3392665 Accuracy: 93.6401576723017 Class Accuracy : 12.85969477300374
Iter :  181 Batch :  0   Loss :  0.09189695  Accuracy :  97.59  Class Accuracy :  11.99346405228758  Car class accuracy  11.99346405228758
Iter :  181 Batch :  1   Loss :  0.67188865  Accuracy :  96.8  Class Accuracy :  8.890577507598785  Car class accuracy  8.890577507598785
Iter :  181 Batch :  2   Loss :  0.021024717  Accuracy :  99.565  Class Accuracy :  10.95890410958904  Car class accuracy  10.95890410958904
Iter :  181 Batch :  3   Loss :  0.08082687  Accuracy :  98.83  Class Accuracy :  9.493670886075948  Car class accuracy  9.493670886075948
Iter :  181 Batch :  4   Loss :  0.2285725  Accuracy :  93.025  Class Accuracy :  8.846153846153845  Car class accuracy  8.846153846153845
Iter :  181 Batch :  5   Loss :  0.27162406  Accuracy :  95.73  Class Accuracy :  12.238065716057037  Car class accuracy  12.238065716057037
Iter :  181 Batch :  6   Loss :  0.15018684  Accuracy :  94.83  Class Accuracy :  15.487179487179487  Car class accuracy  15.487179487179487
Iter :  181 Batch :  7   Loss :  0.4222013  Accuracy :  93.88499999999999  Class Accuracy :  12.197402597402599  Car class accuracy  12.197402597402599
Iter :  181 Batch :  8   Loss :  0.44750834  Accuracy :  93.205  Class Accuracy :  14.178464178464179  Car class accuracy  14.178464178464179
Iter :  181 Batch :  9   Loss :  0.442596  Accuracy :  89.685  Class Accuracy :  16.561631139944392  Car class accuracy  16.561631139944392
Iter :  181 Batch :  10   Loss :  0.11887212  Accuracy :  96.35000000000001  Class Accuracy :  12.481751824817518  Car class accuracy  12.481751824817518
Iter :  181 Batch :  11   Loss :  0.27852142  Accuracy :  92.715  Class Accuracy :  16.18421052631579  Car class accuracy  16.18421052631579
Iter :  181 Batch :  12   Loss :  0.24881168  Accuracy :  92.11500000000001  Class Accuracy :  19.11894273127753  Car class accuracy  19.11894273127753
Iter :  181 Batch :  13   Loss :  0.29438937  Accuracy :  91.915  Class Accuracy :  15.641773628938155  Car class accuracy  15.641773628938155
Iter :  181 Batch :  14   Loss :  0.1520224  Accuracy :  96.38  Class Accuracy :  12.345679012345679  Car class accuracy  12.345679012345679
Iter :  181 Batch :  15   Loss :  0.4800009  Accuracy :  89.92999999999999  Class Accuracy :  15.383036935704514  Car class accuracy  15.383036935704514
Iter :  181 Batch :  16   Loss :  0.27048326  Accuracy :  93.69  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 182 loss : 0.33891213 Accuracy: 93.64479954736501 Class Accuracy : 12.85755642739724
Iter :  182 Batch :  0   Loss :  0.2725358  Accuracy :  94.125  Class Accuracy :  13.161094224924014  Car class accuracy  13.161094224924014
Iter :  182 Batch :  1   Loss :  0.5382872  Accuracy :  93.38  Class Accuracy :  12.487198244330651  Car class accuracy  12.487198244330651
Iter :  182 Batch :  2   Loss :  0.05378967  Accuracy :  99.185  Class Accuracy :  9.028571428571427  Car class accuracy  9.028571428571427
Iter :  182 Batch :  3   Loss :  0.106075674  Accuracy :  98.315  Class Accuracy :  9.236641221374045  Car class accuracy  9.236641221374045
Iter :  182 Batch :  4   Loss :  0.30118182  Accuracy :  90.505  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  182 Batch :  5   Loss :  0.3287862  Accuracy :  95.84  Class Accuracy :  10.968503937007874  Car class accuracy  10.968503937007874
Iter :  182 Batch :  6   Loss :  0.3575813  Accuracy :  95.155  Class Accuracy :  8.275862068965518  Car class accuracy  8.275862068965518
Iter :  182 Batch :  7   Loss :  0.3818481  Accuracy :  92.985  Class Accuracy :  13.075471698113208  Car class accuracy  13.075471698113208
Iter :  182 Batch :  8   Loss :  0.3774287  Accuracy :  94.80499999999999  Class Accuracy :  12.280316344463973  Car class accuracy  12.280316344463973
Iter :  182 Batch :  9   Loss :  0.5815786  Accuracy :  85.25500000000001  Class Accuracy :  16.991869918699187  Car class accuracy  16.991869918699187
Iter :  182 Batch :  10   Loss :  0.07498883  Accuracy :  99.315  Class Accuracy :  5.955882352941176  Car class accuracy  5.955882352941176
Iter :  182 Batch :  11   Loss :  0.23028763  Accuracy :  92.765  Class Accuracy :  13.788819875776397  Car class accuracy  13.788819875776397
Iter :  182 Batch :  12   Loss :  0.22440045  Accuracy :  94.655  Class Accuracy :  12.180293501048219  Car class accuracy  12.180293501048219
Iter :  182 Batch :  13   Loss :  0.33381116  Accuracy :  90.77499999999999  Class Accuracy :  15.11454753722795  Car class accuracy  15.11454753722795
Iter :  182 Batch :  14   Loss :  0.11391684  Accuracy :  98.49  Class Accuracy :  10.775510204081632  Car class accuracy  10.775510204081632
Iter :  182 Batch :  15   Loss :  0.3424666  Accuracy :  90.945  Class Accuracy :  15.52648790058862  Car class accuracy  15.52648790058862
Iter :  182 Batch :  16   Loss :  0.12256783  Accuracy :  97.26  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 183 loss : 0.33858418 Accuracy: 93.64859163987138 Class Accuracy : 12.84799649530475
Iter :  183 Batch :  0   Loss :  0.21783349  Accuracy :  95.31500000000001  Class Accuracy :  13.828633405639914  Car class accuracy  13.828633405639914
Iter :  183 Batch :  1   Loss :  0.2776081  Accuracy :  91.5  Class Accuracy :  17.35123367198839  Car class accuracy  17.35123367198839
Iter :  183 Batch :  2   Loss :  0.05621656  Accuracy :  99.07000000000001  Class Accuracy :  10.274725274725274  Car class accuracy  10.274725274725274
Iter :  183 Batch :  3   Loss :  0.12751329  Accuracy :  98.04  Class Accuracy :  10.071428571428571  Car class accuracy  10.071428571428571
Iter :  183 Batch :  4   Loss :  0.17868558  Accuracy :  95.93  Class Accuracy :  14.799999999999999  Car class accuracy  14.799999999999999
Iter :  183 Batch :  5   Loss :  0.2638211  Accuracy :  92.915  Class Accuracy :  14.603174603174601  Car class accuracy  14.603174603174601
Iter :  183 Batch :  6   Loss :  0.12104608  Accuracy :  97.745  Class Accuracy :  11.518324607329845  Car class accuracy  11.518324607329845
Iter :  183 Batch :  7   Loss :  0.3022975  Accuracy :  96.28999999999999  Class Accuracy :  11.877437325905294  Car class accuracy  11.877437325905294
Iter :  183 Batch :  8   Loss :  1.3684777  Accuracy :  89.595  Class Accuracy :  2.5355054302422726  Car class accuracy  2.5355054302422726
Iter :  183 Batch :  9   Loss :  0.3725932  Accuracy :  93.975  Class Accuracy :  12.642796248934356  Car class accuracy  12.642796248934356
Iter :  183 Batch :  10   Loss :  0.048964813  Accuracy :  99.56  Class Accuracy :  9.416058394160585  Car class accuracy  9.416058394160585
Iter :  183 Batch :  11   Loss :  0.25370303  Accuracy :  93.4  Class Accuracy :  14.73053892215569  Car class accuracy  14.73053892215569
Iter :  183 Batch :  12   Loss :  0.29343194  Accuracy :  89.36  Class Accuracy :  18.966942148760328  Car class accuracy  18.966942148760328
Iter :  183 Batch :  13   Loss :  0.30066964  Accuracy :  92.365  Class Accuracy :  13.884657236126225  Car class accuracy  13.884657236126225
Iter :  183 Batch :  14   Loss :  0.15279736  Accuracy :  96.83500000000001  Class Accuracy :  12.684824902723735  Car class accuracy  12.684824902723735
Iter :  183 Batch :  15   Loss :  0.3521782  Accuracy :  91.215  Class Accuracy :  15.081521739130435  Car class accuracy  15.081521739130435
Iter :  183 Batch :  16   Loss :  0.23879589  Accuracy :  94.43  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 184 loss : 0.33831897 Accuracy: 93.65355292612729 Class Accuracy : 12.843471986850078
Iter :  184 Batch :  0   Loss :  0.25198197  Accuracy :  93.925  Class Accuracy :  14.946695095948828  Car class accuracy  14.946695095948828
Iter :  184 Batch :  1   Loss :  0.3615988  Accuracy :  92.30000000000001  Class Accuracy :  15.937950937950937  Car class accuracy  15.937950937950937
Iter :  184 Batch :  2   Loss :  0.14088297  Accuracy :  95.83500000000001  Class Accuracy :  14.054054054054054  Car class accuracy  14.054054054054054
Iter :  184 Batch :  3   Loss :  0.23056741  Accuracy :  94.85  Class Accuracy :  12.238805970149254  Car class accuracy  12.238805970149254
Iter :  184 Batch :  4   Loss :  0.44727716  Accuracy :  88.25  Class Accuracy :  17.69230769230769  Car class accuracy  17.69230769230769
Iter :  184 Batch :  5   Loss :  0.20731816  Accuracy :  96.555  Class Accuracy :  11.525336091003101  Car class accuracy  11.525336091003101
Iter :  184 Batch :  6   Loss :  0.14237615  Accuracy :  96.94  Class Accuracy :  11.794871794871794  Car class accuracy  11.794871794871794
Iter :  184 Batch :  7   Loss :  0.28948513  Accuracy :  93.255  Class Accuracy :  13.750613647520865  Car class accuracy  13.750613647520865
Iter :  184 Batch :  8   Loss :  0.2477147  Accuracy :  95.94  Class Accuracy :  11.846323935876175  Car class accuracy  11.846323935876175
Iter :  184 Batch :  9   Loss :  0.48385304  Accuracy :  91.25999999999999  Class Accuracy :  14.307692307692307  Car class accuracy  14.307692307692307
Iter :  184 Batch :  10   Loss :  0.065188214  Accuracy :  98.97  Class Accuracy :  10.615384615384615  Car class accuracy  10.615384615384615
Iter :  184 Batch :  11   Loss :  0.15980823  Accuracy :  96.315  Class Accuracy :  12.335766423357663  Car class accuracy  12.335766423357663
Iter :  184 Batch :  12   Loss :  0.21407484  Accuracy :  95.595  Class Accuracy :  11.551724137931034  Car class accuracy  11.551724137931034
Iter :  184 Batch :  13   Loss :  0.33967826  Accuracy :  96.655  Class Accuracy :  10.011383039271486  Car class accuracy  10.011383039271486
Iter :  184 Batch :  14   Loss :  0.076694235  Accuracy :  99.065  Class Accuracy :  9.869565217391305  Car class accuracy  9.869565217391305
Iter :  184 Batch :  15   Loss :  0.34421504  Accuracy :  94.83  Class Accuracy :  12.400505369551485  Car class accuracy  12.400505369551485
Iter :  184 Batch :  16   Loss :  0.06709785  Accuracy :  98.36500000000001  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 185 loss : 0.33778408 Accuracy: 93.66207538167939 Class Accuracy : 12.839190802547856
Iter :  185 Batch :  0   Loss :  0.21094516  Accuracy :  95.88499999999999  Class Accuracy :  12.065462753950337  Car class accuracy  12.065462753950337
Iter :  185 Batch :  1   Loss :  0.21397112  Accuracy :  93.88  Class Accuracy :  15.558002936857562  Car class accuracy  15.558002936857562
Iter :  185 Batch :  2   Loss :  0.04244566  Accuracy :  98.97500000000001  Class Accuracy :  10.638297872340425  Car class accuracy  10.638297872340425
Iter :  185 Batch :  3   Loss :  0.11608049  Accuracy :  97.425  Class Accuracy :  10.54263565891473  Car class accuracy  10.54263565891473
Iter :  185 Batch :  4   Loss :  0.17944446  Accuracy :  93.72500000000001  Class Accuracy :  16.428571428571427  Car class accuracy  16.428571428571427
Iter :  185 Batch :  5   Loss :  0.2504476  Accuracy :  94.69999999999999  Class Accuracy :  12.60713369258404  Car class accuracy  12.60713369258404
Iter :  185 Batch :  6   Loss :  0.17159072  Accuracy :  96.735  Class Accuracy :  10.9375  Car class accuracy  10.9375
Iter :  185 Batch :  7   Loss :  0.27685118  Accuracy :  94.77  Class Accuracy :  12.374476987447698  Car class accuracy  12.374476987447698
Iter :  185 Batch :  8   Loss :  0.31635687  Accuracy :  95.365  Class Accuracy :  12.52449567723343  Car class accuracy  12.52449567723343
Iter :  185 Batch :  9   Loss :  0.2832672  Accuracy :  92.25999999999999  Class Accuracy :  15.079365079365079  Car class accuracy  15.079365079365079
Iter :  185 Batch :  10   Loss :  0.048999142  Accuracy :  98.97500000000001  Class Accuracy :  9.836065573770492  Car class accuracy  9.836065573770492
Iter :  185 Batch :  11   Loss :  0.09948054  Accuracy :  98.555  Class Accuracy :  9.862068965517242  Car class accuracy  9.862068965517242
Iter :  185 Batch :  12   Loss :  0.15308274  Accuracy :  95.50999999999999  Class Accuracy :  14.353448275862068  Car class accuracy  14.353448275862068
Iter :  185 Batch :  13   Loss :  0.23780888  Accuracy :  93.755  Class Accuracy :  13.505032563647129  Car class accuracy  13.505032563647129
Iter :  185 Batch :  14   Loss :  0.088726096  Accuracy :  98.49  Class Accuracy :  10.505836575875486  Car class accuracy  10.505836575875486
Iter :  185 Batch :  15   Loss :  0.22129199  Accuracy :  95.585  Class Accuracy :  12.289752650176677  Car class accuracy  12.289752650176677
Iter :  185 Batch :  16   Loss :  0.030567069  Accuracy :  99.37  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 186 loss : 0.336898 Accuracy: 93.67526890224613 Class Accuracy : 12.833130031604737
Iter :  186 Batch :  0   Loss :  0.15775037  Accuracy :  97.32  Class Accuracy :  11.995905834186285  Car class accuracy  11.995905834186285
Iter :  186 Batch :  1   Loss :  0.24303745  Accuracy :  96.465  Class Accuracy :  12.318840579710145  Car class accuracy  12.318840579710145
Iter :  186 Batch :  2   Loss :  0.037934244  Accuracy :  99.375  Class Accuracy :  10.56701030927835  Car class accuracy  10.56701030927835
Iter :  186 Batch :  3   Loss :  0.105741724  Accuracy :  98.03  Class Accuracy :  10.827586206896552  Car class accuracy  10.827586206896552
Iter :  186 Batch :  4   Loss :  0.14059609  Accuracy :  96.625  Class Accuracy :  12.307692307692308  Car class accuracy  12.307692307692308
Iter :  186 Batch :  5   Loss :  0.2025717  Accuracy :  97.03500000000001  Class Accuracy :  11.214109926168991  Car class accuracy  11.214109926168991
Iter :  186 Batch :  6   Loss :  0.08959816  Accuracy :  97.77  Class Accuracy :  12.710843373493978  Car class accuracy  12.710843373493978
Iter :  186 Batch :  7   Loss :  0.20510095  Accuracy :  94.15  Class Accuracy :  13.856655290102388  Car class accuracy  13.856655290102388
Iter :  186 Batch :  8   Loss :  0.25708804  Accuracy :  97.27  Class Accuracy :  11.067388096409248  Car class accuracy  11.067388096409248
Iter :  186 Batch :  9   Loss :  0.2516703  Accuracy :  95.325  Class Accuracy :  12.486288848263253  Car class accuracy  12.486288848263253
Iter :  186 Batch :  10   Loss :  0.045992777  Accuracy :  99.435  Class Accuracy :  9.847328244274808  Car class accuracy  9.847328244274808
Iter :  186 Batch :  11   Loss :  0.08140116  Accuracy :  98.83999999999999  Class Accuracy :  10.397350993377483  Car class accuracy  10.397350993377483
Iter :  186 Batch :  12   Loss :  0.15112196  Accuracy :  95.88499999999999  Class Accuracy :  14.17879417879418  Car class accuracy  14.17879417879418
Iter :  186 Batch :  13   Loss :  0.19919218  Accuracy :  94.77  Class Accuracy :  13.12639821029083  Car class accuracy  13.12639821029083
Iter :  186 Batch :  14   Loss :  0.069614835  Accuracy :  99.2  Class Accuracy :  9.576271186440678  Car class accuracy  9.576271186440678
Iter :  186 Batch :  15   Loss :  0.21142808  Accuracy :  97.665  Class Accuracy :  10.587002096436057  Car class accuracy  10.587002096436057
Iter :  186 Batch :  16   Loss :  0.016957529  Accuracy :  99.72  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 187 loss : 0.33587205 Accuracy: 93.69490402769036 Class Accuracy : 12.823344712266959
Iter :  187 Batch :  0   Loss :  0.13897169  Accuracy :  96.86  Class Accuracy :  12.49230769230769  Car class accuracy  12.49230769230769
Iter :  187 Batch :  1   Loss :  0.1620548  Accuracy :  96.685  Class Accuracy :  12.545839210155146  Car class accuracy  12.545839210155146
Iter :  187 Batch :  2   Loss :  0.028079199  Accuracy :  99.605  Class Accuracy :  10.3954802259887  Car class accuracy  10.3954802259887
Iter :  187 Batch :  3   Loss :  0.07818795  Accuracy :  99.215  Class Accuracy :  8.53146853146853  Car class accuracy  8.53146853146853
Iter :  187 Batch :  4   Loss :  0.07715534  Accuracy :  98.7  Class Accuracy :  11.333333333333332  Car class accuracy  11.333333333333332
Iter :  187 Batch :  5   Loss :  0.20433041  Accuracy :  96.175  Class Accuracy :  11.661506707946337  Car class accuracy  11.661506707946337
Iter :  187 Batch :  6   Loss :  0.07593607  Accuracy :  98.72  Class Accuracy :  8.882978723404255  Car class accuracy  8.882978723404255
Iter :  187 Batch :  7   Loss :  0.16890267  Accuracy :  95.94500000000001  Class Accuracy :  12.509633911368015  Car class accuracy  12.509633911368015
Iter :  187 Batch :  8   Loss :  0.16640215  Accuracy :  97.975  Class Accuracy :  11.22373949579832  Car class accuracy  11.22373949579832
Iter :  187 Batch :  9   Loss :  0.22152139  Accuracy :  95.52000000000001  Class Accuracy :  12.403508771929825  Car class accuracy  12.403508771929825
Iter :  187 Batch :  10   Loss :  0.049655415  Accuracy :  99.72999999999999  Class Accuracy :  8.835616438356164  Car class accuracy  8.835616438356164
Iter :  187 Batch :  11   Loss :  0.084820285  Accuracy :  99.425  Class Accuracy :  7.199999999999999  Car class accuracy  7.199999999999999
Iter :  187 Batch :  12   Loss :  0.12409365  Accuracy :  96.94500000000001  Class Accuracy :  12.388392857142858  Car class accuracy  12.388392857142858
Iter :  187 Batch :  13   Loss :  0.27940416  Accuracy :  96.775  Class Accuracy :  11.361079865016873  Car class accuracy  11.361079865016873
Iter :  187 Batch :  14   Loss :  0.057801075  Accuracy :  99.00999999999999  Class Accuracy :  10.842911877394638  Car class accuracy  10.842911877394638
Iter :  187 Batch :  15   Loss :  0.23640198  Accuracy :  97.78999999999999  Class Accuracy :  9.888190076869321  Car class accuracy  9.888190076869321
Iter :  187 Batch :  16   Loss :  0.021691361  Accuracy :  99.52  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 188 loss : 0.33476585 Accuracy: 93.71737089201878 Class Accuracy : 12.809103437653482
Iter :  188 Batch :  0   Loss :  0.12547489  Accuracy :  97.14500000000001  Class Accuracy :  11.533546325878593  Car class accuracy  11.533546325878593
Iter :  188 Batch :  1   Loss :  0.20417829  Accuracy :  95.895  Class Accuracy :  13.397988505747128  Car class accuracy  13.397988505747128
Iter :  188 Batch :  2   Loss :  0.024225928  Accuracy :  99.455  Class Accuracy :  10.456852791878173  Car class accuracy  10.456852791878173
Iter :  188 Batch :  3   Loss :  0.0754816  Accuracy :  98.6  Class Accuracy :  9.318181818181817  Car class accuracy  9.318181818181817
Iter :  188 Batch :  4   Loss :  0.15052812  Accuracy :  96.515  Class Accuracy :  7.222222222222221  Car class accuracy  7.222222222222221
Iter :  188 Batch :  5   Loss :  0.1654317  Accuracy :  94.825  Class Accuracy :  13.293963254593175  Car class accuracy  13.293963254593175
Iter :  188 Batch :  6   Loss :  0.09796013  Accuracy :  97.58  Class Accuracy :  12.5  Car class accuracy  12.5
Iter :  188 Batch :  7   Loss :  0.25752836  Accuracy :  92.305  Class Accuracy :  15.152647975077882  Car class accuracy  15.152647975077882
Iter :  188 Batch :  8   Loss :  0.22147532  Accuracy :  94.295  Class Accuracy :  14.542358450404427  Car class accuracy  14.542358450404427
Iter :  188 Batch :  9   Loss :  0.23007779  Accuracy :  93.49499999999999  Class Accuracy :  14.833068362480125  Car class accuracy  14.833068362480125
Iter :  188 Batch :  10   Loss :  0.029200077  Accuracy :  99.485  Class Accuracy :  10.168067226890756  Car class accuracy  10.168067226890756
Iter :  188 Batch :  11   Loss :  0.08198651  Accuracy :  99.32  Class Accuracy :  8.551724137931036  Car class accuracy  8.551724137931036
Iter :  188 Batch :  12   Loss :  0.09344029  Accuracy :  98.61999999999999  Class Accuracy :  10.340425531914894/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
  Car class accuracy  10.340425531914894
Iter :  188 Batch :  13   Loss :  0.26610255  Accuracy :  97.02  Class Accuracy :  10.747875354107647  Car class accuracy  10.747875354107647
Iter :  188 Batch :  14   Loss :  0.046371736  Accuracy :  99.505  Class Accuracy :  9.047619047619047  Car class accuracy  9.047619047619047
Iter :  188 Batch :  15   Loss :  0.21598813  Accuracy :  96.785  Class Accuracy :  10.980810234541579  Car class accuracy  10.980810234541579
Iter :  188 Batch :  16   Loss :  0.012046149  Accuracy :  99.875  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 189 loss : 0.3337093 Accuracy: 93.73528019925281 Class Accuracy : 12.797999014490145
Iter :  189 Batch :  0   Loss :  0.13167983  Accuracy :  96.63000000000001  Class Accuracy :  13.155737704918034  Car class accuracy  13.155737704918034
Iter :  189 Batch :  1   Loss :  0.42534956  Accuracy :  95.15  Class Accuracy :  11.422475106685633  Car class accuracy  11.422475106685633
Iter :  189 Batch :  2   Loss :  0.021705577  Accuracy :  99.655  Class Accuracy :  10.049019607843137  Car class accuracy  10.049019607843137
Iter :  189 Batch :  3   Loss :  0.061028473  Accuracy :  99.22  Class Accuracy :  8.333333333333334  Car class accuracy  8.333333333333334
Iter :  189 Batch :  4   Loss :  0.09795297  Accuracy :  97.985  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  189 Batch :  5   Loss :  0.1488687  Accuracy :  98.00999999999999  Class Accuracy :  11.037868162692847  Car class accuracy  11.037868162692847
Iter :  189 Batch :  6   Loss :  0.09434692  Accuracy :  97.695  Class Accuracy :  11.675675675675675  Car class accuracy  11.675675675675675
Iter :  189 Batch :  7   Loss :  0.15317117  Accuracy :  96.015  Class Accuracy :  12.631884057971016  Car class accuracy  12.631884057971016
Iter :  189 Batch :  8   Loss :  0.3378349  Accuracy :  95.175  Class Accuracy :  12.201471420486701  Car class accuracy  12.201471420486701
Iter :  189 Batch :  9   Loss :  0.26250103  Accuracy :  95.00999999999999  Class Accuracy :  12.400370713623724  Car class accuracy  12.400370713623724
Iter :  189 Batch :  10   Loss :  0.05095951  Accuracy :  99.095  Class Accuracy :  11.167883211678834  Car class accuracy  11.167883211678834
Iter :  189 Batch :  11   Loss :  0.086349644  Accuracy :  98.985  Class Accuracy :  9.10344827586207  Car class accuracy  9.10344827586207
Iter :  189 Batch :  12   Loss :  0.17345384  Accuracy :  95.92500000000001  Class Accuracy :  12.567849686847598  Car class accuracy  12.567849686847598
Iter :  189 Batch :  13   Loss :  0.16105305  Accuracy :  96.61999999999999  Class Accuracy :  12.05158264947245  Car class accuracy  12.05158264947245
Iter :  189 Batch :  14   Loss :  0.06939714  Accuracy :  98.935  Class Accuracy :  9.877551020408163  Car class accuracy  9.877551020408163
Iter :  189 Batch :  15   Loss :  0.44748715  Accuracy :  91.86999999999999  Class Accuracy :  14.07114624505929  Car class accuracy  14.07114624505929
Iter :  189 Batch :  16   Loss :  0.023632608  Accuracy :  99.54499999999999  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 190 loss : 0.33280307 Accuracy: 93.75324868380304 Class Accuracy : 12.787293320351472
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__190_0.ckpt
saved prediction of 0 accuracy :  0.98225  class accuracy :  0.1115606936416185  car_class_accuracy :  0.1115606936416185
saved prediction of 1 accuracy :  0.94365  class accuracy :  0.07782724844167409  car_class_accuracy :  0.07782724844167409
saved prediction of 2 accuracy :  0.96385  class accuracy :  0.05664913598797896  car_class_accuracy :  0.05664913598797896
saved prediction of 3 accuracy :  0.9479  class accuracy :  0.016932907348242814  car_class_accuracy :  0.016932907348242814
saved prediction of 4 accuracy :  0.9847  class accuracy :  0.08907185628742516  car_class_accuracy :  0.08907185628742516
saved prediction of 5 accuracy :  0.9413  class accuracy :  0.10478260869565217  car_class_accuracy :  0.10478260869565217
saved prediction of 6 accuracy :  0.9812  class accuracy :  0.09075372480280455  car_class_accuracy :  0.09075372480280455
saved prediction of 7 accuracy :  0.9923  class accuracy :  0.03469387755102041  car_class_accuracy :  0.03469387755102041
saved prediction of 8 accuracy :  0.93335  class accuracy :  0.0594035594035594  car_class_accuracy :  0.0594035594035594
saved prediction of 9 accuracy :  0.94775  class accuracy :  0.06792346651660101  car_class_accuracy :  0.06792346651660101
saved prediction of 10 accuracy :  0.9901  class accuracy :  0.06666666666666667  car_class_accuracy :  0.06666666666666667
saved prediction of 11 accuracy :  0.96585  class accuracy :  0.08574224210232037  car_class_accuracy :  0.08574224210232037
saved prediction of 12 accuracy :  0.9828  class accuracy :  0.07142857142857142  car_class_accuracy :  0.07142857142857142
saved prediction of 13 accuracy :  0.8561  class accuracy :  0.05960642154324184  car_class_accuracy :  0.05960642154324184
saved prediction of 14 accuracy :  0.9926  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 15 accuracy :  0.97075  class accuracy :  0.07694610778443114  car_class_accuracy :  0.07694610778443114
saved prediction of 16 accuracy :  0.99315  class accuracy :  0.08869565217391304  car_class_accuracy :  0.08869565217391304
saved prediction of 17 accuracy :  0.98765  class accuracy :  0.08707482993197278  car_class_accuracy :  0.08707482993197278
saved prediction of 18 accuracy :  0.93075  class accuracy :  0.08844262295081967  car_class_accuracy :  0.08844262295081967
saved prediction of 19 accuracy :  0.96045  class accuracy :  0.05653089887640449  car_class_accuracy :  0.05653089887640449
saved prediction of 20 accuracy :  0.9456  class accuracy :  0.01626943005181347  car_class_accuracy :  0.01626943005181347
saved prediction of 21 accuracy :  0.9842  class accuracy :  0.09522365428354815  car_class_accuracy :  0.09522365428354815
saved prediction of 22 accuracy :  0.93855  class accuracy :  0.09556025369978859  car_class_accuracy :  0.09556025369978859
saved prediction of 23 accuracy :  0.9827  class accuracy :  0.09142976588628762  car_class_accuracy :  0.09142976588628762
saved prediction of 24 accuracy :  0.99285  class accuracy :  0.035263157894736843  car_class_accuracy :  0.035263157894736843
saved prediction of 25 accuracy :  0.9418  class accuracy :  0.05405405405405406  car_class_accuracy :  0.05405405405405406
saved prediction of 26 accuracy :  0.94095  class accuracy :  0.06413502109704641  car_class_accuracy :  0.06413502109704641
saved prediction of 27 accuracy :  0.99255  class accuracy :  0.03888888888888889  car_class_accuracy :  0.03888888888888889
saved prediction of 28 accuracy :  0.96625  class accuracy :  0.08197986577181207  car_class_accuracy :  0.08197986577181207
saved prediction of 29 accuracy :  0.9847  class accuracy :  0.07104557640750671  car_class_accuracy :  0.07104557640750671
saved prediction of 30 accuracy :  0.9074  class accuracy :  0.04781054512957998  car_class_accuracy :  0.04781054512957998
saved prediction of 31 accuracy :  0.99255  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 32 accuracy :  0.96655  class accuracy :  0.07718715393133999  car_class_accuracy :  0.07718715393133999
saved prediction of 33 accuracy :  0.9928  class accuracy :  0.07364341085271317  car_class_accuracy :  0.07364341085271317
saved prediction of 34 accuracy :  0.98585  class accuracy :  0.09861111111111112  car_class_accuracy :  0.09861111111111112
saved prediction of 35 accuracy :  0.94515  class accuracy :  0.08738898756660746  car_class_accuracy :  0.08738898756660746
saved prediction of 36 accuracy :  0.95175  class accuracy :  0.045746818486269256  car_class_accuracy :  0.045746818486269256
saved prediction of 37 accuracy :  0.9522  class accuracy :  0.01927437641723356  car_class_accuracy :  0.01927437641723356
saved prediction of 38 accuracy :  0.9815  class accuracy :  0.08899213724088635  car_class_accuracy :  0.08899213724088635
saved prediction of 39 accuracy :  0.93235  class accuracy :  0.1004073319755601  car_class_accuracy :  0.1004073319755601
saved prediction of 40 accuracy :  0.97945  class accuracy :  0.08921357971637302  car_class_accuracy :  0.08921357971637302
saved prediction of 41 accuracy :  0.9911  class accuracy :  0.028000000000000004  car_class_accuracy :  0.028000000000000004
saved prediction of 42 accuracy :  0.9404  class accuracy :  0.055741360089186176  car_class_accuracy :  0.055741360089186176
saved prediction of 43 accuracy :  0.9488  class accuracy :  0.07238680827277809  car_class_accuracy :  0.07238680827277809
saved prediction of 44 accuracy :  0.99055  class accuracy :  0.025  car_class_accuracy :  0.025
saved prediction of 45 accuracy :  0.9645  class accuracy :  0.08621047174701918  car_class_accuracy :  0.08621047174701918
saved prediction of 46 accuracy :  0.9851  class accuracy :  0.06975476839237058  car_class_accuracy :  0.06975476839237058
saved prediction of 47 accuracy :  0.86205  class accuracy :  0.04196157735085945  car_class_accuracy :  0.04196157735085945
saved prediction of 48 accuracy :  0.9916  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 49 accuracy :  0.9662  class accuracy :  0.07432041642567958  car_class_accuracy :  0.07432041642567958
saved prediction of 50 accuracy :  0.9933  class accuracy :  0.08636363636363636  car_class_accuracy :  0.08636363636363636
saved prediction of 51 accuracy :  0.98415  class accuracy :  0.09565217391304348  car_class_accuracy :  0.09565217391304348
saved prediction of 52 accuracy :  0.94275  class accuracy :  0.0852650494159928  car_class_accuracy :  0.0852650494159928
saved prediction of 53 accuracy :  0.9583  class accuracy :  0.056678200692041526  car_class_accuracy :  0.056678200692041526
saved prediction of 54 accuracy :  0.9454  class accuracy :  0.014818548387096776  car_class_accuracy :  0.014818548387096776
saved prediction of 55 accuracy :  0.98225  class accuracy :  0.09158200290275761  car_class_accuracy :  0.09158200290275761
saved prediction of 56 accuracy :  0.9341  class accuracy :  0.10524109014675051  car_class_accuracy :  0.10524109014675051
saved prediction of 57 accuracy :  0.97995  class accuracy :  0.08665716999050332  car_class_accuracy :  0.08665716999050332
saved prediction of 58 accuracy :  0.99145  class accuracy :  0.026455026455026454  car_class_accuracy :  0.026455026455026454
saved prediction of 59 accuracy :  0.94625  class accuracy :  0.055008998200359926  car_class_accuracy :  0.055008998200359926
saved prediction of 60 accuracy :  0.9473  class accuracy :  0.06924369747899159  car_class_accuracy :  0.06924369747899159
saved prediction of 61 accuracy :  0.9921  class accuracy :  0.026666666666666665  car_class_accuracy :  0.026666666666666665
saved prediction of 62 accuracy :  0.9662  class accuracy :  0.08715784088002046  car_class_accuracy :  0.08715784088002046
saved prediction of 63 accuracy :  0.98285  class accuracy :  0.0761038961038961  car_class_accuracy :  0.0761038961038961
saved prediction of 64 accuracy :  0.907  class accuracy :  0.048034934497816595  car_class_accuracy :  0.048034934497816595
saved prediction of 65 accuracy :  0.99275  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 66 accuracy :  0.96535  class accuracy :  0.0749034749034749  car_class_accuracy :  0.0749034749034749
saved prediction of 67 accuracy :  0.9921  class accuracy :  0.0774436090225564  car_class_accuracy :  0.0774436090225564
saved prediction of 68 accuracy :  0.98235  class accuracy :  0.09060402684563759  car_class_accuracy :  0.09060402684563759
saved prediction of 69 accuracy :  0.93935  class accuracy :  0.0907027027027027  car_class_accuracy :  0.0907027027027027
saved prediction of 70 accuracy :  0.9574  class accuracy :  0.054427792915531334  car_class_accuracy :  0.054427792915531334
saved prediction of 71 accuracy :  0.94695  class accuracy :  0.0170061099796334  car_class_accuracy :  0.0170061099796334
saved prediction of 72 accuracy :  0.98155  class accuracy :  0.08770668583752696  car_class_accuracy :  0.08770668583752696
saved prediction of 73 accuracy :  0.93305  class accuracy :  0.09958932238193019  car_class_accuracy :  0.09958932238193019
saved prediction of 74 accuracy :  0.97905  class accuracy :  0.08787432498772704  car_class_accuracy :  0.08787432498772704
saved prediction of 75 accuracy :  0.99105  class accuracy :  0.02356020942408377  car_class_accuracy :  0.02356020942408377
saved prediction of 76 accuracy :  0.95155  class accuracy :  0.05588235294117647  car_class_accuracy :  0.05588235294117647
saved prediction of 77 accuracy :  0.9461  class accuracy :  0.06966167498613422  car_class_accuracy :  0.06966167498613422
saved prediction of 78 accuracy :  0.9937  class accuracy :  0.04285714285714286  car_class_accuracy :  0.04285714285714286
saved prediction of 79 accuracy :  0.9712  class accuracy :  0.09004092769440655  car_class_accuracy :  0.09004092769440655
saved prediction of 80 accuracy :  0.98465  class accuracy :  0.0685792349726776  car_class_accuracy :  0.0685792349726776
saved prediction of 81 accuracy :  0.8577  class accuracy :  0.05530612244897959  car_class_accuracy :  0.05530612244897959
saved prediction of 82 accuracy :  0.99205  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 83 accuracy :  0.96215  class accuracy :  0.07281081081081081  car_class_accuracy :  0.07281081081081081
saved prediction of 84 accuracy :  0.99295  class accuracy :  0.07945205479452054  car_class_accuracy :  0.07945205479452054
saved prediction of 85 accuracy :  0.98295  class accuracy :  0.08896103896103896  car_class_accuracy :  0.08896103896103896
saved prediction of 86 accuracy :  0.95825  class accuracy :  0.08307372793354102  car_class_accuracy :  0.08307372793354102
saved prediction of 87 accuracy :  0.95655  class accuracy :  0.05145960624575696  car_class_accuracy :  0.05145960624575696
saved prediction of 88 accuracy :  0.94985  class accuracy :  0.015772870662460567  car_class_accuracy :  0.015772870662460567
saved prediction of 89 accuracy :  0.98225  class accuracy :  0.08971308607417774  car_class_accuracy :  0.08971308607417774
saved prediction of 90 accuracy :  0.94205  class accuracy :  0.09063745019920319  car_class_accuracy :  0.09063745019920319
saved prediction of 91 accuracy :  0.9809  class accuracy :  0.09070525886669385  car_class_accuracy :  0.09070525886669385
saved prediction of 92 accuracy :  0.98995  class accuracy :  0.02  car_class_accuracy :  0.02
saved prediction of 93 accuracy :  0.9411  class accuracy :  0.053438864628820956  car_class_accuracy :  0.053438864628820956
saved prediction of 94 accuracy :  0.9498  class accuracy :  0.07049180327868852  car_class_accuracy :  0.07049180327868852
saved prediction of 95 accuracy :  0.9924  class accuracy :  0.05  car_class_accuracy :  0.05
saved prediction of 96 accuracy :  0.968  class accuracy :  0.08686623516720604  car_class_accuracy :  0.08686623516720604
saved prediction of 97 accuracy :  0.98495  class accuracy :  0.07138810198300283  car_class_accuracy :  0.07138810198300283
saved prediction of 98 accuracy :  0.86655  class accuracy :  0.04752275025278059  car_class_accuracy :  0.04752275025278059
saved prediction of 99 accuracy :  0.9906  class accuracy :  0.0  car_class_accuracy :  0.0
Iter :  190 Batch :  0   Loss :  0.1288695  Accuracy :  96.78999999999999  Class Accuracy :  11.78494623655914  Car class accuracy  11.78494623655914
Iter :  190 Batch :  1   Loss :  0.18850675  Accuracy :  95.185  Class Accuracy :  13.925233644859814  Car class accuracy  13.925233644859814
Iter :  190 Batch :  2   Loss :  0.022731237  Accuracy :  99.72999999999999  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  190 Batch :  3   Loss :  0.06241794  Accuracy :  99.72  Class Accuracy :  8.028169014084508  Car class accuracy  8.028169014084508
Iter :  190 Batch :  4   Loss :  0.14876696  Accuracy :  95.66  Class Accuracy :  14.666666666666666  Car class accuracy  14.666666666666666
Iter :  190 Batch :  5   Loss :  0.21836838  Accuracy :  96.59  Class Accuracy :  11.143300569063634  Car class accuracy  11.143300569063634
Iter :  190 Batch :  6   Loss :  0.102790914  Accuracy :  98.43499999999999  Class Accuracy :  9.553072625698325  Car class accuracy  9.553072625698325
Iter :  190 Batch :  7   Loss :  0.23042129  Accuracy :  95.08  Class Accuracy :  12.605945604048069  Car class accuracy  12.605945604048069
Iter :  190 Batch :  8   Loss :  0.1994164  Accuracy :  96.465  Class Accuracy :  12.031650983746792  Car class accuracy  12.031650983746792
Iter :  190 Batch :  9   Loss :  0.24562073  Accuracy :  95.13000000000001  Class Accuracy :  12.69160583941606  Car class accuracy  12.69160583941606
Iter :  190 Batch :  10   Loss :  0.030398102  Accuracy :  99.725  Class Accuracy :  9.565217391304348  Car class accuracy  9.565217391304348
Iter :  190 Batch :  11   Loss :  0.07955875  Accuracy :  99.595  Class Accuracy :  6.714285714285714  Car class accuracy  6.714285714285714
Iter :  190 Batch :  12   Loss :  0.1097259  Accuracy :  98.595  Class Accuracy :  11.576846307385228  Car class accuracy  11.576846307385228
Iter :  190 Batch :  13   Loss :  0.17379488  Accuracy :  96.275  Class Accuracy :  12.029784886927745  Car class accuracy  12.029784886927745
Iter :  190 Batch :  14   Loss :  0.06904347  Accuracy :  98.57000000000001  Class Accuracy :  10.627450980392156  Car class accuracy  10.627450980392156
Iter :  190 Batch :  15   Loss :  0.15520786  Accuracy :  96.47  Class Accuracy :  12.281831187410585  Car class accuracy  12.281831187410585
Iter :  190 Batch :  16   Loss :  0.016517669  Accuracy :  99.89  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 191 loss : 0.33173236 Accuracy: 93.77299599507086 Class Accuracy : 12.775537935633627
Iter :  191 Batch :  0   Loss :  0.12119492  Accuracy :  97.005  Class Accuracy :  12.95624332977588  Car class accuracy  12.95624332977588
Iter :  191 Batch :  1   Loss :  0.19596997  Accuracy :  94.925  Class Accuracy :  14.803094233473981  Car class accuracy  14.803094233473981
Iter :  191 Batch :  2   Loss :  0.028345035  Accuracy :  99.28  Class Accuracy :  10.852272727272727  Car class accuracy  10.852272727272727
Iter :  191 Batch :  3   Loss :  0.06311345  Accuracy :  99.215  Class Accuracy :  8.799999999999999  Car class accuracy  8.799999999999999
Iter :  191 Batch :  4   Loss :  0.057716645  Accuracy :  99.25  Class Accuracy :  5.0  Car class accuracy  5.0
Iter :  191 Batch :  5   Loss :  0.33366758  Accuracy :  96.14  Class Accuracy :  10.763199163617355  Car class accuracy  10.763199163617355
Iter :  191 Batch :  6   Loss :  0.07225916  Accuracy :  98.26  Class Accuracy :  11.405405405405403  Car class accuracy  11.405405405405403
Iter :  191 Batch :  7   Loss :  0.17551194  Accuracy :  95.39  Class Accuracy :  12.88888888888889  Car class accuracy  12.88888888888889
Iter :  191 Batch :  8   Loss :  0.41707218  Accuracy :  97.83  Class Accuracy :  9.735357917570498  Car class accuracy  9.735357917570498
Iter :  191 Batch :  9   Loss :  0.20262204  Accuracy :  97.1  Class Accuracy :  10.705009276437846  Car class accuracy  10.705009276437846
Iter :  191 Batch :  10   Loss :  0.026128186  Accuracy :  99.795  Class Accuracy :  9.315068493150685  Car class accuracy  9.315068493150685
Iter :  191 Batch :  11   Loss :  0.09332584  Accuracy :  98.465  Class Accuracy :  9.855072463768117  Car class accuracy  9.855072463768117
Iter :  191 Batch :  12   Loss :  0.12662476  Accuracy :  96.6  Class Accuracy :  12.27659574468085  Car class accuracy  12.27659574468085
Iter :  191 Batch :  13   Loss :  0.2509977  Accuracy :  94.235  Class Accuracy :  12.918332381496286  Car class accuracy  12.918332381496286
Iter :  191 Batch :  14   Loss :  0.12607333  Accuracy :  96.28999999999999  Class Accuracy :  12.84518828451883  Car class accuracy  12.84518828451883
Iter :  191 Batch :  15   Loss :  0.2816928  Accuracy :  91.34  Class Accuracy :  15.361527967257842  Car class accuracy  15.361527967257842
Iter :  191 Batch :  16   Loss :  0.032255996  Accuracy :  99.355  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 192 loss : 0.3308023 Accuracy: 93.79026049647564 Class Accuracy : 12.764289731947306
Iter :  192 Batch :  0   Loss :  0.14778104  Accuracy :  96.52  Class Accuracy :  12.40625  Car class accuracy  12.40625
Iter :  192 Batch :  1   Loss :  0.19933145  Accuracy :  94.755  Class Accuracy :  14.058823529411763  Car class accuracy  14.058823529411763
Iter :  192 Batch :  2   Loss :  0.026775422  Accuracy :  99.485  Class Accuracy :  9.947368421052632  Car class accuracy  9.947368421052632
Iter :  192 Batch :  3   Loss :  0.1257514  Accuracy :  96.76  Class Accuracy :  11.25  Car class accuracy  11.25
Iter :  192 Batch :  4   Loss :  0.19307417  Accuracy :  93.81  Class Accuracy :  12.666666666666664  Car class accuracy  12.666666666666664
Iter :  192 Batch :  5   Loss :  0.18260863  Accuracy :  95.89  Class Accuracy :  12.365200132318888  Car class accuracy  12.365200132318888
Iter :  192 Batch :  6   Loss :  0.13199548  Accuracy :  98.175  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  192 Batch :  7   Loss :  0.21037938  Accuracy :  94.65  Class Accuracy :  13.528761061946904  Car class accuracy  13.528761061946904
Iter :  192 Batch :  8   Loss :  0.26833498  Accuracy :  95.19999999999999  Class Accuracy :  12.373887240356082  Car class accuracy  12.373887240356082
Iter :  192 Batch :  9   Loss :  0.33851546  Accuracy :  93.99  Class Accuracy :  13.611615245009073  Car class accuracy  13.611615245009073
Iter :  192 Batch :  10   Loss :  0.0359304  Accuracy :  99.55000000000001  Class Accuracy :  10.492957746478874  Car class accuracy  10.492957746478874
Iter :  192 Batch :  11   Loss :  0.08068675  Accuracy :  99.125  Class Accuracy :  9.0  Car class accuracy  9.0
Iter :  192 Batch :  12   Loss :  0.085538894  Accuracy :  98.61  Class Accuracy :  12.442105263157895  Car class accuracy  12.442105263157895
Iter :  192 Batch :  13   Loss :  0.205648  Accuracy :  95.325  Class Accuracy :  12.512506948304614  Car class accuracy  12.512506948304614
Iter :  192 Batch :  14   Loss :  0.07848418  Accuracy :  99.015  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  192 Batch :  15   Loss :  0.33883592  Accuracy :  95.59  Class Accuracy :  10.424948594928033  Car class accuracy  10.424948594928033
Iter :  192 Batch :  16   Loss :  0.013119102  Accuracy :  99.835  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 193 loss : 0.32989955 Accuracy: 93.80606859756098 Class Accuracy : 12.755170270181004
Iter :  193 Batch :  0   Loss :  0.1314472  Accuracy :  96.83  Class Accuracy :  13.056133056133056  Car class accuracy  13.056133056133056
Iter :  193 Batch :  1   Loss :  0.16724998  Accuracy :  97.46000000000001  Class Accuracy :  11.521739130434783  Car class accuracy  11.521739130434783
Iter :  193 Batch :  2   Loss :  0.031291287  Accuracy :  99.72  Class Accuracy :  8.91304347826087  Car class accuracy  8.91304347826087
Iter :  193 Batch :  3   Loss :  0.11809695  Accuracy :  99.0  Class Accuracy :  8.807947019867548  Car class accuracy  8.807947019867548
Iter :  193 Batch :  4   Loss :  0.076391496  Accuracy :  99.11  Class Accuracy :  8.666666666666668  Car class accuracy  8.666666666666668
Iter :  193 Batch :  5   Loss :  0.16201296  Accuracy :  97.94500000000001  Class Accuracy :  10.9198606271777  Car class accuracy  10.9198606271777
Iter :  193 Batch :  6   Loss :  0.07097455  Accuracy :  98.895  Class Accuracy :  10.317460317460318  Car class accuracy  10.317460317460318
Iter :  193 Batch :  7   Loss :  0.17053533  Accuracy :  95.23  Class Accuracy :  13.430114787305875  Car class accuracy  13.430114787305875
Iter :  193 Batch :  8   Loss :  0.17478317  Accuracy :  97.245  Class Accuracy :  11.747700394218134  Car class accuracy  11.747700394218134
Iter :  193 Batch :  9   Loss :  0.17177016  Accuracy :  97.775  Class Accuracy :  10.72289156626506  Car class accuracy  10.72289156626506
Iter :  193 Batch :  10   Loss :  0.032887325  Accuracy :  99.86  Class Accuracy :  8.347107438016529  Car class accuracy  8.347107438016529
Iter :  193 Batch :  11   Loss :  0.071686916  Accuracy :  99.53999999999999  Class Accuracy :  7.564102564102564  Car class accuracy  7.564102564102564
Iter :  193 Batch :  12   Loss :  0.09702781  Accuracy : /home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
/home/srgujar/anaconda3/envs/my_env/lib/python3.6/site-packages/matplotlib/figure.py:98: MatplotlibDeprecationWarning: 
Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  "Adding an axes using the same arguments as a previous axes "
 98.82  Class Accuracy :  10.854166666666668  Car class accuracy  10.854166666666668
Iter :  193 Batch :  13   Loss :  0.15523107  Accuracy :  95.895  Class Accuracy :  12.616550116550115  Car class accuracy  12.616550116550115
Iter :  193 Batch :  14   Loss :  0.067195415  Accuracy :  98.56  Class Accuracy :  11.23931623931624  Car class accuracy  11.23931623931624
Iter :  193 Batch :  15   Loss :  0.16012636  Accuracy :  95.89  Class Accuracy :  12.58292166549047  Car class accuracy  12.58292166549047
Iter :  193 Batch :  16   Loss :  0.0065681846  Accuracy :  99.97  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 194 loss : 0.32876432 Accuracy: 93.82822262663026 Class Accuracy : 12.741360693942259
Iter :  194 Batch :  0   Loss :  0.108747266  Accuracy :  97.81  Class Accuracy :  11.285714285714285  Car class accuracy  11.285714285714285
Iter :  194 Batch :  1   Loss :  0.15980108  Accuracy :  98.26  Class Accuracy :  10.292134831460672  Car class accuracy  10.292134831460672
Iter :  194 Batch :  2   Loss :  0.017827606  Accuracy :  99.625  Class Accuracy :  10.186046511627907  Car class accuracy  10.186046511627907
Iter :  194 Batch :  3   Loss :  0.04699382  Accuracy :  99.575  Class Accuracy :  8.380281690140844  Car class accuracy  8.380281690140844
Iter :  194 Batch :  4   Loss :  0.06698209  Accuracy :  98.615  Class Accuracy :  7.5  Car class accuracy  7.5
Iter :  194 Batch :  5   Loss :  0.17823717  Accuracy :  98.155  Class Accuracy :  10.461618257261412  Car class accuracy  10.461618257261412
Iter :  194 Batch :  6   Loss :  0.052502576  Accuracy :  98.91499999999999  Class Accuracy :  9.94949494949495  Car class accuracy  9.94949494949495
Iter :  194 Batch :  7   Loss :  0.14159483  Accuracy :  96.695  Class Accuracy :  12.162500000000001  Car class accuracy  12.162500000000001
Iter :  194 Batch :  8   Loss :  0.1823398  Accuracy :  98.24000000000001  Class Accuracy :  10.519540229885058  Car class accuracy  10.519540229885058
Iter :  194 Batch :  9   Loss :  0.18468331  Accuracy :  97.125  Class Accuracy :  10.963748894783379  Car class accuracy  10.963748894783379
Iter :  194 Batch :  10   Loss :  0.027101463  Accuracy :  99.845  Class Accuracy :  9.347826086956522  Car class accuracy  9.347826086956522
Iter :  194 Batch :  11   Loss :  0.06119154  Accuracy :  99.63499999999999  Class Accuracy :  8.028169014084508  Car class accuracy  8.028169014084508
Iter :  194 Batch :  12   Loss :  0.07214941  Accuracy :  98.485  Class Accuracy :  12.07589285714286  Car class accuracy  12.07589285714286
Iter :  194 Batch :  13   Loss :  0.14735214  Accuracy :  96.12  Class Accuracy :  12.184684684684685  Car class accuracy  12.184684684684685
Iter :  194 Batch :  14   Loss :  0.052139025  Accuracy :  99.32  Class Accuracy :  9.670781893004115  Car class accuracy  9.670781893004115
Iter :  194 Batch :  15   Loss :  0.15626925  Accuracy :  95.57  Class Accuracy :  12.680621201890613  Car class accuracy  12.680621201890613
Iter :  194 Batch :  16   Loss :  0.0062898747  Accuracy :  99.98  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 195 loss : 0.3275794 Accuracy: 93.85142426071212 Class Accuracy : 12.725997363704211
Iter :  195 Batch :  0   Loss :  0.087326065  Accuracy :  97.69  Class Accuracy :  11.271989174560218  Car class accuracy  11.271989174560218
Iter :  195 Batch :  1   Loss :  0.12517302  Accuracy :  96.755  Class Accuracy :  12.588320115356884  Car class accuracy  12.588320115356884
Iter :  195 Batch :  2   Loss :  0.015824717  Accuracy :  99.68  Class Accuracy :  9.837837837837839  Car class accuracy  9.837837837837839
Iter :  195 Batch :  3   Loss :  0.05936684  Accuracy :  99.30499999999999  Class Accuracy :  8.509316770186336  Car class accuracy  8.509316770186336
Iter :  195 Batch :  4   Loss :  0.10146049  Accuracy :  97.91  Class Accuracy :  6.111111111111112  Car class accuracy  6.111111111111112
Iter :  195 Batch :  5   Loss :  0.12409016  Accuracy :  97.575  Class Accuracy :  11.124700877426216  Car class accuracy  11.124700877426216
Iter :  195 Batch :  6   Loss :  0.056293562  Accuracy :  99.155  Class Accuracy :  9.456521739130434  Car class accuracy  9.456521739130434
Iter :  195 Batch :  7   Loss :  0.23019837  Accuracy :  97.44  Class Accuracy :  10.749746707193514  Car class accuracy  10.749746707193514
Iter :  195 Batch :  8   Loss :  0.1767868  Accuracy :  96.95  Class Accuracy :  12.05396475770925  Car class accuracy  12.05396475770925
Iter :  195 Batch :  9   Loss :  0.14292985  Accuracy :  97.235  Class Accuracy :  11.747243426632739  Car class accuracy  11.747243426632739
Iter :  195 Batch :  10   Loss :  0.026185019  Accuracy :  99.455  Class Accuracy :  10.575539568345324  Car class accuracy  10.575539568345324
Iter :  195 Batch :  11   Loss :  0.05072878  Accuracy :  99.5  Class Accuracy :  8.874172185430464  Car class accuracy  8.874172185430464
Iter :  195 Batch :  12   Loss :  0.10790398  Accuracy :  97.32  Class Accuracy :  13.597560975609756  Car class accuracy  13.597560975609756
Iter :  195 Batch :  13   Loss :  0.19238633  Accuracy :  95.93  Class Accuracy :  12.537313432835823  Car class accuracy  12.537313432835823
Iter :  195 Batch :  14   Loss :  0.0727465  Accuracy :  97.675  Class Accuracy :  12.82157676348548  Car class accuracy  12.82157676348548
Iter :  195 Batch :  15   Loss :  0.15797488  Accuracy :  95.96000000000001  Class Accuracy :  12.807613868116926  Car class accuracy  12.807613868116926
Iter :  195 Batch :  16   Loss :  0.010610941  Accuracy :  99.82  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 196 loss : 0.32642937 Accuracy: 93.87240318222756 Class Accuracy : 12.713485377552304
Iter :  196 Batch :  0   Loss :  0.10905698  Accuracy :  97.745  Class Accuracy :  11.517948717948718  Car class accuracy  11.517948717948718
Iter :  196 Batch :  1   Loss :  0.1882836  Accuracy :  96.61999999999999  Class Accuracy :  12.66276517922458  Car class accuracy  12.66276517922458
Iter :  196 Batch :  2   Loss :  0.01682107  Accuracy :  99.595  Class Accuracy :  10.106951871657754  Car class accuracy  10.106951871657754
Iter :  196 Batch :  3   Loss :  0.059534773  Accuracy :  99.33999999999999  Class Accuracy :  8.656716417910447  Car class accuracy  8.656716417910447
Iter :  196 Batch :  4   Loss :  0.07102113  Accuracy :  98.97500000000001  Class Accuracy :  8.26086956521739  Car class accuracy  8.26086956521739
Iter :  196 Batch :  5   Loss :  0.122716635  Accuracy :  98.44500000000001  Class Accuracy :  10.695680844048796  Car class accuracy  10.695680844048796
Iter :  196 Batch :  6   Loss :  0.08198934  Accuracy :  97.97  Class Accuracy :  12.70718232044199  Car class accuracy  12.70718232044199
Iter :  196 Batch :  7   Loss :  0.154271  Accuracy :  95.775  Class Accuracy :  12.459736456808198  Car class accuracy  12.459736456808198
Iter :  196 Batch :  8   Loss :  0.25573513  Accuracy :  95.83  Class Accuracy :  12.555873925501432  Car class accuracy  12.555873925501432
Iter :  196 Batch :  9   Loss :  0.19016613  Accuracy :  97.39999999999999  Class Accuracy :  10.793226381461677  Car class accuracy  10.793226381461677
Iter :  196 Batch :  10   Loss :  0.018432532  Accuracy :  99.78  Class Accuracy :  9.851851851851851  Car class accuracy  9.851851851851851
Iter :  196 Batch :  11   Loss :  0.05267754  Accuracy :  99.685  Class Accuracy :  7.9432624113475185  Car class accuracy  7.9432624113475185
Iter :  196 Batch :  12   Loss :  0.078897305  Accuracy :  98.665  Class Accuracy :  11.573498964803312  Car class accuracy  11.573498964803312
Iter :  196 Batch :  13   Loss :  0.17079896  Accuracy :  95.695  Class Accuracy :  12.55091103965702  Car class accuracy  12.55091103965702
Iter :  196 Batch :  14   Loss :  0.05370783  Accuracy :  99.46000000000001  Class Accuracy :  9.44  Car class accuracy  9.44
Iter :  196 Batch :  15   Loss :  0.2726475  Accuracy :  95.97  Class Accuracy :  10.629811056682996  Car class accuracy  10.629811056682996
Iter :  196 Batch :  16   Loss :  0.0060122167  Accuracy :  99.985  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 197 loss : 0.32534012 Accuracy: 93.89364097968938 Class Accuracy : 12.700425949710661
Iter :  197 Batch :  0   Loss :  0.09016311  Accuracy :  98.14500000000001  Class Accuracy :  11.498501498501499  Car class accuracy  11.498501498501499
Iter :  197 Batch :  1   Loss :  0.17965667  Accuracy :  95.24000000000001  Class Accuracy :  13.90570021111893  Car class accuracy  13.90570021111893
Iter :  197 Batch :  2   Loss :  0.022889152  Accuracy :  99.505  Class Accuracy :  10.245098039215685  Car class accuracy  10.245098039215685
Iter :  197 Batch :  3   Loss :  0.07270862  Accuracy :  98.775  Class Accuracy :  9.419354838709678  Car class accuracy  9.419354838709678
Iter :  197 Batch :  4   Loss :  0.05966741  Accuracy :  98.86  Class Accuracy :  8.235294117647058  Car class accuracy  8.235294117647058
Iter :  197 Batch :  5   Loss :  0.16176072  Accuracy :  95.48  Class Accuracy :  12.295730100158146  Car class accuracy  12.295730100158146
Iter :  197 Batch :  6   Loss :  0.10172304  Accuracy :  98.965  Class Accuracy :  9.900497512437811  Car class accuracy  9.900497512437811
Iter :  197 Batch :  7   Loss :  0.17624992  Accuracy :  95.05  Class Accuracy :  13.145472061657031  Car class accuracy  13.145472061657031
Iter :  197 Batch :  8   Loss :  0.18806885  Accuracy :  94.425  Class Accuracy :  14.585115483319075  Car class accuracy  14.585115483319075
Iter :  197 Batch :  9   Loss :  0.22151455  Accuracy :  94.34  Class Accuracy :  13.80995475113122  Car class accuracy  13.80995475113122
Iter :  197 Batch :  10   Loss :  0.016159868  Accuracy :  99.78  Class Accuracy :  9.922480620155039  Car class accuracy  9.922480620155039
Iter :  197 Batch :  11   Loss :  0.064958416  Accuracy :  99.19  Class Accuracy :  10.198675496688743  Car class accuracy  10.198675496688743
Iter :  197 Batch :  12   Loss :  0.0582288  Accuracy :  98.705  Class Accuracy :  11.491228070175438  Car class accuracy  11.491228070175438
Iter :  197 Batch :  13   Loss :  0.22090402  Accuracy :  98.125  Class Accuracy :  9.75896860986547  Car class accuracy  9.75896860986547
Iter :  197 Batch :  14   Loss :  0.06591876  Accuracy :  99.29  Class Accuracy :  8.73015873015873  Car class accuracy  8.73015873015873
Iter :  197 Batch :  15   Loss :  0.14456451  Accuracy :  97.435  Class Accuracy :  10.937718684394682  Car class accuracy  10.937718684394682
Iter :  197 Batch :  16   Loss :  0.003978231  Accuracy :  99.995  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 198 loss : 0.32424602 Accuracy: 93.91299108469538 Class Accuracy : 12.689184555261997
Iter :  198 Batch :  0   Loss :  0.09177024  Accuracy :  98.26  Class Accuracy :  11.25252525252525  Car class accuracy  11.25252525252525
Iter :  198 Batch :  1   Loss :  0.1667688  Accuracy :  96.35000000000001  Class Accuracy :  12.778993435448577  Car class accuracy  12.778993435448577
Iter :  198 Batch :  2   Loss :  0.029852157  Accuracy :  99.82  Class Accuracy :  8.804347826086957  Car class accuracy  8.804347826086957
Iter :  198 Batch :  3   Loss :  0.06445598  Accuracy :  99.09  Class Accuracy :  8.940397350993377  Car class accuracy  8.940397350993377
Iter :  198 Batch :  4   Loss :  0.06378031  Accuracy :  98.81  Class Accuracy :  9.0  Car class accuracy  9.0
Iter :  198 Batch :  5   Loss :  0.19509447  Accuracy :  95.49  Class Accuracy :  12.033195020746886  Car class accuracy  12.033195020746886
Iter :  198 Batch :  6   Loss :  0.065403745  Accuracy :  98.19  Class Accuracy :  12.35632183908046  Car class accuracy  12.35632183908046
Iter :  198 Batch :  7   Loss :  0.18774486  Accuracy :  95.985  Class Accuracy :  12.414292612264607  Car class accuracy  12.414292612264607
Iter :  198 Batch :  8   Loss :  0.12683427  Accuracy :  96.99  Class Accuracy :  12.484689413823272  Car class accuracy  12.484689413823272
Iter :  198 Batch :  9   Loss :  0.17605425  Accuracy :  95.965  Class Accuracy :  12.397137745974955  Car class accuracy  12.397137745974955
Iter :  198 Batch :  10   Loss :  0.04056287  Accuracy :  99.86  Class Accuracy :  8.513513513513512  Car class accuracy  8.513513513513512
Iter :  198 Batch :  11   Loss :  0.08545113  Accuracy :  99.59  Class Accuracy :  6.265822784810126  Car class accuracy  6.265822784810126
Iter :  198 Batch :  12   Loss :  0.09162672  Accuracy :  98.77  Class Accuracy :  10.829875518672198  Car class accuracy  10.829875518672198
Iter :  198 Batch :  13   Loss :  0.1614498  Accuracy :  95.39999999999999  Class Accuracy :  13.168478260869565  Car class accuracy  13.168478260869565
Iter :  198 Batch :  14   Loss :  0.057598535  Accuracy :  99.045  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  198 Batch :  15   Loss :  0.16282532  Accuracy :  95.94500000000001  Class Accuracy :  12.508316699933467  Car class accuracy  12.508316699933467
Iter :  198 Batch :  16   Loss :  0.0046410714  Accuracy :  99.955  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 199 loss : 0.3231401 Accuracy: 93.93280011827322 Class Accuracy : 12.676775261895731
Iter :  199 Batch :  0   Loss :  0.10232676  Accuracy :  97.28  Class Accuracy :  11.47311827956989  Car class accuracy  11.47311827956989
Iter :  199 Batch :  1   Loss :  0.1525787  Accuracy :  97.94  Class Accuracy :  11.409495548961424  Car class accuracy  11.409495548961424
Iter :  199 Batch :  2   Loss :  0.01898184  Accuracy :  99.51  Class Accuracy :  10.792079207920793  Car class accuracy  10.792079207920793
Iter :  199 Batch :  3   Loss :  0.07213627  Accuracy :  99.08500000000001  Class Accuracy :  8.64864864864865  Car class accuracy  8.64864864864865
Iter :  199 Batch :  4   Loss :  0.041874312  Accuracy :  99.55000000000001  Class Accuracy :  4.2105263157894735  Car class accuracy  4.2105263157894735
Iter :  199 Batch :  5   Loss :  0.2327479  Accuracy :  97.775  Class Accuracy :  10.464294726217512  Car class accuracy  10.464294726217512
Iter :  199 Batch :  6   Loss :  0.074086905  Accuracy :  98.48  Class Accuracy :  10.423280423280424  Car class accuracy  10.423280423280424
Iter :  199 Batch :  7   Loss :  0.15743355  Accuracy :  96.02000000000001  Class Accuracy :  12.558672009158558  Car class accuracy  12.558672009158558
Iter :  199 Batch :  8   Loss :  0.15424311  Accuracy :  97.995  Class Accuracy :  11.16094986807388  Car class accuracy  11.16094986807388
Iter :  199 Batch :  9   Loss :  0.17138223  Accuracy :  97.745  Class Accuracy :  10.670611439842208  Car class accuracy  10.670611439842208
Iter :  199 Batch :  10   Loss :  0.033200458  Accuracy :  99.395  Class Accuracy :  10.0  Car class accuracy  10.0
Iter :  199 Batch :  11   Loss :  0.056872636  Accuracy :  99.675  Class Accuracy :  7.875  Car class accuracy  7.875
Iter :  199 Batch :  12   Loss :  0.0664843  Accuracy :  98.56  Class Accuracy :  12.219873150105709  Car class accuracy  12.219873150105709
Iter :  199 Batch :  13   Loss :  0.14570513  Accuracy :  96.10499999999999  Class Accuracy :  12.485615650172614  Car class accuracy  12.485615650172614
Iter :  199 Batch :  14   Loss :  0.059255384  Accuracy :  98.675  Class Accuracy :  11.150793650793652  Car class accuracy  11.150793650793652
Iter :  199 Batch :  15   Loss :  0.16935925  Accuracy :  94.935  Class Accuracy :  13.151079136690647  Car class accuracy  13.151079136690647
Iter :  199 Batch :  16   Loss :  0.016609818  Accuracy :  99.925  Class Accuracy :  0.0  Car class accuracy  0.0
**** Iteration : 200 loss : 0.32203153 Accuracy: 93.95392174168873 Class Accuracy : 12.663003228533862
Model saved in path: /home/srgujar/Pointwise-segmentation/results/pointer_M2_2_16_14_46/checkpoints/pointer2__200_0.ckpt
saved prediction of 0 accuracy :  0.98785  class accuracy :  0.07676056338028169  car_class_accuracy :  0.07676056338028169
saved prediction of 1 accuracy :  0.98755  class accuracy :  0.09781021897810219  car_class_accuracy :  0.09781021897810219
saved prediction of 2 accuracy :  0.97015  class accuracy :  0.0700507614213198  car_class_accuracy :  0.0700507614213198
saved prediction of 3 accuracy :  0.9596  class accuracy :  0.0595729537366548  car_class_accuracy :  0.0595729537366548
saved prediction of 4 accuracy :  0.9464  class accuracy :  0.006210526315789474  car_class_accuracy :  0.006210526315789474
saved prediction of 5 accuracy :  0.94505  class accuracy :  0.039761727475800444  car_class_accuracy :  0.039761727475800444
saved prediction of 6 accuracy :  0.9556  class accuracy :  0.08867924528301888  car_class_accuracy :  0.08867924528301888
saved prediction of 7 accuracy :  0.95215  class accuracy :  0.07371104815864023  car_class_accuracy :  0.07371104815864023
saved prediction of 8 accuracy :  0.9893  class accuracy :  0.026570048309178744  car_class_accuracy :  0.026570048309178744
saved prediction of 9 accuracy :  0.9533  class accuracy :  0.06598317560462671  car_class_accuracy :  0.06598317560462671
saved prediction of 10 accuracy :  0.9416  class accuracy :  0.062087614926987555  car_class_accuracy :  0.062087614926987555
saved prediction of 11 accuracy :  0.99085  class accuracy :  0.010526315789473684  car_class_accuracy :  0.010526315789473684
saved prediction of 12 accuracy :  0.9353  class accuracy :  0.06984168865435356  car_class_accuracy :  0.06984168865435356
saved prediction of 13 accuracy :  0.98365  class accuracy :  0.07178082191780823  car_class_accuracy :  0.07178082191780823
saved prediction of 14 accuracy :  0.8693  class accuracy :  0.03240223463687151  car_class_accuracy :  0.03240223463687151
saved prediction of 15 accuracy :  0.9915  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 16 accuracy :  0.9758  class accuracy :  0.07885811192764274  car_class_accuracy :  0.07885811192764274
saved prediction of 17 accuracy :  0.9889  class accuracy :  0.10476190476190476  car_class_accuracy :  0.10476190476190476
saved prediction of 18 accuracy :  0.98345  class accuracy :  0.10136054421768707  car_class_accuracy :  0.10136054421768707
saved prediction of 19 accuracy :  0.96675  class accuracy :  0.07360980207351556  car_class_accuracy :  0.07360980207351556
saved prediction of 20 accuracy :  0.9569  class accuracy :  0.05795536357091433  car_class_accuracy :  0.05795536357091433
saved prediction of 21 accuracy :  0.943  class accuracy :  0.008350305498981669  car_class_accuracy :  0.008350305498981669
saved prediction of 22 accuracy :  0.9449  class accuracy :  0.037913299044819986  car_class_accuracy :  0.037913299044819986
saved prediction of 23 accuracy :  0.95735  class accuracy :  0.0827354260089686  car_class_accuracy :  0.0827354260089686
saved prediction of 24 accuracy :  0.95155  class accuracy :  0.07958567112645662  car_class_accuracy :  0.07958567112645662
saved prediction of 25 accuracy :  0.9898  class accuracy :  0.023529411764705882  car_class_accuracy :  0.023529411764705882
saved prediction of 26 accuracy :  0.9551  class accuracy :  0.06241486068111455  car_class_accuracy :  0.06241486068111455
saved prediction of 27 accuracy :  0.9468  class accuracy :  0.06042626728110599  car_class_accuracy :  0.06042626728110599
saved prediction of 28 accuracy :  0.99195  class accuracy :  0.0625  car_class_accuracy :  0.0625
saved prediction of 29 accuracy :  0.94435  class accuracy :  0.06854891661195009  car_class_accuracy :  0.06854891661195009
saved prediction of 30 accuracy :  0.9817  class accuracy :  0.07960893854748603  car_class_accuracy :  0.07960893854748603
saved prediction of 31 accuracy :  0.8644  class accuracy :  0.032185089974293056  car_class_accuracy :  0.032185089974293056
saved prediction of 32 accuracy :  0.99245  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 33 accuracy :  0.97435  class accuracy :  0.0761520737327189  car_class_accuracy :  0.0761520737327189
saved prediction of 34 accuracy :  0.99055  class accuracy :  0.08657718120805369  car_class_accuracy :  0.08657718120805369
saved prediction of 35 accuracy :  0.9798  class accuracy :  0.10133333333333334  car_class_accuracy :  0.10133333333333334
saved prediction of 36 accuracy :  0.9634  class accuracy :  0.06944680851063831  car_class_accuracy :  0.06944680851063831
saved prediction of 37 accuracy :  0.9534  class accuracy :  0.05330520393811533  car_class_accuracy :  0.05330520393811533
saved prediction of 38 accuracy :  0.94815  class accuracy :  0.007158590308370044  car_class_accuracy :  0.007158590308370044
saved prediction of 39 accuracy :  0.94135  class accuracy :  0.039214285714285715  car_class_accuracy :  0.039214285714285715
saved prediction of 40 accuracy :  0.95  class accuracy :  0.11310782241014798  car_class_accuracy :  0.11310782241014798
saved prediction of 41 accuracy :  0.9541  class accuracy :  0.08090054428500743  car_class_accuracy :  0.08090054428500743
saved prediction of 42 accuracy :  0.9893  class accuracy :  0.026732673267326736  car_class_accuracy :  0.026732673267326736
saved prediction of 43 accuracy :  0.95025  class accuracy :  0.07171912832929782  car_class_accuracy :  0.07171912832929782
saved prediction of 44 accuracy :  0.9468  class accuracy :  0.06450315910396323  car_class_accuracy :  0.06450315910396323
saved prediction of 45 accuracy :  0.9895  class accuracy :  0.05333333333333333  car_class_accuracy :  0.05333333333333333
saved prediction of 46 accuracy :  0.93345  class accuracy :  0.06966726850657726  car_class_accuracy :  0.06966726850657726
saved prediction of 47 accuracy :  0.98205  class accuracy :  0.07372654155495979  car_class_accuracy :  0.07372654155495979
saved prediction of 48 accuracy :  0.87095  class accuracy :  0.025750636132315523  car_class_accuracy :  0.025750636132315523
saved prediction of 49 accuracy :  0.9936  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 50 accuracy :  0.97235  class accuracy :  0.0746218487394958  car_class_accuracy :  0.0746218487394958
saved prediction of 51 accuracy :  0.98895  class accuracy :  0.07642857142857143  car_class_accuracy :  0.07642857142857143
saved prediction of 52 accuracy :  0.9828  class accuracy :  0.0993006993006993  car_class_accuracy :  0.0993006993006993
saved prediction of 53 accuracy :  0.962  class accuracy :  0.06374216651745748  car_class_accuracy :  0.06374216651745748
saved prediction of 54 accuracy :  0.95835  class accuracy :  0.059915014164305946  car_class_accuracy :  0.059915014164305946
saved prediction of 55 accuracy :  0.9443  class accuracy :  0.009710743801652892  car_class_accuracy :  0.009710743801652892
saved prediction of 56 accuracy :  0.9434  class accuracy :  0.03661560904449307  car_class_accuracy :  0.03661560904449307
saved prediction of 57 accuracy :  0.961  class accuracy :  0.08471337579617835  car_class_accuracy :  0.08471337579617835
saved prediction of 58 accuracy :  0.9548  class accuracy :  0.07449741527857554  car_class_accuracy :  0.07449741527857554
saved prediction of 59 accuracy :  0.9894  class accuracy :  0.03073170731707317  car_class_accuracy :  0.03073170731707317
saved prediction of 60 accuracy :  0.95175  class accuracy :  0.06544444444444444  car_class_accuracy :  0.06544444444444444
saved prediction of 61 accuracy :  0.9449  class accuracy :  0.06087431693989072  car_class_accuracy :  0.06087431693989072
saved prediction of 62 accuracy :  0.99035  class accuracy :  0.06842105263157895  car_class_accuracy :  0.06842105263157895
saved prediction of 63 accuracy :  0.93665  class accuracy :  0.07040629095674968  car_class_accuracy :  0.07040629095674968
saved prediction of 64 accuracy :  0.9824  class accuracy :  0.0725067385444744  car_class_accuracy :  0.0725067385444744
saved prediction of 65 accuracy :  0.8727  class accuracy :  0.030655066530194473  car_class_accuracy :  0.030655066530194473
saved prediction of 66 accuracy :  0.993  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 67 accuracy :  0.97575  class accuracy :  0.07850953206239168  car_class_accuracy :  0.07850953206239168
saved prediction of 68 accuracy :  0.98965  class accuracy :  0.0896551724137931  car_class_accuracy :  0.0896551724137931
saved prediction of 69 accuracy :  0.9813  class accuracy :  0.10827067669172932  car_class_accuracy :  0.10827067669172932
saved prediction of 70 accuracy :  0.95865  class accuracy :  0.06522522522522523  car_class_accuracy :  0.06522522522522523
saved prediction of 71 accuracy :  0.95295  class accuracy :  0.05440587449933244  car_class_accuracy :  0.05440587449933244
saved prediction of 72 accuracy :  0.94595  class accuracy :  0.005827263267429761  car_class_accuracy :  0.005827263267429761
saved prediction of 73 accuracy :  0.944  class accuracy :  0.03670886075949367  car_class_accuracy :  0.03670886075949367
saved prediction of 74 accuracy :  0.96145  class accuracy :  0.0860310421286031  car_class_accuracy :  0.0860310421286031
saved prediction of 75 accuracy :  0.95255  class accuracy :  0.08005651998385144  car_class_accuracy :  0.08005651998385144
saved prediction of 76 accuracy :  0.98865  class accuracy :  0.02955665024630542  car_class_accuracy :  0.02955665024630542
saved prediction of 77 accuracy :  0.9523  class accuracy :  0.0696236559139785  car_class_accuracy :  0.0696236559139785
saved prediction of 78 accuracy :  0.94545  class accuracy :  0.06519274376417233  car_class_accuracy :  0.06519274376417233
saved prediction of 79 accuracy :  0.98745  class accuracy :  0.07692307692307693  car_class_accuracy :  0.07692307692307693
saved prediction of 80 accuracy :  0.94395  class accuracy :  0.06868060091443501  car_class_accuracy :  0.06868060091443501
saved prediction of 81 accuracy :  0.9818  class accuracy :  0.06784741144414169  car_class_accuracy :  0.06784741144414169
saved prediction of 82 accuracy :  0.8746  class accuracy :  0.02836734693877551  car_class_accuracy :  0.02836734693877551
saved prediction of 83 accuracy :  0.9904  class accuracy :  0.0  car_class_accuracy :  0.0
saved prediction of 84 accuracy :  0.97265  class accuracy :  0.0771103896103896  car_class_accuracy :  0.0771103896103896
saved prediction of 85 accuracy :  0.98945  class accuracy :  0.07971014492753623  car_class_accuracy :  0.07971014492753623
saved prediction of 86 accuracy :  0.9815  class accuracy :  0.09559748427672957  car_class_accuracy :  0.09559748427672957
saved prediction of 87 accuracy :  0.9565  class accuracy :  0.061582852431986815  car_class_accuracy :  0.061582852431986815
saved prediction of 88 accuracy :  0.95295  class accuracy :  0.05559276624246483  car_class_accuracy :  0.05559276624246483
saved prediction of 89 accuracy :  0.9501  class accuracy :  0.005908096280087528  car_class_accuracy :  0.005908096280087528
saved prediction of 90 accuracy :  0.94365  class accuracy :  0.03686905632772495  car_class_accuracy :  0.03686905632772495
saved prediction of 91 accuracy :  0.94925  class accuracy :  0.09791666666666667  car_class_accuracy :  0.09791666666666667
saved prediction of 92 accuracy :  0.9486  class accuracy :  0.08028350515463918  car_class_accuracy :  0.08028350515463918
saved prediction of 93 accuracy :  0.98935  class accuracy :  0.0305  car_class_accuracy :  0.0305
saved prediction of 94 accuracy :  0.9581  class accuracy :  0.06767213114754098  car_class_accuracy :  0.06767213114754098
saved prediction of 95 accuracy :  0.94365  class accuracy :  0.06477627471383976  car_class_accuracy :  0.06477627471383976
saved prediction of 96 accuracy :  0.98785  class accuracy :  0.043478260869565216  car_class_accuracy :  0.043478260869565216
saved prediction of 97 accuracy :  0.9464  class accuracy :  0.06785946649316851  car_class_accuracy :  0.06785946649316851
saved prediction of 98 accuracy :  0.98255  class accuracy :  0.07467362924281984  car_class_accuracy :  0.07467362924281984
saved prediction of 99 accuracy :  0.86035  class accuracy :  0.03333333333333333  car_class_accuracy :  0.03333333333333333
